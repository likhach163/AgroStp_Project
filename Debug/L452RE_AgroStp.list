
L452RE_AgroStp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800b4f8  0800b4f8  0001b4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba0c  0800ba0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba0c  0800ba0c  0001ba0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba14  0800ba14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba14  0800ba14  0001ba14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba18  0800ba18  0001ba18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ba1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001e0  0800bbfc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800bbfc  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019386  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003346  00000000  00000000  00039596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253be  00000000  00000000  0003efa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175b4  00000000  00000000  00064366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf0c  00000000  00000000  0007b91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068bc  00000000  00000000  0015887c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4e0 	.word	0x0800b4e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b4e0 	.word	0x0800b4e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_GPIO_Init>:

/** Configure pins
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_GPIO_Init+0xec>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a34      	ldr	r2, [pc, #208]	; (80010e8 <MX_GPIO_Init+0xec>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_GPIO_Init+0xec>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_GPIO_Init+0xec>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a2e      	ldr	r2, [pc, #184]	; (80010e8 <MX_GPIO_Init+0xec>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_GPIO_Init+0xec>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_GPIO_Init+0xec>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <MX_GPIO_Init+0xec>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_GPIO_Init+0xec>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2120      	movs	r1, #32
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f001 faed 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_Pin;
 8001066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	481c      	ldr	r0, [pc, #112]	; (80010ec <MX_GPIO_Init+0xf0>)
 800107c:	f001 f94e 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001080:	2320      	movs	r3, #32
 8001082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f001 f93f 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800109e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f001 f92d 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2C_ADDR_MIDDLE_Pin|I2C_ADDR_LOWER_Pin;
 80010c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010cc:	2302      	movs	r3, #2
 80010ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f001 f91f 	bl	800231c <HAL_GPIO_Init>

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48000800 	.word	0x48000800

080010f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_I2C1_Init+0x74>)
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <MX_I2C1_Init+0x78>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5D;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_I2C1_Init+0x74>)
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <MX_I2C1_Init+0x7c>)
 80010fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_I2C1_Init+0x74>)
 8001108:	2201      	movs	r2, #1
 800110a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_I2C1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_I2C1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <MX_I2C1_Init+0x74>)
 800112c:	f001 faba 	bl	80026a4 <HAL_I2C_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001136:	f000 fa15 	bl	8001564 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800113a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <MX_I2C1_Init+0x74>)
 8001140:	f002 fea0 	bl	8003e84 <HAL_I2CEx_ConfigAnalogFilter>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800114a:	f000 fa0b 	bl	8001564 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_I2C1_Init+0x74>)
 8001152:	f002 fee2 	bl	8003f1a <HAL_I2CEx_ConfigDigitalFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800115c:	f000 fa02 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000022c 	.word	0x2000022c
 8001168:	40005400 	.word	0x40005400
 800116c:	00303d5d 	.word	0x00303d5d

08001170 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <HAL_I2C_MspInit+0x8c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d130      	bne.n	80011f4 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_I2C_MspInit+0x90>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <HAL_I2C_MspInit+0x90>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_I2C_MspInit+0x90>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b0:	2312      	movs	r3, #18
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011bc:	2304      	movs	r3, #4
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <HAL_I2C_MspInit+0x94>)
 80011c8:	f001 f8a8 	bl	800231c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_I2C_MspInit+0x90>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <HAL_I2C_MspInit+0x90>)
 80011d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d6:	6593      	str	r3, [r2, #88]	; 0x58
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_I2C_MspInit+0x90>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	201f      	movs	r0, #31
 80011ea:	f001 f812 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ee:	201f      	movs	r0, #31
 80011f0:	f001 f82b 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40005400 	.word	0x40005400
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400

08001208 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
  {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f000 fe8d 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f8f7 	bl	8001404 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001216:	f7ff fef1 	bl	8000ffc <MX_GPIO_Init>
  MX_I2C1_Init();
 800121a:	f7ff ff69 	bl	80010f0 <MX_I2C1_Init>
  hi2c1.Init.OwnAddress1 = 0x64;
 800121e:	4b72      	ldr	r3, [pc, #456]	; (80013e8 <main+0x1e0>)
 8001220:	2264      	movs	r2, #100	; 0x64
 8001222:	609a      	str	r2, [r3, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001224:	4870      	ldr	r0, [pc, #448]	; (80013e8 <main+0x1e0>)
 8001226:	f001 fa3d 	bl	80026a4 <HAL_I2C_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <main+0x2c>
    {
    Error_Handler();
 8001230:	f000 f998 	bl	8001564 <Error_Handler>
    }
  initSTOPMode();
 8001234:	f005 fc62 	bl	8006afc <initSTOPMode>
  waitForClickButton();
 8001238:	f005 fc9a 	bl	8006b70 <waitForClickButton>
  goToSTOPMode();
 800123c:	f005 fc82 	bl	8006b44 <goToSTOPMode>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	2120      	movs	r1, #32
 8001244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001248:	f001 f9fa 	bl	8002640 <HAL_GPIO_WritePin>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  MX_TIM1_Init();
 800124c:	f000 fafc 	bl	8001848 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001250:	f000 fb50 	bl	80018f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001254:	f000 fbb8 	bl	80019c8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001258:	f000 fc76 	bl	8001b48 <MX_USART1_UART_Init>
//  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800125c:	4863      	ldr	r0, [pc, #396]	; (80013ec <main+0x1e4>)
 800125e:	f004 fa0d 	bl	800567c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001262:	4863      	ldr	r0, [pc, #396]	; (80013f0 <main+0x1e8>)
 8001264:	f004 fa0a 	bl	800567c <HAL_TIM_Base_Start>

  uint8_t readyFlag = 1, startFlag = 0;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	2300      	movs	r3, #0
 800126e:	73bb      	strb	r3, [r7, #14]
  float temperatureDS18B20 = 0.0;
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  unsigned char temp[sizeof(float)];
  uint8_t message = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	70fb      	strb	r3, [r7, #3]
  while(1)
    {
    /*
     *        I2C command processing
     */
    while(readyFlag == 1)
 800127a:	e01e      	b.n	80012ba <main+0xb2>
      {
      do
        {
        if (HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*)&message, sizeof(uint8_t)) != HAL_OK)
 800127c:	1cfb      	adds	r3, r7, #3
 800127e:	2201      	movs	r2, #1
 8001280:	4619      	mov	r1, r3
 8001282:	4859      	ldr	r0, [pc, #356]	; (80013e8 <main+0x1e0>)
 8001284:	f001 fba6 	bl	80029d4 <HAL_I2C_Slave_Receive_IT>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <main+0x8a>
          {
          Error_Handler();
 800128e:	f000 f969 	bl	8001564 <Error_Handler>
          }
        while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8001292:	bf00      	nop
 8001294:	4854      	ldr	r0, [pc, #336]	; (80013e8 <main+0x1e0>)
 8001296:	f001 fc6f 	bl	8002b78 <HAL_I2C_GetState>
 800129a:	4603      	mov	r3, r0
 800129c:	2b20      	cmp	r3, #32
 800129e:	d1f9      	bne.n	8001294 <main+0x8c>
          {
          }
        } while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80012a0:	4851      	ldr	r0, [pc, #324]	; (80013e8 <main+0x1e0>)
 80012a2:	f001 fc77 	bl	8002b94 <HAL_I2C_GetError>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d0e7      	beq.n	800127c <main+0x74>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012ac:	2120      	movs	r1, #32
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f001 f9dd 	bl	8002670 <HAL_GPIO_TogglePin>
      readyFlag = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
    while(readyFlag == 1)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d0dd      	beq.n	800127c <main+0x74>
      }

    if (message == START_TRANSMISSION)
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d11e      	bne.n	8001304 <main+0xfc>
      {
      message = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	70fb      	strb	r3, [r7, #3]
      for (uint8_t i = 0; i < 5; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	737b      	strb	r3, [r7, #13]
 80012ce:	e00b      	b.n	80012e8 <main+0xe0>
        {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012d0:	2120      	movs	r1, #32
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f001 f9cb 	bl	8002670 <HAL_GPIO_TogglePin>
        HAL_Delay(300);
 80012da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012de:	f000 fe99 	bl	8002014 <HAL_Delay>
      for (uint8_t i = 0; i < 5; i++)
 80012e2:	7b7b      	ldrb	r3, [r7, #13]
 80012e4:	3301      	adds	r3, #1
 80012e6:	737b      	strb	r3, [r7, #13]
 80012e8:	7b7b      	ldrb	r3, [r7, #13]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d9f0      	bls.n	80012d0 <main+0xc8>
        }
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2120      	movs	r1, #32
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f001 f9a3 	bl	8002640 <HAL_GPIO_WritePin>
      startFlag = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73bb      	strb	r3, [r7, #14]
      readyFlag = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e7da      	b.n	80012ba <main+0xb2>
      }

    else if (message == MOISTURE_MEASURE && startFlag == 1)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b24      	cmp	r3, #36	; 0x24
 8001308:	d142      	bne.n	8001390 <main+0x188>
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d13f      	bne.n	8001390 <main+0x188>
      {
      message = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	70fb      	strb	r3, [r7, #3]
      endOfFreqMeasureFlag = 0;
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <main+0x1ec>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim1);
 800131a:	4837      	ldr	r0, [pc, #220]	; (80013f8 <main+0x1f0>)
 800131c:	f004 fa02 	bl	8005724 <HAL_TIM_Base_Start_IT>
      do
        {

        } while(endOfFreqMeasureFlag == 0 || freqNotCalibrated == 0);
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <main+0x1ec>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0fb      	beq.n	8001320 <main+0x118>
 8001328:	4b34      	ldr	r3, [pc, #208]	; (80013fc <main+0x1f4>)
 800132a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	f7ff fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ef      	bne.n	8001320 <main+0x118>

      HAL_TIM_Base_Stop_IT(&htim1);
 8001340:	482d      	ldr	r0, [pc, #180]	; (80013f8 <main+0x1f0>)
 8001342:	f004 fa4b 	bl	80057dc <HAL_TIM_Base_Stop_IT>
      freq = round(freqNotCalibrated);
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <main+0x1f4>)
 8001348:	ed93 7b00 	vldr	d7, [r3]
 800134c:	eeb0 0a47 	vmov.f32	s0, s14
 8001350:	eef0 0a67 	vmov.f32	s1, s15
 8001354:	f005 fc26 	bl	8006ba4 <round>
 8001358:	ec53 2b10 	vmov	r2, r3, d0
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc2a 	bl	8000bb8 <__aeabi_d2uiz>
 8001364:	4603      	mov	r3, r0
 8001366:	4a26      	ldr	r2, [pc, #152]	; (8001400 <main+0x1f8>)
 8001368:	6013      	str	r3, [r2, #0]
      if (HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*) &freq, sizeof(freq), HAL_MAX_DELAY) != HAL_OK)
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	2204      	movs	r2, #4
 8001370:	4923      	ldr	r1, [pc, #140]	; (8001400 <main+0x1f8>)
 8001372:	481d      	ldr	r0, [pc, #116]	; (80013e8 <main+0x1e0>)
 8001374:	f001 fa25 	bl	80027c2 <HAL_I2C_Slave_Transmit>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <main+0x17c>
        {
        Error_Handler();
 800137e:	f000 f8f1 	bl	8001564 <Error_Handler>
 8001382:	e001      	b.n	8001388 <main+0x180>
        }
      else readyFlag = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]

      endOfFreqMeasureFlag = 0;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <main+0x1ec>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e02a      	b.n	80013e6 <main+0x1de>
      }

    else if (message == TEMPERATURE_MEASURE && startFlag == 1)
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	2b22      	cmp	r3, #34	; 0x22
 8001394:	d117      	bne.n	80013c6 <main+0x1be>
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d114      	bne.n	80013c6 <main+0x1be>
      {
      //ds18b20_init(DS18B20_RESOLUTION_12_BIT, Ds18b20_1wire_GPIO_Port, Ds18b20_1wire_Pin);
      temperatureDS18B20 = receiveDataDs18b20();
 800139c:	f000 fda8 	bl	8001ef0 <receiveDataDs18b20>
 80013a0:	eef0 7a40 	vmov.f32	s15, s0
 80013a4:	edc7 7a02 	vstr	s15, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
      memcpy(temp, &temperatureDS18B20, sizeof(temperatureDS18B20));
 80013aa:	607b      	str	r3, [r7, #4]
      if (HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*) temp, sizeof(temp), HAL_MAX_DELAY) != HAL_OK)
 80013ac:	1d39      	adds	r1, r7, #4
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	2204      	movs	r2, #4
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <main+0x1e0>)
 80013b6:	f001 fa04 	bl	80027c2 <HAL_I2C_Slave_Transmit>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d012      	beq.n	80013e6 <main+0x1de>
        {
        Error_Handler();
 80013c0:	f000 f8d0 	bl	8001564 <Error_Handler>
      if (HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*) temp, sizeof(temp), HAL_MAX_DELAY) != HAL_OK)
 80013c4:	e00f      	b.n	80013e6 <main+0x1de>
        }
      }
    else if (message == STOP_TRANSMISSION)
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	2b30      	cmp	r3, #48	; 0x30
 80013ca:	d10a      	bne.n	80013e2 <main+0x1da>
      {
      message = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	70fb      	strb	r3, [r7, #3]
      startFlag = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
      readyFlag = 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
      initSTOPMode();
 80013d8:	f005 fb90 	bl	8006afc <initSTOPMode>
      goToSTOPMode();
 80013dc:	f005 fbb2 	bl	8006b44 <goToSTOPMode>
 80013e0:	e76b      	b.n	80012ba <main+0xb2>
      }
    else readyFlag = 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
    while(readyFlag == 1)
 80013e6:	e768      	b.n	80012ba <main+0xb2>
 80013e8:	2000022c 	.word	0x2000022c
 80013ec:	20000310 	.word	0x20000310
 80013f0:	20000278 	.word	0x20000278
 80013f4:	2000020c 	.word	0x2000020c
 80013f8:	200002c4 	.word	0x200002c4
 80013fc:	20000200 	.word	0x20000200
 8001400:	20000208 	.word	0x20000208

08001404 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
  {
 8001404:	b580      	push	{r7, lr}
 8001406:	b0b0      	sub	sp, #192	; 0xc0
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct =
 800140a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800140e:	2244      	movs	r2, #68	; 0x44
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f005 fc36 	bl	8006c84 <memset>
    {
    0
    };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001418:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
    {
    0
    };
  RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8001428:	463b      	mov	r3, r7
 800142a:	2268      	movs	r2, #104	; 0x68
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f005 fc28 	bl	8006c84 <memset>
    };

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2340      	movs	r3, #64	; 0x40
 8001442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001450:	4618      	mov	r0, r3
 8001452:	f002 ff03 	bl	800425c <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x5c>
    {
    Error_Handler();
 800145c:	f000 f882 	bl	8001564 <Error_Handler>
    }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001460:	230f      	movs	r3, #15
 8001462:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001464:	2301      	movs	r3, #1
 8001466:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001474:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fb0e 	bl	8004a9c <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x86>
    {
    Error_Handler();
 8001486:	f000 f86d 	bl	8001564 <Error_Handler>
    }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 800148a:	2341      	movs	r3, #65	; 0x41
 800148c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800148e:	2302      	movs	r3, #2
 8001490:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fd38 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xa6>
    {
    Error_Handler();
 80014a6:	f000 f85d 	bl	8001564 <Error_Handler>
    }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 80014aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ae:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 80014b2:	2000      	movs	r0, #0
 80014b4:	f003 fbd4 	bl	8004c60 <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014bc:	f002 fe22 	bl	8004104 <HAL_PWREx_ControlVoltageScaling>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0xc6>
    {
    Error_Handler();
 80014c6:	f000 f84d 	bl	8001564 <Error_Handler>
    }
  }
 80014ca:	bf00      	nop
 80014cc:	37c0      	adds	r7, #192	; 0xc0
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	0000      	movs	r0, r0
 80014d4:	0000      	movs	r0, r0
	...

080014d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d12b      	bne.n	8001540 <HAL_TIM_PeriodElapsedCallback+0x68>
    {
    uint16_t TIM2_count = __HAL_TIM_GET_COUNTER(&htim2);               // Значение счетчика таймера TIM2
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	81fb      	strh	r3, [r7, #14]
                                                                       // (Количество последних подсчитанных
                                                                       // импульсов к моменту прерывания)
    uint16_t TIM2_overflows = __HAL_TIM_GET_COUNTER(&htim3);               // значение в счётчике таймера №3
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	81bb      	strh	r3, [r7, #12]
    uint16_t TIM2_resolution = __HAL_TIM_GET_AUTORELOAD(&htim2);               // значение переполнения таймера №2 (65535)
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	817b      	strh	r3, [r7, #10]
    freqNotCalibrated = 1.003764115432873 * (TIM2_count + (TIM2_overflows * TIM2_resolution) + TIM2_overflows);               // вычисляем
 8001500:	89fa      	ldrh	r2, [r7, #14]
 8001502:	89bb      	ldrh	r3, [r7, #12]
 8001504:	8979      	ldrh	r1, [r7, #10]
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	441a      	add	r2, r3
 800150c:	89bb      	ldrh	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f80f 	bl	8000534 <__aeabi_i2d>
 8001516:	a30c      	add	r3, pc, #48	; (adr r3, 8001548 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f874 	bl	8000608 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	490d      	ldr	r1, [pc, #52]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001526:	e9c1 2300 	strd	r2, r3, [r1]
    endOfFreqMeasureFlag = 1;
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]

    //////////////// обнуляем счётчики и рестартуем таймер №1 /////////////////
    __HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	f60aebc2 	.word	0xf60aebc2
 800154c:	3ff00f6a 	.word	0x3ff00f6a
 8001550:	200002c4 	.word	0x200002c4
 8001554:	20000310 	.word	0x20000310
 8001558:	20000278 	.word	0x20000278
 800155c:	20000200 	.word	0x20000200
 8001560:	2000020c 	.word	0x2000020c

08001564 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
  {
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  HAL_UART_Transmit(&huart1, (uint8_t*) "Error handler", strlen("Error handler"), 1000);
 8001568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156c:	220d      	movs	r2, #13
 800156e:	4906      	ldr	r1, [pc, #24]	; (8001588 <Error_Handler+0x24>)
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <Error_Handler+0x28>)
 8001572:	f004 fe23 	bl	80061bc <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t*) "\n\r", 2, 1000);
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	2202      	movs	r2, #2
 800157c:	4904      	ldr	r1, [pc, #16]	; (8001590 <Error_Handler+0x2c>)
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <Error_Handler+0x28>)
 8001580:	f004 fe1c 	bl	80061bc <HAL_UART_Transmit>
  while(1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x20>
 8001586:	bf00      	nop
 8001588:	0800b4f8 	.word	0x0800b4f8
 800158c:	2000035c 	.word	0x2000035c
 8001590:	0800b508 	.word	0x0800b508

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x44>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6613      	str	r3, [r2, #96]	; 0x60
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x44>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x44>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x44>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 fcd4 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001636:	f004 f900 	bl	800583a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200002c4 	.word	0x200002c4

08001644 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <I2C1_EV_IRQHandler+0x10>)
 800164a:	f001 fa13 	bl	8002a74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000022c 	.word	0x2000022c

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001672:	f005 fadd 	bl	8006c30 <__errno>
 8001676:	4603      	mov	r3, r0
 8001678:	2216      	movs	r2, #22
 800167a:	601a      	str	r2, [r3, #0]
	return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_exit>:

void _exit (int status)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffe7 	bl	8001668 <_kill>
	while (1) {}		/* Make sure we hang here */
 800169a:	e7fe      	b.n	800169a <_exit+0x12>

0800169c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e00a      	b.n	80016c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ae:	f3af 8000 	nop.w
 80016b2:	4601      	mov	r1, r0
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	b2ca      	uxtb	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbf0      	blt.n	80016ae <_read+0x12>
	}

return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e009      	b.n	80016fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	60ba      	str	r2, [r7, #8]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf1      	blt.n	80016e8 <_write+0x12>
	}
	return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_close>:

int _close(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
	return -1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	605a      	str	r2, [r3, #4]
	return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_isatty>:

int _isatty(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
	return 1;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f005 fa42 	bl	8006c30 <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20028000 	.word	0x20028000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	20000210 	.word	0x20000210
 80017e0:	200003f8 	.word	0x200003f8

080017e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <SystemInit+0x5c>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a14      	ldr	r2, [pc, #80]	; (8001840 <SystemInit+0x5c>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <SystemInit+0x60>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <SystemInit+0x60>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <SystemInit+0x60>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <SystemInit+0x60>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <SystemInit+0x60>)
 8001810:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001814:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001818:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <SystemInit+0x60>)
 800181c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001820:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <SystemInit+0x60>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a07      	ldr	r2, [pc, #28]	; (8001844 <SystemInit+0x60>)
 8001828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SystemInit+0x60>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	40021000 	.word	0x40021000

08001848 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <MX_TIM1_Init+0xa4>)
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <MX_TIM1_Init+0xa8>)
 800186a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <MX_TIM1_Init+0xa4>)
 800186e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001872:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <MX_TIM1_Init+0xa4>)
 8001876:	2210      	movs	r2, #16
 8001878:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <MX_TIM1_Init+0xa4>)
 800187c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001880:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_TIM1_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_TIM1_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_TIM1_Init+0xa4>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001894:	4815      	ldr	r0, [pc, #84]	; (80018ec <MX_TIM1_Init+0xa4>)
 8001896:	f003 fe99 	bl	80055cc <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80018a0:	f7ff fe60 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	480e      	ldr	r0, [pc, #56]	; (80018ec <MX_TIM1_Init+0xa4>)
 80018b2:	f004 f8e1 	bl	8005a78 <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018bc:	f7ff fe52 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80018c0:	2310      	movs	r3, #16
 80018c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_ENABLE;
 80018c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018c8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <MX_TIM1_Init+0xa4>)
 80018d4:	f004 fb98 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80018de:	f7ff fe41 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200002c4 	.word	0x200002c4
 80018f0:	40012c00 	.word	0x40012c00

080018f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001922:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <MX_TIM2_Init+0xd0>)
 8001924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <MX_TIM2_Init+0xd0>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <MX_TIM2_Init+0xd0>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <MX_TIM2_Init+0xd0>)
 8001938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <MX_TIM2_Init+0xd0>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <MX_TIM2_Init+0xd0>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194a:	481e      	ldr	r0, [pc, #120]	; (80019c4 <MX_TIM2_Init+0xd0>)
 800194c:	f003 fe3e 	bl	80055cc <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001956:	f7ff fe05 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800195a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195e:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4619      	mov	r1, r3
 8001972:	4814      	ldr	r0, [pc, #80]	; (80019c4 <MX_TIM2_Init+0xd0>)
 8001974:	f004 f880 	bl	8005a78 <HAL_TIM_ConfigClockSource>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800197e:	f7ff fdf1 	bl	8001564 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001982:	2305      	movs	r3, #5
 8001984:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <MX_TIM2_Init+0xd0>)
 8001992:	f004 f937 	bl	8005c04 <HAL_TIM_SlaveConfigSynchro>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800199c:	f7ff fde2 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a0:	2320      	movs	r3, #32
 80019a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_TIM2_Init+0xd0>)
 80019ae:	f004 fb2b 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80019b8:	f7ff fdd4 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3730      	adds	r7, #48	; 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000310 	.word	0x20000310

080019c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019de:	463b      	mov	r3, r7
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_TIM3_Init+0x98>)
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <MX_TIM3_Init+0x9c>)
 80019ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_TIM3_Init+0x98>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_TIM3_Init+0x98>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_TIM3_Init+0x98>)
 80019fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_TIM3_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <MX_TIM3_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0e:	4814      	ldr	r0, [pc, #80]	; (8001a60 <MX_TIM3_Init+0x98>)
 8001a10:	f003 fddc 	bl	80055cc <HAL_TIM_Base_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a1a:	f7ff fda3 	bl	8001564 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001a22:	2310      	movs	r3, #16
 8001a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_TIM3_Init+0x98>)
 8001a2e:	f004 f8e9 	bl	8005c04 <HAL_TIM_SlaveConfigSynchro>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001a38:	f7ff fd94 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_TIM3_Init+0x98>)
 8001a4a:	f004 fadd 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001a54:	f7ff fd86 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000278 	.word	0x20000278
 8001a64:	40000400 	.word	0x40000400

08001a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <HAL_TIM_Base_MspInit+0xd4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d114      	bne.n	8001ab4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	4a2c      	ldr	r2, [pc, #176]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a94:	6613      	str	r3, [r2, #96]	; 0x60
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2019      	movs	r0, #25
 8001aa8:	f000 fbb3 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001aac:	2019      	movs	r0, #25
 8001aae:	f000 fbcc 	bl	800224a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ab2:	e03f      	b.n	8001b34 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abc:	d129      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8001afe:	230e      	movs	r3, #14
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0c:	f000 fc06 	bl	800231c <HAL_GPIO_Init>
}
 8001b10:	e010      	b.n	8001b34 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM3)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_TIM_Base_MspInit+0xdc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d10b      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	6593      	str	r3, [r2, #88]	; 0x58
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_TIM_Base_MspInit+0xd8>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	; 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40012c00 	.word	0x40012c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40000400 	.word	0x40000400

08001b48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <MX_USART1_UART_Init+0x5c>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART1_UART_Init+0x58>)
 8001b8c:	f004 fac8 	bl	8006120 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b96:	f7ff fce5 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000035c 	.word	0x2000035c
 8001ba4:	40013800 	.word	0x40013800

08001ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_UART_MspInit+0x80>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d129      	bne.n	8001c1e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_UART_MspInit+0x84>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_UART_MspInit+0x84>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_UART_MspInit+0x84>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_UART_MspInit+0x84>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <HAL_UART_MspInit+0x84>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_UART_MspInit+0x84>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f000 fb7f 	bl	800231c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40021000 	.word	0x40021000

08001c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c34:	f7ff fdd6 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c3a:	e003      	b.n	8001c44 <LoopCopyDataInit>

08001c3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c42:	3104      	adds	r1, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c4c:	d3f6      	bcc.n	8001c3c <CopyDataInit>
	ldr	r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c50:	e002      	b.n	8001c58 <LoopFillZerobss>

08001c52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c54:	f842 3b04 	str.w	r3, [r2], #4

08001c58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <LoopForever+0x16>)
	cmp	r2, r3
 8001c5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c5c:	d3f9      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f004 ffed 	bl	8006c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c62:	f7ff fad1 	bl	8001208 <main>

08001c66 <LoopForever>:

LoopForever:
    b LoopForever
 8001c66:	e7fe      	b.n	8001c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c68:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001c6c:	0800ba1c 	.word	0x0800ba1c
	ldr	r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c74:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001c78:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001c7c:	200003f4 	.word	0x200003f4

08001c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC1_IRQHandler>
	...

08001c84 <ds18b20_convert_t>:
	Pin = pin;
	ds18b20_set_resolution(resolution);
	__enable_irq();
}

void ds18b20_convert_t(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	reset();
 8001c88:	f000 f85e 	bl	8001d48 <reset>
	write_byte(SKIP_ROM);
 8001c8c:	20cc      	movs	r0, #204	; 0xcc
 8001c8e:	f000 f8bb 	bl	8001e08 <write_byte>
	write_byte(CONVERT_T);
 8001c92:	2044      	movs	r0, #68	; 0x44
 8001c94:	f000 f8b8 	bl	8001e08 <write_byte>
	start_us = HAL_GetTick();
 8001c98:	f000 f9b0 	bl	8001ffc <HAL_GetTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4a02      	ldr	r2, [pc, #8]	; (8001ca8 <ds18b20_convert_t+0x24>)
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000220 	.word	0x20000220

08001cac <ds18b20_is_busy>:


uint32_t ds18b20_is_busy(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	return (HAL_GetTick() - start_us) > DELAY_WAIT_CONVERT;
 8001cb0:	f000 f9a4 	bl	8001ffc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <ds18b20_is_busy+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <ds18b20_is_busy+0x28>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	bf8c      	ite	hi
 8001cc4:	2301      	movhi	r3, #1
 8001cc6:	2300      	movls	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000220 	.word	0x20000220
 8001cd4:	2000021c 	.word	0x2000021c

08001cd8 <ds18b20_read_temperature>:

float ds18b20_read_temperature(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	reset();
 8001cdc:	f000 f834 	bl	8001d48 <reset>
	write_byte(SKIP_ROM);
 8001ce0:	20cc      	movs	r0, #204	; 0xcc
 8001ce2:	f000 f891 	bl	8001e08 <write_byte>
	write_byte(READ_SCRATCHPAD);
 8001ce6:	20be      	movs	r0, #190	; 0xbe
 8001ce8:	f000 f88e 	bl	8001e08 <write_byte>
	return read_temperature();
 8001cec:	f000 f8ae 	bl	8001e4c <read_temperature>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <delay_us>:
	write_byte(TL_REGISTER);
	write_byte(resolution);
	DELAY_WAIT_CONVERT = DELAY_T_CONVERT / get_divider(resolution);
}

void delay_us(uint32_t n) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	TIM1->ARR = n - 1;
 8001d04:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <delay_us+0x48>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CNT = TIM1->ARR;
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <delay_us+0x48>)
 8001d0e:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <delay_us+0x48>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	6253      	str	r3, [r2, #36]	; 0x24
	TIM1->CR1 |= TIM_CR1_CEN; // start the timer
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <delay_us+0x48>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <delay_us+0x48>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]
	while (TIM1->CNT != 0);
 8001d20:	bf00      	nop
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <delay_us+0x48>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1fb      	bne.n	8001d22 <delay_us+0x26>
	TIM1->CR1 &= ~TIM_CR1_CEN; // stop the timer
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <delay_us+0x48>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <delay_us+0x48>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6013      	str	r3, [r2, #0]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40012c00 	.word	0x40012c00

08001d48 <reset>:

void reset(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	DQ_LOW(Port,Pin);
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <reset+0x44>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <reset+0x48>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <reset+0x44>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	400a      	ands	r2, r1
 8001d60:	615a      	str	r2, [r3, #20]
	delay_us(DELAY_RESET);
 8001d62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d66:	f7ff ffc9 	bl	8001cfc <delay_us>
	DQ_HIGH(Port,Pin);
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <reset+0x44>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <reset+0x48>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <reset+0x44>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	615a      	str	r2, [r3, #20]
	delay_us(DELAY_RESET);
 8001d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d82:	f7ff ffbb 	bl	8001cfc <delay_us>
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000214 	.word	0x20000214
 8001d90:	20000218 	.word	0x20000218

08001d94 <write_bit>:

void write_bit(uint8_t bit) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
	DQ_LOW(Port,Pin);
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <write_bit+0x6c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <write_bit+0x70>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <write_bit+0x6c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	400a      	ands	r2, r1
 8001db2:	615a      	str	r2, [r3, #20]
	delay_us(bit ? DELAY_WRITE_1 : DELAY_WRITE_0);
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <write_bit+0x2a>
 8001dba:	230a      	movs	r3, #10
 8001dbc:	e000      	b.n	8001dc0 <write_bit+0x2c>
 8001dbe:	233c      	movs	r3, #60	; 0x3c
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff9b 	bl	8001cfc <delay_us>
	DQ_HIGH(Port,Pin);
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <write_bit+0x6c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <write_bit+0x70>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <write_bit+0x6c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	615a      	str	r2, [r3, #20]
	delay_us(bit ? DELAY_WRITE_1_PAUSE : DELAY_WRITE_0_PAUSE);
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <write_bit+0x50>
 8001de0:	233c      	movs	r3, #60	; 0x3c
 8001de2:	e000      	b.n	8001de6 <write_bit+0x52>
 8001de4:	230a      	movs	r3, #10
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff88 	bl	8001cfc <delay_us>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001dec:	2120      	movs	r1, #32
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df2:	f000 fc3d 	bl	8002670 <HAL_GPIO_TogglePin>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000214 	.word	0x20000214
 8001e04:	20000218 	.word	0x20000218

08001e08 <write_byte>:

void write_byte(uint8_t data) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e010      	b.n	8001e3a <write_byte+0x32>
		write_bit(data >> i & 1);
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	fa42 f303 	asr.w	r3, r2, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ffb3 	bl	8001d94 <write_bit>
		delay_us(DELAY_T_PROTECTION);
 8001e2e:	2005      	movs	r0, #5
 8001e30:	f7ff ff64 	bl	8001cfc <delay_us>
	for (uint8_t i = 0; i < 8; i++) {
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	3301      	adds	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d9eb      	bls.n	8001e18 <write_byte+0x10>
	}
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <read_temperature>:
	} else {               //DS18B20_RESOLUTION_12_BIT
		return 1;
	}
}

float read_temperature(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
	int temperature=0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 16; i++) {
 8001e56:	2300      	movs	r3, #0
 8001e58:	70fb      	strb	r3, [r7, #3]
 8001e5a:	e032      	b.n	8001ec2 <read_temperature+0x76>
		DQ_LOW(Port,Pin);
 8001e5c:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <read_temperature+0x9c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <read_temperature+0xa0>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <read_temperature+0x9c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	400a      	ands	r2, r1
 8001e70:	615a      	str	r2, [r3, #20]
		delay_us(DELAY_READ_SLOT);
 8001e72:	200a      	movs	r0, #10
 8001e74:	f7ff ff42 	bl	8001cfc <delay_us>

		DQ_HIGH(Port,Pin);
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <read_temperature+0x9c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <read_temperature+0xa0>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	4619      	mov	r1, r3
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <read_temperature+0x9c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	615a      	str	r2, [r3, #20]
		delay_us(DELAY_BUS_RELAX);
 8001e8c:	200a      	movs	r0, #10
 8001e8e:	f7ff ff35 	bl	8001cfc <delay_us>

		temperature += READ_1(Port,Pin,i);
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <read_temperature+0x9c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <read_temperature+0xa0>)
 8001e9a:	8812      	ldrh	r2, [r2, #0]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	607b      	str	r3, [r7, #4]
		delay_us(DELAY_READ_PAUSE);
 8001eb6:	2032      	movs	r0, #50	; 0x32
 8001eb8:	f7ff ff20 	bl	8001cfc <delay_us>
	for (uint8_t i = 0; i < 16; i++) {
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	70fb      	strb	r3, [r7, #3]
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d9c9      	bls.n	8001e5c <read_temperature+0x10>
	}
	return ((float)temperature / 16.0f);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001ed6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001eda:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ede:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000214 	.word	0x20000214
 8001eec:	20000218 	.word	0x20000218

08001ef0 <receiveDataDs18b20>:


float receiveDataDs18b20(){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
	float temperature = 0;
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efc:	b672      	cpsid	i
}
 8001efe:	bf00      	nop
	__disable_irq();

	ds18b20_convert_t();
 8001f00:	f7ff fec0 	bl	8001c84 <ds18b20_convert_t>
	while(ds18b20_is_busy());
 8001f04:	bf00      	nop
 8001f06:	f7ff fed1 	bl	8001cac <ds18b20_is_busy>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1fa      	bne.n	8001f06 <receiveDataDs18b20+0x16>
	temperature = ds18b20_read_temperature();
 8001f10:	f7ff fee2 	bl	8001cd8 <ds18b20_read_temperature>
 8001f14:	ed87 0a01 	vstr	s0, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f18:	b662      	cpsie	i
}
 8001f1a:	bf00      	nop

	__enable_irq();

	return temperature;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	ee07 3a90 	vmov	s15, r3
}
 8001f22:	eeb0 0a67 	vmov.f32	s0, s15
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f36:	2003      	movs	r0, #3
 8001f38:	f000 f960 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f80d 	bl	8001f5c <HAL_InitTick>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	e001      	b.n	8001f52 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f4e:	f7ff fb21 	bl	8001594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f52:	79fb      	ldrb	r3, [r7, #7]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_InitTick+0x6c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_InitTick+0x70>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_InitTick+0x6c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f96d 	bl	8002266 <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d809      	bhi.n	8001fac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f937 	bl	8002212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_InitTick+0x74>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e007      	b.n	8001fbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e004      	b.n	8001fbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e001      	b.n	8001fbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x20>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	200003e0 	.word	0x200003e0

08001ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_GetTick+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	200003e0 	.word	0x200003e0

08002014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff ffee 	bl	8001ffc <HAL_GetTick>
 8002020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d005      	beq.n	800203a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_Delay+0x44>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800203a:	bf00      	nop
 800203c:	f7ff ffde 	bl	8001ffc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f7      	bhi.n	800203c <HAL_Delay+0x28>
  {
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000008 	.word	0x20000008

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff29 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff3e 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff8e 	bl	8002150 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff31 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d005      	beq.n	80022a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2204      	movs	r2, #4
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e029      	b.n	80022f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 020e 	bic.w	r2, r2, #14
 80022b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f003 021c 	and.w	r2, r3, #28
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
    }
  }
  return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800230e:	b2db      	uxtb	r3, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e154      	b.n	80025d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8146 	beq.w	80025d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d00b      	beq.n	8002364 <HAL_GPIO_Init+0x48>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d007      	beq.n	8002364 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002358:	2b11      	cmp	r3, #17
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b12      	cmp	r3, #18
 8002362:	d130      	bne.n	80023c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239a:	2201      	movs	r2, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 0201 	and.w	r2, r3, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0xea>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b12      	cmp	r3, #18
 8002404:	d123      	bne.n	800244e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a0 	beq.w	80025d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002490:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_GPIO_Init+0x2d8>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002494:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_GPIO_Init+0x2d8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6613      	str	r3, [r2, #96]	; 0x60
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_GPIO_Init+0x2d8>)
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a8:	4a53      	ldr	r2, [pc, #332]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d2:	d019      	beq.n	8002508 <HAL_GPIO_Init+0x1ec>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a49      	ldr	r2, [pc, #292]	; (80025fc <HAL_GPIO_Init+0x2e0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_GPIO_Init+0x1e8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a48      	ldr	r2, [pc, #288]	; (8002600 <HAL_GPIO_Init+0x2e4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1e4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a47      	ldr	r2, [pc, #284]	; (8002604 <HAL_GPIO_Init+0x2e8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1e0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_GPIO_Init+0x2ec>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1dc>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e008      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 80024f8:	2307      	movs	r3, #7
 80024fa:	e006      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 80024fc:	2303      	movs	r3, #3
 80024fe:	e004      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002500:	2302      	movs	r3, #2
 8002502:	e002      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_GPIO_Init+0x1ee>
 8002508:	2300      	movs	r3, #0
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	f002 0203 	and.w	r2, r2, #3
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	4093      	lsls	r3, r2
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800251a:	4937      	ldr	r1, [pc, #220]	; (80025f8 <HAL_GPIO_Init+0x2dc>)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <HAL_GPIO_Init+0x2f0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800254c:	4a2f      	ldr	r2, [pc, #188]	; (800260c <HAL_GPIO_Init+0x2f0>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002552:	4b2e      	ldr	r3, [pc, #184]	; (800260c <HAL_GPIO_Init+0x2f0>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <HAL_GPIO_Init+0x2f0>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_GPIO_Init+0x2f0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025a0:	4a1a      	ldr	r2, [pc, #104]	; (800260c <HAL_GPIO_Init+0x2f0>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_GPIO_Init+0x2f0>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <HAL_GPIO_Init+0x2f0>)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f47f aea3 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000
 80025fc:	48000400 	.word	0x48000400
 8002600:	48000800 	.word	0x48000800
 8002604:	48000c00 	.word	0x48000c00
 8002608:	48001000 	.word	0x48001000
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	e001      	b.n	8002632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800265c:	e002      	b.n	8002664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	041a      	lsls	r2, r3, #16
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43d9      	mvns	r1, r3
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	400b      	ands	r3, r1
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e081      	b.n	80027ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fd50 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002704:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	e006      	b.n	800272c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800272a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d104      	bne.n	800273e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800273c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800274c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002750:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002760:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	ea42 0103 	orr.w	r1, r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	021a      	lsls	r2, r3, #8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1a      	ldr	r2, [r3, #32]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b088      	sub	sp, #32
 80027c6:	af02      	add	r7, sp, #8
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b20      	cmp	r3, #32
 80027dc:	f040 80f5 	bne.w	80029ca <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_I2C_Slave_Transmit+0x2a>
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0e9      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Slave_Transmit+0x44>
 8002802:	2302      	movs	r3, #2
 8002804:	e0e2      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800280e:	f7ff fbf5 	bl	8001ffc <HAL_GetTick>
 8002812:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2221      	movs	r2, #33	; 0x21
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800284a:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	2108      	movs	r1, #8
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f001 f901 	bl	8003a5e <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002870:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0aa      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2208      	movs	r2, #8
 800287c:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d118      	bne.n	80028b8 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2200      	movs	r2, #0
 800288e:	2108      	movs	r1, #8
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f001 f8e4 	bl	8003a5e <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028aa:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e08d      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2208      	movs	r2, #8
 80028b6:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f001 f8ca 	bl	8003a5e <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02d      	beq.n	800292c <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028de:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e073      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6839      	ldr	r1, [r7, #0]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f001 f8f8 	bl	8003ade <I2C_WaitOnTXISFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002902:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e061      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1d6      	bne.n	80028e4 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6839      	ldr	r1, [r7, #0]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 f90f 	bl	8003b5e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d011      	beq.n	800296a <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002954:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	2b04      	cmp	r3, #4
 800295c:	d103      	bne.n	8002966 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
 8002964:	e001      	b.n	800296a <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e030      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2220      	movs	r2, #32
 8002970:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f001 f86d 	bl	8003a5e <I2C_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002998:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e016      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
  }
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d139      	bne.n	8002a62 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_I2C_Slave_Receive_IT+0x28>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e033      	b.n	8002a64 <HAL_I2C_Slave_Receive_IT+0x90>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2222      	movs	r2, #34	; 0x22
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a28:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <HAL_I2C_Slave_Receive_IT+0x98>)
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8002a4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002a54:	f248 0102 	movw	r1, #32770	; 0x8002
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f001 f951 	bl	8003d00 <I2C_Enable_IRQ>

    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	ffff0000 	.word	0xffff0000
 8002a70:	08002bad 	.word	0x08002bad

08002a74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	68f9      	ldr	r1, [r7, #12]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
 8002b04:	4613      	mov	r3, r2
 8002b06:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b86:	b2db      	uxtb	r3, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <I2C_Slave_ISR_IT+0x24>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0ec      	b.n	8002daa <I2C_Slave_ISR_IT+0x1fe>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <I2C_Slave_ISR_IT+0x4c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002bf0:	6939      	ldr	r1, [r7, #16]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fc9a 	bl	800352c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d04d      	beq.n	8002ca0 <I2C_Slave_ISR_IT+0xf4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d047      	beq.n	8002ca0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d128      	bne.n	8002c6c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b28      	cmp	r3, #40	; 0x28
 8002c24:	d108      	bne.n	8002c38 <I2C_Slave_ISR_IT+0x8c>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c2c:	d104      	bne.n	8002c38 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fd85 	bl	8003740 <I2C_ITListenCplt>
 8002c36:	e032      	b.n	8002c9e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b29      	cmp	r3, #41	; 0x29
 8002c42:	d10e      	bne.n	8002c62 <I2C_Slave_ISR_IT+0xb6>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c4a:	d00a      	beq.n	8002c62 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2210      	movs	r2, #16
 8002c52:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fec0 	bl	80039da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fb3d 	bl	80032da <I2C_ITSlaveSeqCplt>
 8002c60:	e01d      	b.n	8002c9e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2210      	movs	r2, #16
 8002c68:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002c6a:	e096      	b.n	8002d9a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2210      	movs	r2, #16
 8002c72:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <I2C_Slave_ISR_IT+0xe4>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c8c:	f040 8085 	bne.w	8002d9a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	4619      	mov	r1, r3
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fda8 	bl	80037ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002c9c:	e07d      	b.n	8002d9a <I2C_Slave_ISR_IT+0x1ee>
 8002c9e:	e07c      	b.n	8002d9a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d030      	beq.n	8002d0e <I2C_Slave_ISR_IT+0x162>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d02a      	beq.n	8002d0e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d14f      	bne.n	8002d9e <I2C_Slave_ISR_IT+0x1f2>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d04:	d04b      	beq.n	8002d9e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fae7 	bl	80032da <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d0c:	e047      	b.n	8002d9e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d26:	6939      	ldr	r1, [r7, #16]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fa15 	bl	8003158 <I2C_ITAddrCplt>
 8002d2e:	e037      	b.n	8002da0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d031      	beq.n	8002da0 <I2C_Slave_ISR_IT+0x1f4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d02b      	beq.n	8002da0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d018      	beq.n	8002d84 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d82:	e00d      	b.n	8002da0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8a:	d002      	beq.n	8002d92 <I2C_Slave_ISR_IT+0x1e6>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 faa1 	bl	80032da <I2C_ITSlaveSeqCplt>
 8002d98:	e002      	b.n	8002da0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002d9e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b088      	sub	sp, #32
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <I2C_Master_ISR_DMA+0x1a>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e0e1      	b.n	8002f90 <I2C_Master_ISR_DMA+0x1de>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d017      	beq.n	8002e10 <I2C_Master_ISR_DMA+0x5e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d011      	beq.n	8002e10 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2210      	movs	r2, #16
 8002df2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002e00:	2120      	movs	r1, #32
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 ff7c 	bl	8003d00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fde6 	bl	80039da <I2C_Flush_TXDR>
 8002e0e:	e0ba      	b.n	8002f86 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	09db      	lsrs	r3, r3, #7
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d072      	beq.n	8002f02 <I2C_Master_ISR_DMA+0x150>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d06c      	beq.n	8002f02 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e36:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d04e      	beq.n	8002ee0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d906      	bls.n	8002e68 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e010      	b.n	8002e8a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e7a:	d003      	beq.n	8002e84 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e002      	b.n	8002e8a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e88:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	8a79      	ldrh	r1, [r7, #18]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 ff03 	bl	8003ca4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b22      	cmp	r3, #34	; 0x22
 8002eba:	d108      	bne.n	8002ece <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ecc:	e05b      	b.n	8002f86 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002edc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ede:	e052      	b.n	8002f86 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eee:	d003      	beq.n	8002ef8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f9b5 	bl	8003260 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002ef6:	e046      	b.n	8002f86 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fc76 	bl	80037ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002f00:	e041      	b.n	8002f86 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d029      	beq.n	8002f62 <I2C_Master_ISR_DMA+0x1b0>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d023      	beq.n	8002f62 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d119      	bne.n	8002f58 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f32:	d027      	beq.n	8002f84 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f3c:	d108      	bne.n	8002f50 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002f4e:	e019      	b.n	8002f84 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f985 	bl	8003260 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002f56:	e015      	b.n	8002f84 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f58:	2140      	movs	r1, #64	; 0x40
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fc46 	bl	80037ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f60:	e010      	b.n	8002f84 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <I2C_Master_ISR_DMA+0x1d4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fa0b 	bl	8003398 <I2C_ITMasterCplt>
 8002f82:	e000      	b.n	8002f86 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002f84:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <I2C_Slave_ISR_DMA+0x24>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0c9      	b.n	8003150 <I2C_Slave_ISR_DMA+0x1b8>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <I2C_Slave_ISR_DMA+0x4c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 faa4 	bl	800352c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 809a 	beq.w	8003126 <I2C_Slave_ISR_DMA+0x18e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8093 	beq.w	8003126 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0b9b      	lsrs	r3, r3, #14
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	0bdb      	lsrs	r3, r3, #15
 8003010:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003014:	2b00      	cmp	r3, #0
 8003016:	d07f      	beq.n	8003118 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0bdb      	lsrs	r3, r3, #15
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003038:	2301      	movs	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00d      	beq.n	8003060 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	0b9b      	lsrs	r3, r3, #14
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800305c:	2301      	movs	r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d128      	bne.n	80030b8 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b28      	cmp	r3, #40	; 0x28
 8003070:	d108      	bne.n	8003084 <I2C_Slave_ISR_DMA+0xec>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003078:	d104      	bne.n	8003084 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fb5f 	bl	8003740 <I2C_ITListenCplt>
 8003082:	e048      	b.n	8003116 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b29      	cmp	r3, #41	; 0x29
 800308e:	d10e      	bne.n	80030ae <I2C_Slave_ISR_DMA+0x116>
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003096:	d00a      	beq.n	80030ae <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2210      	movs	r2, #16
 800309e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fc9a 	bl	80039da <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f917 	bl	80032da <I2C_ITSlaveSeqCplt>
 80030ac:	e033      	b.n	8003116 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2210      	movs	r2, #16
 80030b4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80030b6:	e034      	b.n	8003122 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2210      	movs	r2, #16
 80030be:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0204 	orr.w	r2, r3, #4
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <I2C_Slave_ISR_DMA+0x14a>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e0:	d11f      	bne.n	8003122 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b21      	cmp	r3, #33	; 0x21
 80030e6:	d002      	beq.n	80030ee <I2C_Slave_ISR_DMA+0x156>
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	2b29      	cmp	r3, #41	; 0x29
 80030ec:	d103      	bne.n	80030f6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2221      	movs	r2, #33	; 0x21
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
 80030f4:	e008      	b.n	8003108 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	2b22      	cmp	r3, #34	; 0x22
 80030fa:	d002      	beq.n	8003102 <I2C_Slave_ISR_DMA+0x16a>
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003100:	d102      	bne.n	8003108 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2222      	movs	r2, #34	; 0x22
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	4619      	mov	r1, r3
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fb6c 	bl	80037ec <I2C_ITError>
      if (treatdmanack == 1U)
 8003114:	e005      	b.n	8003122 <I2C_Slave_ISR_DMA+0x18a>
 8003116:	e004      	b.n	8003122 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2210      	movs	r2, #16
 800311e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003120:	e011      	b.n	8003146 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003122:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003124:	e00f      	b.n	8003146 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	08db      	lsrs	r3, r3, #3
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <I2C_Slave_ISR_DMA+0x1ae>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f809 	bl	8003158 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800316e:	2b28      	cmp	r3, #40	; 0x28
 8003170:	d16a      	bne.n	8003248 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	b29b      	uxth	r3, r3
 800318c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003190:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031ac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d138      	bne.n	8003228 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	09db      	lsrs	r3, r3, #7
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	89bb      	ldrh	r3, [r7, #12]
 80031be:	4053      	eors	r3, r2
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f003 0306 	and.w	r3, r3, #6
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d11c      	bne.n	8003204 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d13b      	bne.n	8003258 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2208      	movs	r2, #8
 80031ec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031f6:	89ba      	ldrh	r2, [r7, #12]
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff fc7b 	bl	8002af8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003202:	e029      	b.n	8003258 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fddb 	bl	8003dc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800321a:	89ba      	ldrh	r2, [r7, #12]
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff fc69 	bl	8002af8 <HAL_I2C_AddrCallback>
}
 8003226:	e017      	b.n	8003258 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fdcb 	bl	8003dc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800323a:	89ba      	ldrh	r2, [r7, #12]
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fc59 	bl	8002af8 <HAL_I2C_AddrCallback>
}
 8003246:	e007      	b.n	8003258 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2208      	movs	r2, #8
 800324e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b21      	cmp	r3, #33	; 0x21
 800327a:	d115      	bne.n	80032a8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2211      	movs	r2, #17
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003290:	2101      	movs	r1, #1
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fd98 	bl	8003dc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fc01 	bl	8002aa8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032a6:	e014      	b.n	80032d2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2212      	movs	r2, #18
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032bc:	2102      	movs	r1, #2
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fd82 	bl	8003dc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fbf5 	bl	8002abc <HAL_I2C_MasterRxCpltCallback>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0b9b      	lsrs	r3, r3, #14
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e00d      	b.n	800332c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	0bdb      	lsrs	r3, r3, #15
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b29      	cmp	r3, #41	; 0x29
 8003336:	d112      	bne.n	800335e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2228      	movs	r2, #40	; 0x28
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2221      	movs	r2, #33	; 0x21
 8003344:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003346:	2101      	movs	r1, #1
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fd3d 	bl	8003dc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff fbba 	bl	8002ad0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800335c:	e017      	b.n	800338e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b2a      	cmp	r3, #42	; 0x2a
 8003368:	d111      	bne.n	800338e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2228      	movs	r2, #40	; 0x28
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2222      	movs	r2, #34	; 0x22
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003378:	2102      	movs	r1, #2
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fd24 	bl	8003dc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff fbab 	bl	8002ae4 <HAL_I2C_SlaveRxCpltCallback>
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2220      	movs	r2, #32
 80033ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b21      	cmp	r3, #33	; 0x21
 80033b8:	d107      	bne.n	80033ca <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033ba:	2101      	movs	r1, #1
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fd03 	bl	8003dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2211      	movs	r2, #17
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
 80033c8:	e00c      	b.n	80033e4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b22      	cmp	r3, #34	; 0x22
 80033d4:	d106      	bne.n	80033e4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033d6:	2102      	movs	r1, #2
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fcf5 	bl	8003dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2212      	movs	r2, #18
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <I2C_ITMasterCplt+0x18c>)
 80033f0:	400b      	ands	r3, r1
 80033f2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a4a      	ldr	r2, [pc, #296]	; (8003528 <I2C_ITMasterCplt+0x190>)
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d009      	beq.n	8003420 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2210      	movs	r2, #16
 8003412:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b60      	cmp	r3, #96	; 0x60
 800342a:	d10b      	bne.n	8003444 <I2C_ITMasterCplt+0xac>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	b2db      	uxtb	r3, r3
 8003440:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003442:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fac8 	bl	80039da <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b60      	cmp	r3, #96	; 0x60
 800345a:	d002      	beq.n	8003462 <I2C_ITMasterCplt+0xca>
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f9bf 	bl	80037ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800346e:	e054      	b.n	800351a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b21      	cmp	r3, #33	; 0x21
 800347a:	d124      	bne.n	80034c6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d10b      	bne.n	80034ae <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fb3e 	bl	8002b28 <HAL_I2C_MemTxCpltCallback>
}
 80034ac:	e035      	b.n	800351a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff faf2 	bl	8002aa8 <HAL_I2C_MasterTxCpltCallback>
}
 80034c4:	e029      	b.n	800351a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b22      	cmp	r3, #34	; 0x22
 80034d0:	d123      	bne.n	800351a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d10b      	bne.n	8003504 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fb1d 	bl	8002b3c <HAL_I2C_MemRxCpltCallback>
}
 8003502:	e00a      	b.n	800351a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff fad1 	bl	8002abc <HAL_I2C_MasterRxCpltCallback>
}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	fe00e800 	.word	0xfe00e800
 8003528:	ffff0000 	.word	0xffff0000

0800352c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003548:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2220      	movs	r2, #32
 8003550:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b21      	cmp	r3, #33	; 0x21
 8003556:	d002      	beq.n	800355e <I2C_ITSlaveCplt+0x32>
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b29      	cmp	r3, #41	; 0x29
 800355c:	d108      	bne.n	8003570 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800355e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fc30 	bl	8003dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2221      	movs	r2, #33	; 0x21
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
 800356e:	e00d      	b.n	800358c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b22      	cmp	r3, #34	; 0x22
 8003574:	d002      	beq.n	800357c <I2C_ITSlaveCplt+0x50>
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b2a      	cmp	r3, #42	; 0x2a
 800357a:	d107      	bne.n	800358c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800357c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fc21 	bl	8003dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2222      	movs	r2, #34	; 0x22
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b64      	ldr	r3, [pc, #400]	; (8003738 <I2C_ITSlaveCplt+0x20c>)
 80035a8:	400b      	ands	r3, r1
 80035aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fa14 	bl	80039da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	0b9b      	lsrs	r3, r3, #14
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d013      	beq.n	80035e6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d020      	beq.n	8003618 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035e4:	e018      	b.n	8003618 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	0bdb      	lsrs	r3, r3, #15
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003600:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	2b00      	cmp	r3, #0
 8003690:	d010      	beq.n	80036b4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8a7 	bl	80037ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b28      	cmp	r3, #40	; 0x28
 80036a8:	d141      	bne.n	800372e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80036aa:	6979      	ldr	r1, [r7, #20]
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f847 	bl	8003740 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036b2:	e03c      	b.n	800372e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036bc:	d014      	beq.n	80036e8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fe0b 	bl	80032da <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <I2C_ITSlaveCplt+0x210>)
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff fa17 	bl	8002b14 <HAL_I2C_ListenCpltCallback>
}
 80036e6:	e022      	b.n	800372e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b22      	cmp	r3, #34	; 0x22
 80036f2:	d10e      	bne.n	8003712 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff f9ea 	bl	8002ae4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003710:	e00d      	b.n	800372e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff f9d1 	bl	8002ad0 <HAL_I2C_SlaveTxCpltCallback>
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	fe00e800 	.word	0xfe00e800
 800373c:	ffff0000 	.word	0xffff0000

08003740 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <I2C_ITListenCplt+0xa8>)
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d022      	beq.n	80037be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037be:	f248 0103 	movw	r1, #32771	; 0x8003
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fb00 	bl	8003dc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2210      	movs	r2, #16
 80037ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff f99b 	bl	8002b14 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	ffff0000 	.word	0xffff0000

080037ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a5d      	ldr	r2, [pc, #372]	; (8003980 <I2C_ITError+0x194>)
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b28      	cmp	r3, #40	; 0x28
 8003822:	d005      	beq.n	8003830 <I2C_ITError+0x44>
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b29      	cmp	r3, #41	; 0x29
 8003828:	d002      	beq.n	8003830 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b2a      	cmp	r3, #42	; 0x2a
 800382e:	d10b      	bne.n	8003848 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003830:	2103      	movs	r1, #3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fac8 	bl	8003dc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2228      	movs	r2, #40	; 0x28
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a50      	ldr	r2, [pc, #320]	; (8003984 <I2C_ITError+0x198>)
 8003844:	635a      	str	r2, [r3, #52]	; 0x34
 8003846:	e011      	b.n	800386c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003848:	f248 0103 	movw	r1, #32771	; 0x8003
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fabb 	bl	8003dc8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b60      	cmp	r3, #96	; 0x60
 800385c:	d003      	beq.n	8003866 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	2b00      	cmp	r3, #0
 8003878:	d039      	beq.n	80038ee <I2C_ITError+0x102>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b11      	cmp	r3, #17
 800387e:	d002      	beq.n	8003886 <I2C_ITError+0x9a>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b21      	cmp	r3, #33	; 0x21
 8003884:	d133      	bne.n	80038ee <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003894:	d107      	bne.n	80038a6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fd28 	bl	8002300 <HAL_DMA_GetState>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d017      	beq.n	80038e6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	4a33      	ldr	r2, [pc, #204]	; (8003988 <I2C_ITError+0x19c>)
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fcd7 	bl	800227e <HAL_DMA_Abort_IT>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04d      	beq.n	8003972 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038e0:	4610      	mov	r0, r2
 80038e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038e4:	e045      	b.n	8003972 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f850 	bl	800398c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038ec:	e041      	b.n	8003972 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d039      	beq.n	800396a <I2C_ITError+0x17e>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b12      	cmp	r3, #18
 80038fa:	d002      	beq.n	8003902 <I2C_ITError+0x116>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b22      	cmp	r3, #34	; 0x22
 8003900:	d133      	bne.n	800396a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	d107      	bne.n	8003922 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003920:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fcea 	bl	8002300 <HAL_DMA_GetState>
 800392c:	4603      	mov	r3, r0
 800392e:	2b01      	cmp	r3, #1
 8003930:	d017      	beq.n	8003962 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	4a14      	ldr	r2, [pc, #80]	; (8003988 <I2C_ITError+0x19c>)
 8003938:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fc99 	bl	800227e <HAL_DMA_Abort_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800395c:	4610      	mov	r0, r2
 800395e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003960:	e009      	b.n	8003976 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f812 	bl	800398c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003968:	e005      	b.n	8003976 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f80e 	bl	800398c <I2C_TreatErrorCallback>
  }
}
 8003970:	e002      	b.n	8003978 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003976:	bf00      	nop
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	ffff0000 	.word	0xffff0000
 8003984:	08002bad 	.word	0x08002bad
 8003988:	08003a23 	.word	0x08003a23

0800398c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b60      	cmp	r3, #96	; 0x60
 800399e:	d10e      	bne.n	80039be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff f8d4 	bl	8002b64 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039bc:	e009      	b.n	80039d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff f8bf 	bl	8002b50 <HAL_I2C_ErrorCallback>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d103      	bne.n	80039f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2200      	movs	r2, #0
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d007      	beq.n	8003a16 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	619a      	str	r2, [r3, #24]
  }
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff ff9b 	bl	800398c <I2C_TreatErrorCallback>
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a6e:	e022      	b.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d01e      	beq.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a78:	f7fe fac0 	bl	8001ffc <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d302      	bcc.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d113      	bne.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00f      	b.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	bf0c      	ite	eq
 8003ac6:	2301      	moveq	r3, #1
 8003ac8:	2300      	movne	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d0cd      	beq.n	8003a70 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aea:	e02c      	b.n	8003b46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f871 	bl	8003bd8 <I2C_IsAcknowledgeFailed>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e02a      	b.n	8003b56 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d01e      	beq.n	8003b46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fe fa78 	bl	8001ffc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d113      	bne.n	8003b46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d1cb      	bne.n	8003aec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b6a:	e028      	b.n	8003bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f831 	bl	8003bd8 <I2C_IsAcknowledgeFailed>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e026      	b.n	8003bce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b80:	f7fe fa3c 	bl	8001ffc <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d302      	bcc.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d113      	bne.n	8003bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e007      	b.n	8003bce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d1cf      	bne.n	8003b6c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d151      	bne.n	8003c96 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf2:	e022      	b.n	8003c3a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d01e      	beq.n	8003c3a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfc:	f7fe f9fe 	bl	8001ffc <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d302      	bcc.n	8003c12 <I2C_IsAcknowledgeFailed+0x3a>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d113      	bne.n	8003c3a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e02e      	b.n	8003c98 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d1d5      	bne.n	8003bf4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2220      	movs	r2, #32
 8003c56:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff febe 	bl	80039da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <I2C_IsAcknowledgeFailed+0xc8>)
 8003c6a:	400b      	ands	r3, r1
 8003c6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	fe00e800 	.word	0xfe00e800

08003ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	817b      	strh	r3, [r7, #10]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	0d5b      	lsrs	r3, r3, #21
 8003cc0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <I2C_TransferConfig+0x58>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	ea02 0103 	and.w	r1, r2, r3
 8003cce:	897b      	ldrh	r3, [r7, #10]
 8003cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cd4:	7a7b      	ldrb	r3, [r7, #9]
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	03ff63ff 	.word	0x03ff63ff

08003d00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <I2C_Enable_IRQ+0xc0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003d1e:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <I2C_Enable_IRQ+0xc4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d11d      	bne.n	8003d60 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	da03      	bge.n	8003d34 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	2b10      	cmp	r3, #16
 8003d38:	d103      	bne.n	8003d42 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d40:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d103      	bne.n	8003d50 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d50:	887b      	ldrh	r3, [r7, #2]
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d125      	bne.n	8003da2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d5e:	e020      	b.n	8003da2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da03      	bge.n	8003d70 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003d80:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003d92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d103      	bne.n	8003da2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f043 0320 	orr.w	r3, r3, #32
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	08002db3 	.word	0x08002db3
 8003dc4:	08002f99 	.word	0x08002f99

08003dc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00f      	beq.n	8003e02 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003de8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003df6:	2b28      	cmp	r3, #40	; 0x28
 8003df8:	d003      	beq.n	8003e02 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00f      	beq.n	8003e2c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003e12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e20:	2b28      	cmp	r3, #40	; 0x28
 8003e22:	d003      	beq.n	8003e2c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	da03      	bge.n	8003e3c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d103      	bne.n	8003e4a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e4a:	887b      	ldrh	r3, [r7, #2]
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d103      	bne.n	8003e58 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f043 0320 	orr.w	r3, r3, #32
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d103      	bne.n	8003e66 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d138      	bne.n	8003f0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e032      	b.n	8003f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	; 0x24
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e000      	b.n	8003f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d139      	bne.n	8003fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e033      	b.n	8003fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2224      	movs	r2, #36	; 0x24
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d130      	bne.n	8004028 <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_I2CEx_EnableWakeUp+0x22>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e02a      	b.n	800402a <HAL_I2CEx_EnableWakeUp+0x78>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	; 0x24
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_I2CEx_DisableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	d130      	bne.n	80040ac <HAL_I2CEx_DisableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_I2CEx_DisableWakeUp+0x22>
 8004054:	2302      	movs	r3, #2
 8004056:	e02a      	b.n	80040ae <HAL_I2CEx_DisableWakeUp+0x78>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <HAL_I2CEx_DisableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040cc:	d104      	bne.n	80040d8 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f897 	bl	8004204 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80040d6:	e003      	b.n	80040e0 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f868 	bl	80041b0 <HAL_PWREx_EnterSTOP0Mode>
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <HAL_PWREx_GetVoltageRange+0x18>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40007000 	.word	0x40007000

08004104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004112:	d130      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004114:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800411c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004120:	d038      	beq.n	8004194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800412c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004130:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2232      	movs	r2, #50	; 0x32
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0c9b      	lsrs	r3, r3, #18
 8004144:	3301      	adds	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004148:	e002      	b.n	8004150 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b01      	subs	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415c:	d102      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x60>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f2      	bne.n	800414a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004170:	d110      	bne.n	8004194 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e00f      	b.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004182:	d007      	beq.n	8004194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800418c:	4a05      	ldr	r2, [pc, #20]	; (80041a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800418e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004192:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000
 80041a8:	20000000 	.word	0x20000000
 80041ac:	431bde83 	.word	0x431bde83

080041b0 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a0f      	ldr	r2, [pc, #60]	; (80041fc <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80041c0:	f023 0307 	bic.w	r3, r3, #7
 80041c4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80041cc:	f043 0304 	orr.w	r3, r3, #4
 80041d0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80041d8:	bf30      	wfi
 80041da:	e002      	b.n	80041e2 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80041dc:	bf40      	sev
    __WFE();
 80041de:	bf20      	wfe
    __WFE();
 80041e0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4a06      	ldr	r2, [pc, #24]	; (8004200 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	6113      	str	r3, [r2, #16]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40007000 	.word	0x40007000
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800421e:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004230:	bf30      	wfi
 8004232:	e002      	b.n	800423a <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004234:	bf40      	sev
    __WFE();
 8004236:	bf20      	wfe
    __WFE();
 8004238:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	4a06      	ldr	r2, [pc, #24]	; (8004258 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6113      	str	r3, [r2, #16]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40007000 	.word	0x40007000
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f000 bc11 	b.w	8004a92 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004270:	4ba0      	ldr	r3, [pc, #640]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800427a:	4b9e      	ldr	r3, [pc, #632]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80e4 	beq.w	800445a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_RCC_OscConfig+0x4c>
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b0c      	cmp	r3, #12
 800429c:	f040 808b 	bne.w	80043b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	f040 8087 	bne.w	80043b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a8:	4b92      	ldr	r3, [pc, #584]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_OscConfig+0x64>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e3e8      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	4b8b      	ldr	r3, [pc, #556]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <HAL_RCC_OscConfig+0x7e>
 80042d0:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d8:	e005      	b.n	80042e6 <HAL_RCC_OscConfig+0x8a>
 80042da:	4b86      	ldr	r3, [pc, #536]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80042dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d223      	bcs.n	8004332 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fdae 	bl	8004e50 <RCC_SetFlashLatencyFromMSIRange>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e3c9      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042fe:	4b7d      	ldr	r3, [pc, #500]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7c      	ldr	r2, [pc, #496]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004304:	f043 0308 	orr.w	r3, r3, #8
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b7a      	ldr	r3, [pc, #488]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4977      	ldr	r1, [pc, #476]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800431c:	4b75      	ldr	r3, [pc, #468]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	4972      	ldr	r1, [pc, #456]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]
 8004330:	e025      	b.n	800437e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004332:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6f      	ldr	r2, [pc, #444]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004338:	f043 0308 	orr.w	r3, r3, #8
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b6d      	ldr	r3, [pc, #436]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	496a      	ldr	r1, [pc, #424]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004350:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	4965      	ldr	r1, [pc, #404]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fd6e 	bl	8004e50 <RCC_SetFlashLatencyFromMSIRange>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e389      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800437e:	f000 fca3 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	495a      	ldr	r1, [pc, #360]	; (80044f8 <HAL_RCC_OscConfig+0x29c>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	fa22 f303 	lsr.w	r3, r2, r3
 800439a:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_RCC_OscConfig+0x2a0>)
 800439c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800439e:	4b58      	ldr	r3, [pc, #352]	; (8004500 <HAL_RCC_OscConfig+0x2a4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fdda 	bl	8001f5c <HAL_InitTick>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d052      	beq.n	8004458 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	e36d      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d032      	beq.n	8004424 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043be:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a4c      	ldr	r2, [pc, #304]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043ca:	f7fd fe17 	bl	8001ffc <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043d2:	f7fd fe13 	bl	8001ffc <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e356      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043e4:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043f0:	4b40      	ldr	r3, [pc, #256]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a3f      	ldr	r2, [pc, #252]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80043f6:	f043 0308 	orr.w	r3, r3, #8
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	493a      	ldr	r1, [pc, #232]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800440e:	4b39      	ldr	r3, [pc, #228]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	4935      	ldr	r1, [pc, #212]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
 8004422:	e01a      	b.n	800445a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004424:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a32      	ldr	r2, [pc, #200]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004430:	f7fd fde4 	bl	8001ffc <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004438:	f7fd fde0 	bl	8001ffc <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e323      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800444a:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x1dc>
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004458:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d073      	beq.n	800454e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d005      	beq.n	8004478 <HAL_RCC_OscConfig+0x21c>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b0c      	cmp	r3, #12
 8004470:	d10e      	bne.n	8004490 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d10b      	bne.n	8004490 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d063      	beq.n	800454c <HAL_RCC_OscConfig+0x2f0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d15f      	bne.n	800454c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e300      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d106      	bne.n	80044a8 <HAL_RCC_OscConfig+0x24c>
 800449a:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0x288>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x270>
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0x288>
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <HAL_RCC_OscConfig+0x298>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fd86 	bl	8001ffc <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f2:	e010      	b.n	8004516 <HAL_RCC_OscConfig+0x2ba>
 80044f4:	40021000 	.word	0x40021000
 80044f8:	0800b50c 	.word	0x0800b50c
 80044fc:	20000000 	.word	0x20000000
 8004500:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004504:	f7fd fd7a 	bl	8001ffc <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e2bd      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004516:	4baf      	ldr	r3, [pc, #700]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x2a8>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd fd6a 	bl	8001ffc <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fd fd66 	bl	8001ffc <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e2a9      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800453e:	4ba5      	ldr	r3, [pc, #660]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x2d0>
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d060      	beq.n	800461c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d005      	beq.n	800456c <HAL_RCC_OscConfig+0x310>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b0c      	cmp	r3, #12
 8004564:	d119      	bne.n	800459a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d116      	bne.n	800459a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800456c:	4b99      	ldr	r3, [pc, #612]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_OscConfig+0x328>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e286      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004584:	4b93      	ldr	r3, [pc, #588]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	061b      	lsls	r3, r3, #24
 8004592:	4990      	ldr	r1, [pc, #576]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004594:	4313      	orrs	r3, r2
 8004596:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004598:	e040      	b.n	800461c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d023      	beq.n	80045ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a2:	4b8c      	ldr	r3, [pc, #560]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a8b      	ldr	r2, [pc, #556]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fd fd25 	bl	8001ffc <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b6:	f7fd fd21 	bl	8001ffc <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e264      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c8:	4b82      	ldr	r3, [pc, #520]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d4:	4b7f      	ldr	r3, [pc, #508]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	497c      	ldr	r1, [pc, #496]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
 80045e8:	e018      	b.n	800461c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ea:	4b7a      	ldr	r3, [pc, #488]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a79      	ldr	r2, [pc, #484]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80045f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7fd fd01 	bl	8001ffc <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fe:	f7fd fcfd 	bl	8001ffc <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e240      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004610:	4b70      	ldr	r3, [pc, #448]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d03c      	beq.n	80046a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01c      	beq.n	800466a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004630:	4b68      	ldr	r3, [pc, #416]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004636:	4a67      	ldr	r2, [pc, #412]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fd fcdc 	bl	8001ffc <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004648:	f7fd fcd8 	bl	8001ffc <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e21b      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800465a:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 800465c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ef      	beq.n	8004648 <HAL_RCC_OscConfig+0x3ec>
 8004668:	e01b      	b.n	80046a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466a:	4b5a      	ldr	r3, [pc, #360]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 800466c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004670:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467a:	f7fd fcbf 	bl	8001ffc <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004682:	f7fd fcbb 	bl	8001ffc <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1fe      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004694:	4b4f      	ldr	r3, [pc, #316]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ef      	bne.n	8004682 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80a6 	beq.w	80047fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b0:	2300      	movs	r3, #0
 80046b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046b4:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c0:	4b44      	ldr	r3, [pc, #272]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	4a43      	ldr	r2, [pc, #268]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80046c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ca:	6593      	str	r3, [r2, #88]	; 0x58
 80046cc:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046dc:	4b3e      	ldr	r3, [pc, #248]	; (80047d8 <HAL_RCC_OscConfig+0x57c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d118      	bne.n	800471a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e8:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <HAL_RCC_OscConfig+0x57c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3a      	ldr	r2, [pc, #232]	; (80047d8 <HAL_RCC_OscConfig+0x57c>)
 80046ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f4:	f7fd fc82 	bl	8001ffc <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fc:	f7fd fc7e 	bl	8001ffc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1c1      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800470e:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <HAL_RCC_OscConfig+0x57c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d108      	bne.n	8004734 <HAL_RCC_OscConfig+0x4d8>
 8004722:	4b2c      	ldr	r3, [pc, #176]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004728:	4a2a      	ldr	r2, [pc, #168]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004732:	e024      	b.n	800477e <HAL_RCC_OscConfig+0x522>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b05      	cmp	r3, #5
 800473a:	d110      	bne.n	800475e <HAL_RCC_OscConfig+0x502>
 800473c:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800474c:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800475c:	e00f      	b.n	800477e <HAL_RCC_OscConfig+0x522>
 800475e:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800476e:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 8004776:	f023 0304 	bic.w	r3, r3, #4
 800477a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fd fc39 	bl	8001ffc <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7fd fc35 	bl	8001ffc <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e176      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_OscConfig+0x578>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ed      	beq.n	800478e <HAL_RCC_OscConfig+0x532>
 80047b2:	e01a      	b.n	80047ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fd fc22 	bl	8001ffc <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047ba:	e00f      	b.n	80047dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fd fc1e 	bl	8001ffc <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d906      	bls.n	80047dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e15f      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047dc:	4baa      	ldr	r3, [pc, #680]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e8      	bne.n	80047bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ea:	7ffb      	ldrb	r3, [r7, #31]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d105      	bne.n	80047fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f0:	4ba5      	ldr	r3, [pc, #660]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	4aa4      	ldr	r2, [pc, #656]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80047f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d03c      	beq.n	8004882 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01c      	beq.n	800484a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004810:	4b9d      	ldr	r3, [pc, #628]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004816:	4a9c      	ldr	r2, [pc, #624]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fd fbec 	bl	8001ffc <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004828:	f7fd fbe8 	bl	8001ffc <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e12b      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800483a:	4b93      	ldr	r3, [pc, #588]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 800483c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ef      	beq.n	8004828 <HAL_RCC_OscConfig+0x5cc>
 8004848:	e01b      	b.n	8004882 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800484a:	4b8f      	ldr	r3, [pc, #572]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 800484c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004850:	4a8d      	ldr	r2, [pc, #564]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485a:	f7fd fbcf 	bl	8001ffc <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004862:	f7fd fbcb 	bl	8001ffc <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e10e      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004874:	4b84      	ldr	r3, [pc, #528]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004876:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1ef      	bne.n	8004862 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8102 	beq.w	8004a90 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	2b02      	cmp	r3, #2
 8004892:	f040 80c5 	bne.w	8004a20 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004896:	4b7c      	ldr	r3, [pc, #496]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f003 0203 	and.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d12c      	bne.n	8004904 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	3b01      	subs	r3, #1
 80048b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d123      	bne.n	8004904 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d11b      	bne.n	8004904 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d113      	bne.n	8004904 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	3b01      	subs	r3, #1
 80048ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d109      	bne.n	8004904 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	3b01      	subs	r3, #1
 80048fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d067      	beq.n	80049d4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d062      	beq.n	80049d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800490a:	4b5f      	ldr	r3, [pc, #380]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e0bb      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800491a:	4b5b      	ldr	r3, [pc, #364]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a5a      	ldr	r2, [pc, #360]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004924:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004926:	f7fd fb69 	bl	8001ffc <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492e:	f7fd fb65 	bl	8001ffc <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0a8      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004940:	4b51      	ldr	r3, [pc, #324]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f0      	bne.n	800492e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494c:	4b4e      	ldr	r3, [pc, #312]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	4b4e      	ldr	r3, [pc, #312]	; (8004a8c <HAL_RCC_OscConfig+0x830>)
 8004952:	4013      	ands	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800495c:	3a01      	subs	r2, #1
 800495e:	0112      	lsls	r2, r2, #4
 8004960:	4311      	orrs	r1, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004966:	0212      	lsls	r2, r2, #8
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800496e:	0852      	lsrs	r2, r2, #1
 8004970:	3a01      	subs	r2, #1
 8004972:	0552      	lsls	r2, r2, #21
 8004974:	4311      	orrs	r1, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800497a:	0852      	lsrs	r2, r2, #1
 800497c:	3a01      	subs	r2, #1
 800497e:	0652      	lsls	r2, r2, #25
 8004980:	4311      	orrs	r1, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004986:	06d2      	lsls	r2, r2, #27
 8004988:	430a      	orrs	r2, r1
 800498a:	493f      	ldr	r1, [pc, #252]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 800498c:	4313      	orrs	r3, r2
 800498e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004990:	4b3d      	ldr	r3, [pc, #244]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a3c      	ldr	r2, [pc, #240]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800499c:	4b3a      	ldr	r3, [pc, #232]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a39      	ldr	r2, [pc, #228]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80049a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049a8:	f7fd fb28 	bl	8001ffc <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fd fb24 	bl	8001ffc <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e067      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c2:	4b31      	ldr	r3, [pc, #196]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ce:	e05f      	b.n	8004a90 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e05e      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d4:	4b2c      	ldr	r3, [pc, #176]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d157      	bne.n	8004a90 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049e0:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ec:	4b26      	ldr	r3, [pc, #152]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 80049f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049f8:	f7fd fb00 	bl	8001ffc <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fd fafc 	bl	8001ffc <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e03f      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x7a4>
 8004a1e:	e037      	b.n	8004a90 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d02d      	beq.n	8004a82 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a30:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a44:	f023 0303 	bic.w	r3, r3, #3
 8004a48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5a:	f7fd facf 	bl	8001ffc <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fd facb 	bl	8001ffc <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e00e      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <HAL_RCC_OscConfig+0x82c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x806>
 8004a80:	e006      	b.n	8004a90 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e005      	b.n	8004a92 <HAL_RCC_OscConfig+0x836>
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop

08004a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0c8      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b66      	ldr	r3, [pc, #408]	; (8004c4c <HAL_RCC_ClockConfig+0x1b0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d910      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b63      	ldr	r3, [pc, #396]	; (8004c4c <HAL_RCC_ClockConfig+0x1b0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 0207 	bic.w	r2, r3, #7
 8004ac6:	4961      	ldr	r1, [pc, #388]	; (8004c4c <HAL_RCC_ClockConfig+0x1b0>)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b5f      	ldr	r3, [pc, #380]	; (8004c4c <HAL_RCC_ClockConfig+0x1b0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0b0      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d04c      	beq.n	8004b86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af4:	4b56      	ldr	r3, [pc, #344]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d121      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e09e      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0c:	4b50      	ldr	r3, [pc, #320]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e092      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b24:	4b4a      	ldr	r3, [pc, #296]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e086      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b34:	4b46      	ldr	r3, [pc, #280]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e07e      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b44:	4b42      	ldr	r3, [pc, #264]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 0203 	bic.w	r2, r3, #3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	493f      	ldr	r1, [pc, #252]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fd fa51 	bl	8001ffc <HAL_GetTick>
 8004b5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b5e:	f7fd fa4d 	bl	8001ffc <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e066      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b74:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 020c 	and.w	r2, r3, #12
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d1eb      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b92:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	492c      	ldr	r1, [pc, #176]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <HAL_RCC_ClockConfig+0x1b0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d210      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <HAL_RCC_ClockConfig+0x1b0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 0207 	bic.w	r2, r3, #7
 8004bba:	4924      	ldr	r1, [pc, #144]	; (8004c4c <HAL_RCC_ClockConfig+0x1b0>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <HAL_RCC_ClockConfig+0x1b0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e036      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be0:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4918      	ldr	r1, [pc, #96]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bfe:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4910      	ldr	r1, [pc, #64]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c12:	f000 f859 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c16:	4602      	mov	r2, r0
 8004c18:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <HAL_RCC_ClockConfig+0x1b4>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	490c      	ldr	r1, [pc, #48]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	5ccb      	ldrb	r3, [r1, r3]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd f990 	bl	8001f5c <HAL_InitTick>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c40:	7afb      	ldrb	r3, [r7, #11]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40022000 	.word	0x40022000
 8004c50:	40021000 	.word	0x40021000
 8004c54:	0800b50c 	.word	0x0800b50c
 8004c58:	20000000 	.word	0x20000000
 8004c5c:	20000004 	.word	0x20000004

08004c60 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8004c6c:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <HAL_RCC_MCOConfig+0x64>)
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <HAL_RCC_MCOConfig+0x64>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c78:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_RCC_MCOConfig+0x64>)
 8004c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8004c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ca4:	f7fd fb3a 	bl	800231c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCC_MCOConfig+0x64>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	4903      	ldr	r1, [pc, #12]	; (8004cc4 <HAL_RCC_MCOConfig+0x64>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3728      	adds	r7, #40	; 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd6:	4b3e      	ldr	r3, [pc, #248]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ce0:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x34>
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d121      	bne.n	8004d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d11e      	bne.n	8004d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cfc:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d08:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	e005      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d18:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d24:	4a2b      	ldr	r2, [pc, #172]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10d      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d102      	bne.n	8004d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d40:	4b25      	ldr	r3, [pc, #148]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e004      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d4c:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8004d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d134      	bne.n	8004dc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d56:	4b1e      	ldr	r3, [pc, #120]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d003      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d003      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0xac>
 8004d6c:	e005      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d6e:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d70:	617b      	str	r3, [r7, #20]
      break;
 8004d72:	e005      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8004d76:	617b      	str	r3, [r7, #20]
      break;
 8004d78:	e002      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	617b      	str	r3, [r7, #20]
      break;
 8004d7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d80:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	fb02 f203 	mul.w	r2, r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	0e5b      	lsrs	r3, r3, #25
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	3301      	adds	r3, #1
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3724      	adds	r7, #36	; 0x24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	0800b524 	.word	0x0800b524
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	007a1200 	.word	0x007a1200

08004de0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000000 	.word	0x20000000

08004df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dfc:	f7ff fff0 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4904      	ldr	r1, [pc, #16]	; (8004e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	0800b51c 	.word	0x0800b51c

08004e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e28:	f7ff ffda 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0adb      	lsrs	r3, r3, #11
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4904      	ldr	r1, [pc, #16]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	0800b51c 	.word	0x0800b51c

08004e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e5c:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e68:	f7ff f93e 	bl	80040e8 <HAL_PWREx_GetVoltageRange>
 8004e6c:	6178      	str	r0, [r7, #20]
 8004e6e:	e014      	b.n	8004e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7c:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e88:	f7ff f92e 	bl	80040e8 <HAL_PWREx_GetVoltageRange>
 8004e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea0:	d10b      	bne.n	8004eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d919      	bls.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2ba0      	cmp	r3, #160	; 0xa0
 8004eac:	d902      	bls.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eae:	2302      	movs	r3, #2
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	e013      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	e010      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d902      	bls.n	8004ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	e00a      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d102      	bne.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ecc:	2302      	movs	r3, #2
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	e004      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b70      	cmp	r3, #112	; 0x70
 8004ed6:	d101      	bne.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ed8:	2301      	movs	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 0207 	bic.w	r2, r3, #7
 8004ee4:	4909      	ldr	r1, [pc, #36]	; (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d001      	beq.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40022000 	.word	0x40022000

08004f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f18:	2300      	movs	r3, #0
 8004f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d031      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f34:	d01a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f3a:	d814      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f44:	d10f      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f46:	4b5d      	ldr	r3, [pc, #372]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4a5c      	ldr	r2, [pc, #368]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f52:	e00c      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fa44 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f64:	e003      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	74fb      	strb	r3, [r7, #19]
      break;
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f74:	4b51      	ldr	r3, [pc, #324]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	494e      	ldr	r1, [pc, #312]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f8a:	e001      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 809e 	beq.w	80050da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fa2:	4b46      	ldr	r3, [pc, #280]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb8:	4b40      	ldr	r3, [pc, #256]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	4a3f      	ldr	r2, [pc, #252]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a39      	ldr	r2, [pc, #228]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe0:	f7fd f80c 	bl	8001ffc <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fe6:	e009      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe8:	f7fd f808 	bl	8001ffc <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d902      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8004ffa:	e005      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ffc:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ef      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d15a      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800500e:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005018:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01e      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d019      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005046:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800504e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005056:	4a19      	ldr	r2, [pc, #100]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d016      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc ffc8 	bl	8001ffc <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506e:	e00b      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fc ffc4 	bl	8001ffc <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d902      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	74fb      	strb	r3, [r7, #19]
            break;
 8005086:	e006      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ec      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005096:	7cfb      	ldrb	r3, [r7, #19]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050aa:	4904      	ldr	r1, [pc, #16]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050b2:	e009      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	74bb      	strb	r3, [r7, #18]
 80050b8:	e006      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	7cfb      	ldrb	r3, [r7, #19]
 80050c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c8:	7c7b      	ldrb	r3, [r7, #17]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ce:	4b9e      	ldr	r3, [pc, #632]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	4a9d      	ldr	r2, [pc, #628]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e6:	4b98      	ldr	r3, [pc, #608]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	f023 0203 	bic.w	r2, r3, #3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	4994      	ldr	r1, [pc, #592]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005108:	4b8f      	ldr	r3, [pc, #572]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f023 020c 	bic.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	498c      	ldr	r1, [pc, #560]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800512a:	4b87      	ldr	r3, [pc, #540]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005130:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	4983      	ldr	r1, [pc, #524]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800514c:	4b7e      	ldr	r3, [pc, #504]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	497b      	ldr	r1, [pc, #492]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800516e:	4b76      	ldr	r3, [pc, #472]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	4972      	ldr	r1, [pc, #456]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005190:	4b6d      	ldr	r3, [pc, #436]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	496a      	ldr	r1, [pc, #424]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051b2:	4b65      	ldr	r3, [pc, #404]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c0:	4961      	ldr	r1, [pc, #388]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051d4:	4b5c      	ldr	r3, [pc, #368]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	4959      	ldr	r1, [pc, #356]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f6:	4b54      	ldr	r3, [pc, #336]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	4950      	ldr	r1, [pc, #320]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005218:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	4948      	ldr	r1, [pc, #288]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800523a:	4b43      	ldr	r3, [pc, #268]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800523c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005240:	f023 0203 	bic.w	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	493f      	ldr	r1, [pc, #252]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d028      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800525c:	4b3a      	ldr	r3, [pc, #232]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526a:	4937      	ldr	r1, [pc, #220]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527a:	d106      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527c:	4b32      	ldr	r3, [pc, #200]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a31      	ldr	r2, [pc, #196]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005286:	60d3      	str	r3, [r2, #12]
 8005288:	e011      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005292:	d10c      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	2101      	movs	r1, #1
 800529a:	4618      	mov	r0, r3
 800529c:	f000 f8a4 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d028      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052ba:	4b23      	ldr	r3, [pc, #140]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c8:	491f      	ldr	r1, [pc, #124]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d8:	d106      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052da:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e4:	60d3      	str	r3, [r2, #12]
 80052e6:	e011      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f0:	d10c      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3304      	adds	r3, #4
 80052f6:	2101      	movs	r1, #1
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f875 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d02b      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	4908      	ldr	r1, [pc, #32]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005336:	d109      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005338:	4b03      	ldr	r3, [pc, #12]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a02      	ldr	r2, [pc, #8]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800533e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005342:	60d3      	str	r3, [r2, #12]
 8005344:	e014      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005354:	d10c      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3304      	adds	r3, #4
 800535a:	2101      	movs	r1, #1
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f843 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01c      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537c:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538a:	4916      	ldr	r1, [pc, #88]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800539a:	d10c      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	2102      	movs	r1, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f820 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d0:	4904      	ldr	r1, [pc, #16]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000

080053e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053f6:	4b74      	ldr	r3, [pc, #464]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005402:	4b71      	ldr	r3, [pc, #452]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0203 	and.w	r2, r3, #3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d10d      	bne.n	800542e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
       ||
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800541a:	4b6b      	ldr	r3, [pc, #428]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
       ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d047      	beq.n	80054be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
 8005432:	e044      	b.n	80054be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d018      	beq.n	800546e <RCCEx_PLLSAI1_Config+0x86>
 800543c:	2b03      	cmp	r3, #3
 800543e:	d825      	bhi.n	800548c <RCCEx_PLLSAI1_Config+0xa4>
 8005440:	2b01      	cmp	r3, #1
 8005442:	d002      	beq.n	800544a <RCCEx_PLLSAI1_Config+0x62>
 8005444:	2b02      	cmp	r3, #2
 8005446:	d009      	beq.n	800545c <RCCEx_PLLSAI1_Config+0x74>
 8005448:	e020      	b.n	800548c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800544a:	4b5f      	ldr	r3, [pc, #380]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d11d      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800545a:	e01a      	b.n	8005492 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800545c:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d116      	bne.n	8005496 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800546c:	e013      	b.n	8005496 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800546e:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800547a:	4b53      	ldr	r3, [pc, #332]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800548a:	e006      	b.n	800549a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
      break;
 8005490:	e004      	b.n	800549c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800549a:	bf00      	nop
    }

    if(status == HAL_OK)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054a2:	4b49      	ldr	r3, [pc, #292]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6819      	ldr	r1, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	430b      	orrs	r3, r1
 80054b8:	4943      	ldr	r1, [pc, #268]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d17c      	bne.n	80055be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054c4:	4b40      	ldr	r3, [pc, #256]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3f      	ldr	r2, [pc, #252]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d0:	f7fc fd94 	bl	8001ffc <HAL_GetTick>
 80054d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054d6:	e009      	b.n	80054ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d8:	f7fc fd90 	bl	8001ffc <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d902      	bls.n	80054ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	73fb      	strb	r3, [r7, #15]
        break;
 80054ea:	e005      	b.n	80054f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ec:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ef      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d15f      	bne.n	80055be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d110      	bne.n	8005526 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005504:	4b30      	ldr	r3, [pc, #192]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800550c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6892      	ldr	r2, [r2, #8]
 8005514:	0211      	lsls	r1, r2, #8
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	68d2      	ldr	r2, [r2, #12]
 800551a:	06d2      	lsls	r2, r2, #27
 800551c:	430a      	orrs	r2, r1
 800551e:	492a      	ldr	r1, [pc, #168]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005520:	4313      	orrs	r3, r2
 8005522:	610b      	str	r3, [r1, #16]
 8005524:	e027      	b.n	8005576 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d112      	bne.n	8005552 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800552c:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005534:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6892      	ldr	r2, [r2, #8]
 800553c:	0211      	lsls	r1, r2, #8
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6912      	ldr	r2, [r2, #16]
 8005542:	0852      	lsrs	r2, r2, #1
 8005544:	3a01      	subs	r2, #1
 8005546:	0552      	lsls	r2, r2, #21
 8005548:	430a      	orrs	r2, r1
 800554a:	491f      	ldr	r1, [pc, #124]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800554c:	4313      	orrs	r3, r2
 800554e:	610b      	str	r3, [r1, #16]
 8005550:	e011      	b.n	8005576 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005552:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800555a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6892      	ldr	r2, [r2, #8]
 8005562:	0211      	lsls	r1, r2, #8
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6952      	ldr	r2, [r2, #20]
 8005568:	0852      	lsrs	r2, r2, #1
 800556a:	3a01      	subs	r2, #1
 800556c:	0652      	lsls	r2, r2, #25
 800556e:	430a      	orrs	r2, r1
 8005570:	4915      	ldr	r1, [pc, #84]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800557c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005580:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005582:	f7fc fd3b 	bl	8001ffc <HAL_GetTick>
 8005586:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005588:	e009      	b.n	800559e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800558a:	f7fc fd37 	bl	8001ffc <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d902      	bls.n	800559e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	73fb      	strb	r3, [r7, #15]
          break;
 800559c:	e005      	b.n	80055aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0ef      	beq.n	800558a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	4903      	ldr	r1, [pc, #12]	; (80055c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000

080055cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e049      	b.n	8005672 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fa38 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	4619      	mov	r1, r3
 800560a:	4610      	mov	r0, r2
 800560c:	f000 fb64 	bl	8005cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d001      	beq.n	8005694 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e038      	b.n	8005706 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_TIM_Base_Start+0x98>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00e      	beq.n	80056c4 <HAL_TIM_Base_Start+0x48>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ae:	d009      	beq.n	80056c4 <HAL_TIM_Base_Start+0x48>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_TIM_Base_Start+0x9c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_TIM_Base_Start+0x48>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a17      	ldr	r2, [pc, #92]	; (800571c <HAL_TIM_Base_Start+0xa0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d115      	bne.n	80056f0 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <HAL_TIM_Base_Start+0xa4>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d015      	beq.n	8005702 <HAL_TIM_Base_Start+0x86>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056dc:	d011      	beq.n	8005702 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	e008      	b.n	8005702 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e000      	b.n	8005704 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40000400 	.word	0x40000400
 800571c:	40014000 	.word	0x40014000
 8005720:	00010007 	.word	0x00010007

08005724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e040      	b.n	80057be <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <HAL_TIM_Base_Start_IT+0xa8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00e      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x58>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d009      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x58>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_TIM_Base_Start_IT+0xac>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x58>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d115      	bne.n	80057a8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005784:	4013      	ands	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b06      	cmp	r3, #6
 800578c:	d015      	beq.n	80057ba <HAL_TIM_Base_Start_IT+0x96>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005794:	d011      	beq.n	80057ba <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0201 	orr.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a6:	e008      	b.n	80057ba <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e000      	b.n	80057bc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	00010007 	.word	0x00010007

080057dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10f      	bne.n	8005824 <HAL_TIM_Base_Stop_IT+0x48>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a1a      	ldr	r2, [r3, #32]
 800580a:	f240 4344 	movw	r3, #1092	; 0x444
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <HAL_TIM_Base_Stop_IT+0x48>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0201 	bic.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b02      	cmp	r3, #2
 800584e:	d122      	bne.n	8005896 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d11b      	bne.n	8005896 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f06f 0202 	mvn.w	r2, #2
 8005866:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fa0d 	bl	8005c9c <HAL_TIM_IC_CaptureCallback>
 8005882:	e005      	b.n	8005890 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f9ff 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa10 	bl	8005cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d122      	bne.n	80058ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d11b      	bne.n	80058ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f06f 0204 	mvn.w	r2, #4
 80058ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f9e3 	bl	8005c9c <HAL_TIM_IC_CaptureCallback>
 80058d6:	e005      	b.n	80058e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9d5 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9e6 	bl	8005cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d122      	bne.n	800593e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b08      	cmp	r3, #8
 8005904:	d11b      	bne.n	800593e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f06f 0208 	mvn.w	r2, #8
 800590e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2204      	movs	r2, #4
 8005914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f9b9 	bl	8005c9c <HAL_TIM_IC_CaptureCallback>
 800592a:	e005      	b.n	8005938 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f9ab 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9bc 	bl	8005cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b10      	cmp	r3, #16
 800594a:	d122      	bne.n	8005992 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d11b      	bne.n	8005992 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f06f 0210 	mvn.w	r2, #16
 8005962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2208      	movs	r2, #8
 8005968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f98f 	bl	8005c9c <HAL_TIM_IC_CaptureCallback>
 800597e:	e005      	b.n	800598c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f981 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f992 	bl	8005cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d10e      	bne.n	80059be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d107      	bne.n	80059be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f06f 0201 	mvn.w	r2, #1
 80059b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7fb fd8d 	bl	80014d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d10e      	bne.n	80059ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d107      	bne.n	80059ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fb87 	bl	80060f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f8:	d10e      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a04:	2b80      	cmp	r3, #128	; 0x80
 8005a06:	d107      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fb7a 	bl	800610c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d10e      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d107      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f940 	bl	8005cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d10e      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d107      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0220 	mvn.w	r2, #32
 8005a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fb3a 	bl	80060e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIM_ConfigClockSource+0x18>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e0b5      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x184>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005acc:	d03e      	beq.n	8005b4c <HAL_TIM_ConfigClockSource+0xd4>
 8005ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad2:	f200 8087 	bhi.w	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ada:	f000 8085 	beq.w	8005be8 <HAL_TIM_ConfigClockSource+0x170>
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	d87f      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b70      	cmp	r3, #112	; 0x70
 8005ae6:	d01a      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ae8:	2b70      	cmp	r3, #112	; 0x70
 8005aea:	d87b      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b60      	cmp	r3, #96	; 0x60
 8005aee:	d050      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x11a>
 8005af0:	2b60      	cmp	r3, #96	; 0x60
 8005af2:	d877      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b50      	cmp	r3, #80	; 0x50
 8005af6:	d03c      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0xfa>
 8005af8:	2b50      	cmp	r3, #80	; 0x50
 8005afa:	d873      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d058      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d86f      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005b04:	2b30      	cmp	r3, #48	; 0x30
 8005b06:	d064      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b08:	2b30      	cmp	r3, #48	; 0x30
 8005b0a:	d86b      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d060      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d867      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d05c      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d05a      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b1c:	e062      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6899      	ldr	r1, [r3, #8]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f000 fa4b 	bl	8005fc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	609a      	str	r2, [r3, #8]
      break;
 8005b4a:	e04e      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	6899      	ldr	r1, [r3, #8]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f000 fa34 	bl	8005fc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b6e:	609a      	str	r2, [r3, #8]
      break;
 8005b70:	e03b      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f000 f9a8 	bl	8005ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2150      	movs	r1, #80	; 0x50
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fa01 	bl	8005f92 <TIM_ITRx_SetConfig>
      break;
 8005b90:	e02b      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6859      	ldr	r1, [r3, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f000 f9c7 	bl	8005f32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2160      	movs	r1, #96	; 0x60
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 f9f1 	bl	8005f92 <TIM_ITRx_SetConfig>
      break;
 8005bb0:	e01b      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f000 f988 	bl	8005ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2140      	movs	r1, #64	; 0x40
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f9e1 	bl	8005f92 <TIM_ITRx_SetConfig>
      break;
 8005bd0:	e00b      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f000 f9d8 	bl	8005f92 <TIM_ITRx_SetConfig>
        break;
 8005be2:	e002      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005be4:	bf00      	nop
 8005be6:	e000      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005be8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e031      	b.n	8005c80 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8c0 	bl	8005db4 <TIM_SlaveTimer_SetConfig>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e018      	b.n	8005c80 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c6c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <TIM_Base_SetConfig+0xcc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_Base_SetConfig+0x28>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0x28>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a2b      	ldr	r2, [pc, #172]	; (8005da8 <TIM_Base_SetConfig+0xd0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d108      	bne.n	8005d12 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <TIM_Base_SetConfig+0xcc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00f      	beq.n	8005d3a <TIM_Base_SetConfig+0x62>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d20:	d00b      	beq.n	8005d3a <TIM_Base_SetConfig+0x62>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <TIM_Base_SetConfig+0xd0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_Base_SetConfig+0x62>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1f      	ldr	r2, [pc, #124]	; (8005dac <TIM_Base_SetConfig+0xd4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_Base_SetConfig+0x62>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <TIM_Base_SetConfig+0xd8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <TIM_Base_SetConfig+0xcc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_Base_SetConfig+0xb0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <TIM_Base_SetConfig+0xd4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_Base_SetConfig+0xb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a0b      	ldr	r2, [pc, #44]	; (8005db0 <TIM_Base_SetConfig+0xd8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d103      	bne.n	8005d90 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	615a      	str	r2, [r3, #20]
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40014400 	.word	0x40014400

08005db4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dde:	f023 0307 	bic.w	r3, r3, #7
 8005de2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b70      	cmp	r3, #112	; 0x70
 8005dfc:	d01a      	beq.n	8005e34 <TIM_SlaveTimer_SetConfig+0x80>
 8005dfe:	2b70      	cmp	r3, #112	; 0x70
 8005e00:	d860      	bhi.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x110>
 8005e02:	2b60      	cmp	r3, #96	; 0x60
 8005e04:	d054      	beq.n	8005eb0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005e06:	2b60      	cmp	r3, #96	; 0x60
 8005e08:	d85c      	bhi.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x110>
 8005e0a:	2b50      	cmp	r3, #80	; 0x50
 8005e0c:	d046      	beq.n	8005e9c <TIM_SlaveTimer_SetConfig+0xe8>
 8005e0e:	2b50      	cmp	r3, #80	; 0x50
 8005e10:	d858      	bhi.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x110>
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d019      	beq.n	8005e4a <TIM_SlaveTimer_SetConfig+0x96>
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	d854      	bhi.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x110>
 8005e1a:	2b30      	cmp	r3, #48	; 0x30
 8005e1c:	d054      	beq.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x114>
 8005e1e:	2b30      	cmp	r3, #48	; 0x30
 8005e20:	d850      	bhi.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x110>
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d050      	beq.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x114>
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d84c      	bhi.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x110>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d04c      	beq.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x114>
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d04a      	beq.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005e32:	e047      	b.n	8005ec4 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68d9      	ldr	r1, [r3, #12]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f000 f8c0 	bl	8005fc8 <TIM_ETR_SetConfig>
      break;
 8005e48:	e03f      	b.n	8005eca <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d101      	bne.n	8005e56 <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e03a      	b.n	8005ecc <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e7c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	621a      	str	r2, [r3, #32]
      break;
 8005e9a:	e016      	b.n	8005eca <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	6899      	ldr	r1, [r3, #8]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f000 f813 	bl	8005ed4 <TIM_TI1_ConfigInputStage>
      break;
 8005eae:	e00c      	b.n	8005eca <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	6899      	ldr	r1, [r3, #8]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f000 f838 	bl	8005f32 <TIM_TI2_ConfigInputStage>
      break;
 8005ec2:	e002      	b.n	8005eca <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8005ec4:	bf00      	nop
 8005ec6:	e000      	b.n	8005eca <TIM_SlaveTimer_SetConfig+0x116>
        break;
 8005ec8:	bf00      	nop
  }
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f023 0201 	bic.w	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 030a 	bic.w	r3, r3, #10
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b087      	sub	sp, #28
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f023 0210 	bic.w	r2, r3, #16
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	031b      	lsls	r3, r3, #12
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f043 0307 	orr.w	r3, r3, #7
 8005fb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	609a      	str	r2, [r3, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	021a      	lsls	r2, r3, #8
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800601c:	2302      	movs	r3, #2
 800601e:	e054      	b.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a24      	ldr	r2, [pc, #144]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006050:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006088:	d009      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a13      	ldr	r2, [pc, #76]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a11      	ldr	r2, [pc, #68]	; (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10c      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40014000 	.word	0x40014000

080060e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e040      	b.n	80061b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fb fd30 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	; 0x24
 800614c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f8c0 	bl	80062e4 <UART_SetConfig>
 8006164:	4603      	mov	r3, r0
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e022      	b.n	80061b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fb10 	bl	800679c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800618a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800619a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fb97 	bl	80068e0 <UART_CheckIdleState>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	; 0x28
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	f040 8082 	bne.w	80062da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_UART_Transmit+0x26>
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e07a      	b.n	80062dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_UART_Transmit+0x38>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e073      	b.n	80062dc <HAL_UART_Transmit+0x120>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2221      	movs	r2, #33	; 0x21
 8006208:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800620a:	f7fb fef7 	bl	8001ffc <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	88fa      	ldrh	r2, [r7, #6]
 8006214:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	88fa      	ldrh	r2, [r7, #6]
 800621c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006228:	d108      	bne.n	800623c <HAL_UART_Transmit+0x80>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e003      	b.n	8006244 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006240:	2300      	movs	r3, #0
 8006242:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800624c:	e02d      	b.n	80062aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2200      	movs	r2, #0
 8006256:	2180      	movs	r1, #128	; 0x80
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fb8a 	bl	8006972 <UART_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e039      	b.n	80062dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10b      	bne.n	8006286 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	881a      	ldrh	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800627a:	b292      	uxth	r2, r2
 800627c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	3302      	adds	r3, #2
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e008      	b.n	8006298 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	b292      	uxth	r2, r2
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3301      	adds	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1cb      	bne.n	800624e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2200      	movs	r2, #0
 80062be:	2140      	movs	r1, #64	; 0x40
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fb56 	bl	8006972 <UART_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e005      	b.n	80062dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e000      	b.n	80062dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80062da:	2302      	movs	r3, #2
  }
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e4:	b5b0      	push	{r4, r5, r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	4313      	orrs	r3, r2
 8006306:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4ba4      	ldr	r3, [pc, #656]	; (80065a0 <UART_SetConfig+0x2bc>)
 8006310:	4013      	ands	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	69f9      	ldr	r1, [r7, #28]
 8006318:	430b      	orrs	r3, r1
 800631a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a99      	ldr	r2, [pc, #612]	; (80065a4 <UART_SetConfig+0x2c0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	4313      	orrs	r3, r2
 800634a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a90      	ldr	r2, [pc, #576]	; (80065a8 <UART_SetConfig+0x2c4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d121      	bne.n	80063ae <UART_SetConfig+0xca>
 800636a:	4b90      	ldr	r3, [pc, #576]	; (80065ac <UART_SetConfig+0x2c8>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	2b03      	cmp	r3, #3
 8006376:	d817      	bhi.n	80063a8 <UART_SetConfig+0xc4>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <UART_SetConfig+0x9c>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	08006391 	.word	0x08006391
 8006384:	0800639d 	.word	0x0800639d
 8006388:	08006397 	.word	0x08006397
 800638c:	080063a3 	.word	0x080063a3
 8006390:	2301      	movs	r3, #1
 8006392:	76fb      	strb	r3, [r7, #27]
 8006394:	e0bc      	b.n	8006510 <UART_SetConfig+0x22c>
 8006396:	2302      	movs	r3, #2
 8006398:	76fb      	strb	r3, [r7, #27]
 800639a:	e0b9      	b.n	8006510 <UART_SetConfig+0x22c>
 800639c:	2304      	movs	r3, #4
 800639e:	76fb      	strb	r3, [r7, #27]
 80063a0:	e0b6      	b.n	8006510 <UART_SetConfig+0x22c>
 80063a2:	2308      	movs	r3, #8
 80063a4:	76fb      	strb	r3, [r7, #27]
 80063a6:	e0b3      	b.n	8006510 <UART_SetConfig+0x22c>
 80063a8:	2310      	movs	r3, #16
 80063aa:	76fb      	strb	r3, [r7, #27]
 80063ac:	e0b0      	b.n	8006510 <UART_SetConfig+0x22c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a7f      	ldr	r2, [pc, #508]	; (80065b0 <UART_SetConfig+0x2cc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d132      	bne.n	800641e <UART_SetConfig+0x13a>
 80063b8:	4b7c      	ldr	r3, [pc, #496]	; (80065ac <UART_SetConfig+0x2c8>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b0c      	cmp	r3, #12
 80063c4:	d828      	bhi.n	8006418 <UART_SetConfig+0x134>
 80063c6:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <UART_SetConfig+0xe8>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	08006401 	.word	0x08006401
 80063d0:	08006419 	.word	0x08006419
 80063d4:	08006419 	.word	0x08006419
 80063d8:	08006419 	.word	0x08006419
 80063dc:	0800640d 	.word	0x0800640d
 80063e0:	08006419 	.word	0x08006419
 80063e4:	08006419 	.word	0x08006419
 80063e8:	08006419 	.word	0x08006419
 80063ec:	08006407 	.word	0x08006407
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006419 	.word	0x08006419
 80063fc:	08006413 	.word	0x08006413
 8006400:	2300      	movs	r3, #0
 8006402:	76fb      	strb	r3, [r7, #27]
 8006404:	e084      	b.n	8006510 <UART_SetConfig+0x22c>
 8006406:	2302      	movs	r3, #2
 8006408:	76fb      	strb	r3, [r7, #27]
 800640a:	e081      	b.n	8006510 <UART_SetConfig+0x22c>
 800640c:	2304      	movs	r3, #4
 800640e:	76fb      	strb	r3, [r7, #27]
 8006410:	e07e      	b.n	8006510 <UART_SetConfig+0x22c>
 8006412:	2308      	movs	r3, #8
 8006414:	76fb      	strb	r3, [r7, #27]
 8006416:	e07b      	b.n	8006510 <UART_SetConfig+0x22c>
 8006418:	2310      	movs	r3, #16
 800641a:	76fb      	strb	r3, [r7, #27]
 800641c:	e078      	b.n	8006510 <UART_SetConfig+0x22c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a64      	ldr	r2, [pc, #400]	; (80065b4 <UART_SetConfig+0x2d0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d120      	bne.n	800646a <UART_SetConfig+0x186>
 8006428:	4b60      	ldr	r3, [pc, #384]	; (80065ac <UART_SetConfig+0x2c8>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006432:	2b30      	cmp	r3, #48	; 0x30
 8006434:	d013      	beq.n	800645e <UART_SetConfig+0x17a>
 8006436:	2b30      	cmp	r3, #48	; 0x30
 8006438:	d814      	bhi.n	8006464 <UART_SetConfig+0x180>
 800643a:	2b20      	cmp	r3, #32
 800643c:	d009      	beq.n	8006452 <UART_SetConfig+0x16e>
 800643e:	2b20      	cmp	r3, #32
 8006440:	d810      	bhi.n	8006464 <UART_SetConfig+0x180>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <UART_SetConfig+0x168>
 8006446:	2b10      	cmp	r3, #16
 8006448:	d006      	beq.n	8006458 <UART_SetConfig+0x174>
 800644a:	e00b      	b.n	8006464 <UART_SetConfig+0x180>
 800644c:	2300      	movs	r3, #0
 800644e:	76fb      	strb	r3, [r7, #27]
 8006450:	e05e      	b.n	8006510 <UART_SetConfig+0x22c>
 8006452:	2302      	movs	r3, #2
 8006454:	76fb      	strb	r3, [r7, #27]
 8006456:	e05b      	b.n	8006510 <UART_SetConfig+0x22c>
 8006458:	2304      	movs	r3, #4
 800645a:	76fb      	strb	r3, [r7, #27]
 800645c:	e058      	b.n	8006510 <UART_SetConfig+0x22c>
 800645e:	2308      	movs	r3, #8
 8006460:	76fb      	strb	r3, [r7, #27]
 8006462:	e055      	b.n	8006510 <UART_SetConfig+0x22c>
 8006464:	2310      	movs	r3, #16
 8006466:	76fb      	strb	r3, [r7, #27]
 8006468:	e052      	b.n	8006510 <UART_SetConfig+0x22c>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a52      	ldr	r2, [pc, #328]	; (80065b8 <UART_SetConfig+0x2d4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d120      	bne.n	80064b6 <UART_SetConfig+0x1d2>
 8006474:	4b4d      	ldr	r3, [pc, #308]	; (80065ac <UART_SetConfig+0x2c8>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800647e:	2bc0      	cmp	r3, #192	; 0xc0
 8006480:	d013      	beq.n	80064aa <UART_SetConfig+0x1c6>
 8006482:	2bc0      	cmp	r3, #192	; 0xc0
 8006484:	d814      	bhi.n	80064b0 <UART_SetConfig+0x1cc>
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d009      	beq.n	800649e <UART_SetConfig+0x1ba>
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d810      	bhi.n	80064b0 <UART_SetConfig+0x1cc>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <UART_SetConfig+0x1b4>
 8006492:	2b40      	cmp	r3, #64	; 0x40
 8006494:	d006      	beq.n	80064a4 <UART_SetConfig+0x1c0>
 8006496:	e00b      	b.n	80064b0 <UART_SetConfig+0x1cc>
 8006498:	2300      	movs	r3, #0
 800649a:	76fb      	strb	r3, [r7, #27]
 800649c:	e038      	b.n	8006510 <UART_SetConfig+0x22c>
 800649e:	2302      	movs	r3, #2
 80064a0:	76fb      	strb	r3, [r7, #27]
 80064a2:	e035      	b.n	8006510 <UART_SetConfig+0x22c>
 80064a4:	2304      	movs	r3, #4
 80064a6:	76fb      	strb	r3, [r7, #27]
 80064a8:	e032      	b.n	8006510 <UART_SetConfig+0x22c>
 80064aa:	2308      	movs	r3, #8
 80064ac:	76fb      	strb	r3, [r7, #27]
 80064ae:	e02f      	b.n	8006510 <UART_SetConfig+0x22c>
 80064b0:	2310      	movs	r3, #16
 80064b2:	76fb      	strb	r3, [r7, #27]
 80064b4:	e02c      	b.n	8006510 <UART_SetConfig+0x22c>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3a      	ldr	r2, [pc, #232]	; (80065a4 <UART_SetConfig+0x2c0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d125      	bne.n	800650c <UART_SetConfig+0x228>
 80064c0:	4b3a      	ldr	r3, [pc, #232]	; (80065ac <UART_SetConfig+0x2c8>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ce:	d017      	beq.n	8006500 <UART_SetConfig+0x21c>
 80064d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064d4:	d817      	bhi.n	8006506 <UART_SetConfig+0x222>
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064da:	d00b      	beq.n	80064f4 <UART_SetConfig+0x210>
 80064dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e0:	d811      	bhi.n	8006506 <UART_SetConfig+0x222>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <UART_SetConfig+0x20a>
 80064e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ea:	d006      	beq.n	80064fa <UART_SetConfig+0x216>
 80064ec:	e00b      	b.n	8006506 <UART_SetConfig+0x222>
 80064ee:	2300      	movs	r3, #0
 80064f0:	76fb      	strb	r3, [r7, #27]
 80064f2:	e00d      	b.n	8006510 <UART_SetConfig+0x22c>
 80064f4:	2302      	movs	r3, #2
 80064f6:	76fb      	strb	r3, [r7, #27]
 80064f8:	e00a      	b.n	8006510 <UART_SetConfig+0x22c>
 80064fa:	2304      	movs	r3, #4
 80064fc:	76fb      	strb	r3, [r7, #27]
 80064fe:	e007      	b.n	8006510 <UART_SetConfig+0x22c>
 8006500:	2308      	movs	r3, #8
 8006502:	76fb      	strb	r3, [r7, #27]
 8006504:	e004      	b.n	8006510 <UART_SetConfig+0x22c>
 8006506:	2310      	movs	r3, #16
 8006508:	76fb      	strb	r3, [r7, #27]
 800650a:	e001      	b.n	8006510 <UART_SetConfig+0x22c>
 800650c:	2310      	movs	r3, #16
 800650e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <UART_SetConfig+0x2c0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	f040 8084 	bne.w	8006624 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800651c:	7efb      	ldrb	r3, [r7, #27]
 800651e:	2b08      	cmp	r3, #8
 8006520:	d823      	bhi.n	800656a <UART_SetConfig+0x286>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0x244>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	0800654d 	.word	0x0800654d
 800652c:	0800656b 	.word	0x0800656b
 8006530:	08006555 	.word	0x08006555
 8006534:	0800656b 	.word	0x0800656b
 8006538:	0800655b 	.word	0x0800655b
 800653c:	0800656b 	.word	0x0800656b
 8006540:	0800656b 	.word	0x0800656b
 8006544:	0800656b 	.word	0x0800656b
 8006548:	08006563 	.word	0x08006563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800654c:	f7fe fc54 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8006550:	6178      	str	r0, [r7, #20]
        break;
 8006552:	e00f      	b.n	8006574 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006554:	4b19      	ldr	r3, [pc, #100]	; (80065bc <UART_SetConfig+0x2d8>)
 8006556:	617b      	str	r3, [r7, #20]
        break;
 8006558:	e00c      	b.n	8006574 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800655a:	f7fe fbb5 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 800655e:	6178      	str	r0, [r7, #20]
        break;
 8006560:	e008      	b.n	8006574 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006566:	617b      	str	r3, [r7, #20]
        break;
 8006568:	e004      	b.n	8006574 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	76bb      	strb	r3, [r7, #26]
        break;
 8006572:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8102 	beq.w	8006780 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	4413      	add	r3, r2
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	429a      	cmp	r2, r3
 800658a:	d305      	bcc.n	8006598 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	429a      	cmp	r2, r3
 8006596:	d913      	bls.n	80065c0 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	76bb      	strb	r3, [r7, #26]
 800659c:	e0f0      	b.n	8006780 <UART_SetConfig+0x49c>
 800659e:	bf00      	nop
 80065a0:	efff69f3 	.word	0xefff69f3
 80065a4:	40008000 	.word	0x40008000
 80065a8:	40013800 	.word	0x40013800
 80065ac:	40021000 	.word	0x40021000
 80065b0:	40004400 	.word	0x40004400
 80065b4:	40004800 	.word	0x40004800
 80065b8:	40004c00 	.word	0x40004c00
 80065bc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f04f 0100 	mov.w	r1, #0
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	020b      	lsls	r3, r1, #8
 80065d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065d6:	0202      	lsls	r2, r0, #8
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	6849      	ldr	r1, [r1, #4]
 80065dc:	0849      	lsrs	r1, r1, #1
 80065de:	4608      	mov	r0, r1
 80065e0:	f04f 0100 	mov.w	r1, #0
 80065e4:	1814      	adds	r4, r2, r0
 80065e6:	eb43 0501 	adc.w	r5, r3, r1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	4620      	mov	r0, r4
 80065f6:	4629      	mov	r1, r5
 80065f8:	f7fa fb4e 	bl	8000c98 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4613      	mov	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800660a:	d308      	bcc.n	800661e <UART_SetConfig+0x33a>
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006612:	d204      	bcs.n	800661e <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	60da      	str	r2, [r3, #12]
 800661c:	e0b0      	b.n	8006780 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	76bb      	strb	r3, [r7, #26]
 8006622:	e0ad      	b.n	8006780 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662c:	d15c      	bne.n	80066e8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800662e:	7efb      	ldrb	r3, [r7, #27]
 8006630:	2b08      	cmp	r3, #8
 8006632:	d828      	bhi.n	8006686 <UART_SetConfig+0x3a2>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0x358>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006661 	.word	0x08006661
 8006640:	08006669 	.word	0x08006669
 8006644:	08006671 	.word	0x08006671
 8006648:	08006687 	.word	0x08006687
 800664c:	08006677 	.word	0x08006677
 8006650:	08006687 	.word	0x08006687
 8006654:	08006687 	.word	0x08006687
 8006658:	08006687 	.word	0x08006687
 800665c:	0800667f 	.word	0x0800667f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006660:	f7fe fbca 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8006664:	6178      	str	r0, [r7, #20]
        break;
 8006666:	e013      	b.n	8006690 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006668:	f7fe fbdc 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
 800666c:	6178      	str	r0, [r7, #20]
        break;
 800666e:	e00f      	b.n	8006690 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006670:	4b49      	ldr	r3, [pc, #292]	; (8006798 <UART_SetConfig+0x4b4>)
 8006672:	617b      	str	r3, [r7, #20]
        break;
 8006674:	e00c      	b.n	8006690 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006676:	f7fe fb27 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 800667a:	6178      	str	r0, [r7, #20]
        break;
 800667c:	e008      	b.n	8006690 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006682:	617b      	str	r3, [r7, #20]
        break;
 8006684:	e004      	b.n	8006690 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	76bb      	strb	r3, [r7, #26]
        break;
 800668e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d074      	beq.n	8006780 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	005a      	lsls	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b0f      	cmp	r3, #15
 80066b2:	d916      	bls.n	80066e2 <UART_SetConfig+0x3fe>
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ba:	d212      	bcs.n	80066e2 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	f023 030f 	bic.w	r3, r3, #15
 80066c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	89fb      	ldrh	r3, [r7, #14]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	89fa      	ldrh	r2, [r7, #14]
 80066de:	60da      	str	r2, [r3, #12]
 80066e0:	e04e      	b.n	8006780 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	76bb      	strb	r3, [r7, #26]
 80066e6:	e04b      	b.n	8006780 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066e8:	7efb      	ldrb	r3, [r7, #27]
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d827      	bhi.n	800673e <UART_SetConfig+0x45a>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0x410>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006719 	.word	0x08006719
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006729 	.word	0x08006729
 8006700:	0800673f 	.word	0x0800673f
 8006704:	0800672f 	.word	0x0800672f
 8006708:	0800673f 	.word	0x0800673f
 800670c:	0800673f 	.word	0x0800673f
 8006710:	0800673f 	.word	0x0800673f
 8006714:	08006737 	.word	0x08006737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006718:	f7fe fb6e 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 800671c:	6178      	str	r0, [r7, #20]
        break;
 800671e:	e013      	b.n	8006748 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006720:	f7fe fb80 	bl	8004e24 <HAL_RCC_GetPCLK2Freq>
 8006724:	6178      	str	r0, [r7, #20]
        break;
 8006726:	e00f      	b.n	8006748 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006728:	4b1b      	ldr	r3, [pc, #108]	; (8006798 <UART_SetConfig+0x4b4>)
 800672a:	617b      	str	r3, [r7, #20]
        break;
 800672c:	e00c      	b.n	8006748 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800672e:	f7fe facb 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8006732:	6178      	str	r0, [r7, #20]
        break;
 8006734:	e008      	b.n	8006748 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800673a:	617b      	str	r3, [r7, #20]
        break;
 800673c:	e004      	b.n	8006748 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	76bb      	strb	r3, [r7, #26]
        break;
 8006746:	bf00      	nop
    }

    if (pclk != 0U)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d018      	beq.n	8006780 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	085a      	lsrs	r2, r3, #1
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	441a      	add	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006760:	b29b      	uxth	r3, r3
 8006762:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b0f      	cmp	r3, #15
 8006768:	d908      	bls.n	800677c <UART_SetConfig+0x498>
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006770:	d204      	bcs.n	800677c <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e001      	b.n	8006780 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800678c:	7ebb      	ldrb	r3, [r7, #26]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3720      	adds	r7, #32
 8006792:	46bd      	mov	sp, r7
 8006794:	bdb0      	pop	{r4, r5, r7, pc}
 8006796:	bf00      	nop
 8006798:	00f42400 	.word	0x00f42400

0800679c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01a      	beq.n	80068b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689a:	d10a      	bne.n	80068b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]
  }
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068f0:	f7fb fb84 	bl	8001ffc <HAL_GetTick>
 80068f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b08      	cmp	r3, #8
 8006902:	d10e      	bne.n	8006922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f82d 	bl	8006972 <UART_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e023      	b.n	800696a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b04      	cmp	r3, #4
 800692e:	d10e      	bne.n	800694e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f817 	bl	8006972 <UART_WaitOnFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e00d      	b.n	800696a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006982:	e05e      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d05a      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698c:	f7fb fb36 	bl	8001ffc <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	429a      	cmp	r2, r3
 800699a:	d302      	bcc.n	80069a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d11b      	bne.n	80069da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0201 	bic.w	r2, r2, #1
 80069c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e043      	b.n	8006a62 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d02c      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f6:	d124      	bne.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a00:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a10:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0201 	bic.w	r2, r2, #1
 8006a20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2220      	movs	r2, #32
 8006a26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e00f      	b.n	8006a62 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d091      	beq.n	8006984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <__NVIC_EnableIRQ>:
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	db0b      	blt.n	8006a96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	f003 021f 	and.w	r2, r3, #31
 8006a84:	4907      	ldr	r1, [pc, #28]	; (8006aa4 <__NVIC_EnableIRQ+0x38>)
 8006a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	e000e100 	.word	0xe000e100

08006aa8 <__NVIC_SetPriority>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	db0a      	blt.n	8006ad2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	490c      	ldr	r1, [pc, #48]	; (8006af4 <__NVIC_SetPriority+0x4c>)
 8006ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac6:	0112      	lsls	r2, r2, #4
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	440b      	add	r3, r1
 8006acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ad0:	e00a      	b.n	8006ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	4908      	ldr	r1, [pc, #32]	; (8006af8 <__NVIC_SetPriority+0x50>)
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	0112      	lsls	r2, r2, #4
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	761a      	strb	r2, [r3, #24]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	e000e100 	.word	0xe000e100
 8006af8:	e000ed00 	.word	0xe000ed00

08006afc <initSTOPMode>:
    Error_Handler();
    }
  }

void initSTOPMode(void)
  {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  SET_BIT(EXTI->IMR1, EXTI_IMR1_IM23);                 //Разрешение генерирования прерывания от I2C1 для пробуждения МК
 8006b00:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <initSTOPMode+0x3c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a0c      	ldr	r2, [pc, #48]	; (8006b38 <initSTOPMode+0x3c>)
 8006b06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b0a:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPWUCK);               //Установка бита STOPWUCK: 0 - после пробуждения тактирование
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <initSTOPMode+0x40>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <initSTOPMode+0x40>)
 8006b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b16:	6093      	str	r3, [r2, #8]
                                                       //микроконтроллера осуществляется от MSI 4МГц; 1 - от HSI 16МГц
  SET_BIT(PWR->CR1, PWR_CR1_VOS_1);                    //Установка бита VOS: 0 - питание процессора 1.2В, макс. тактовая частота до 80 МГц
 8006b18:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <initSTOPMode+0x44>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <initSTOPMode+0x44>)
 8006b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b22:	6013      	str	r3, [r2, #0]
                                                       //1 - питание процессора 1.0В, макс. тактовая частота до 26 МГц
  NVIC_EnableIRQ(EXTI9_5_IRQn);                        //Включение источника прерывания для выхода из режима Stop
 8006b24:	2017      	movs	r0, #23
 8006b26:	f7ff ffa1 	bl	8006a6c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI9_5_IRQn, 0);                   //Установка приоритета прерывания
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	2017      	movs	r0, #23
 8006b2e:	f7ff ffbb 	bl	8006aa8 <__NVIC_SetPriority>
  }
 8006b32:	bf00      	nop
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	40010400 	.word	0x40010400
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	40007000 	.word	0x40007000

08006b44 <goToSTOPMode>:

void goToSTOPMode(void)
  {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  HAL_I2CEx_EnableWakeUp(&hi2c1);               //Включение режима пробуждения МК по прерыванию от I2C1
 8006b48:	4808      	ldr	r0, [pc, #32]	; (8006b6c <goToSTOPMode+0x28>)
 8006b4a:	f7fd fa32 	bl	8003fb2 <HAL_I2CEx_EnableWakeUp>
  __ASM volatile ("cpsid i" : : : "memory");
 8006b4e:	b672      	cpsid	i
}
 8006b50:	bf00      	nop
  __disable_irq();                              //Отключение прерываний
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);               //Вход в Stop режим
 8006b52:	2101      	movs	r1, #1
 8006b54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006b58:	f7fd faaf 	bl	80040ba <HAL_PWR_EnterSTOPMode>
  HAL_I2CEx_DisableWakeUp(&hi2c1);               //Отключение режима пробуждения МК по прерыванию от I2C1
 8006b5c:	4803      	ldr	r0, [pc, #12]	; (8006b6c <goToSTOPMode+0x28>)
 8006b5e:	f7fd fa6a 	bl	8004036 <HAL_I2CEx_DisableWakeUp>
  __ASM volatile ("cpsie i" : : : "memory");
 8006b62:	b662      	cpsie	i
}
 8006b64:	bf00      	nop
  __enable_irq();
  }
 8006b66:	bf00      	nop
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2000022c 	.word	0x2000022c

08006b70 <waitForClickButton>:

void waitForClickButton(void)               //Функция ожидания нажатия кнопки
  {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  while(HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin) != GPIO_PIN_SET)
 8006b74:	bf00      	nop
 8006b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b7a:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <waitForClickButton+0x30>)
 8006b7c:	f7fb fd48 	bl	8002610 <HAL_GPIO_ReadPin>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d1f7      	bne.n	8006b76 <waitForClickButton+0x6>
    {
    }
  while(HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin) != GPIO_PIN_RESET)
 8006b86:	bf00      	nop
 8006b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b8c:	4804      	ldr	r0, [pc, #16]	; (8006ba0 <waitForClickButton+0x30>)
 8006b8e:	f7fb fd3f 	bl	8002610 <HAL_GPIO_ReadPin>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f7      	bne.n	8006b88 <waitForClickButton+0x18>
    {
    }
  }
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	48000800 	.word	0x48000800

08006ba4 <round>:
 8006ba4:	ec51 0b10 	vmov	r0, r1, d0
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006bae:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006bb2:	2c13      	cmp	r4, #19
 8006bb4:	ee10 2a10 	vmov	r2, s0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	dc19      	bgt.n	8006bf0 <round+0x4c>
 8006bbc:	2c00      	cmp	r4, #0
 8006bbe:	da09      	bge.n	8006bd4 <round+0x30>
 8006bc0:	3401      	adds	r4, #1
 8006bc2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006bc6:	d103      	bne.n	8006bd0 <round+0x2c>
 8006bc8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006bcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	e028      	b.n	8006c26 <round+0x82>
 8006bd4:	4d15      	ldr	r5, [pc, #84]	; (8006c2c <round+0x88>)
 8006bd6:	4125      	asrs	r5, r4
 8006bd8:	ea01 0605 	and.w	r6, r1, r5
 8006bdc:	4332      	orrs	r2, r6
 8006bde:	d00e      	beq.n	8006bfe <round+0x5a>
 8006be0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006be4:	fa42 f404 	asr.w	r4, r2, r4
 8006be8:	4423      	add	r3, r4
 8006bea:	ea23 0305 	bic.w	r3, r3, r5
 8006bee:	e7ef      	b.n	8006bd0 <round+0x2c>
 8006bf0:	2c33      	cmp	r4, #51	; 0x33
 8006bf2:	dd07      	ble.n	8006c04 <round+0x60>
 8006bf4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006bf8:	d101      	bne.n	8006bfe <round+0x5a>
 8006bfa:	f7f9 fb4f 	bl	800029c <__adddf3>
 8006bfe:	ec41 0b10 	vmov	d0, r0, r1
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
 8006c04:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006c08:	f04f 35ff 	mov.w	r5, #4294967295
 8006c0c:	40f5      	lsrs	r5, r6
 8006c0e:	4228      	tst	r0, r5
 8006c10:	d0f5      	beq.n	8006bfe <round+0x5a>
 8006c12:	2101      	movs	r1, #1
 8006c14:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006c18:	fa01 f404 	lsl.w	r4, r1, r4
 8006c1c:	1912      	adds	r2, r2, r4
 8006c1e:	bf28      	it	cs
 8006c20:	185b      	addcs	r3, r3, r1
 8006c22:	ea22 0105 	bic.w	r1, r2, r5
 8006c26:	4608      	mov	r0, r1
 8006c28:	4619      	mov	r1, r3
 8006c2a:	e7e8      	b.n	8006bfe <round+0x5a>
 8006c2c:	000fffff 	.word	0x000fffff

08006c30 <__errno>:
 8006c30:	4b01      	ldr	r3, [pc, #4]	; (8006c38 <__errno+0x8>)
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	2000000c 	.word	0x2000000c

08006c3c <__libc_init_array>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	4d0d      	ldr	r5, [pc, #52]	; (8006c74 <__libc_init_array+0x38>)
 8006c40:	4c0d      	ldr	r4, [pc, #52]	; (8006c78 <__libc_init_array+0x3c>)
 8006c42:	1b64      	subs	r4, r4, r5
 8006c44:	10a4      	asrs	r4, r4, #2
 8006c46:	2600      	movs	r6, #0
 8006c48:	42a6      	cmp	r6, r4
 8006c4a:	d109      	bne.n	8006c60 <__libc_init_array+0x24>
 8006c4c:	4d0b      	ldr	r5, [pc, #44]	; (8006c7c <__libc_init_array+0x40>)
 8006c4e:	4c0c      	ldr	r4, [pc, #48]	; (8006c80 <__libc_init_array+0x44>)
 8006c50:	f004 fc46 	bl	800b4e0 <_init>
 8006c54:	1b64      	subs	r4, r4, r5
 8006c56:	10a4      	asrs	r4, r4, #2
 8006c58:	2600      	movs	r6, #0
 8006c5a:	42a6      	cmp	r6, r4
 8006c5c:	d105      	bne.n	8006c6a <__libc_init_array+0x2e>
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c64:	4798      	blx	r3
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7ee      	b.n	8006c48 <__libc_init_array+0xc>
 8006c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6e:	4798      	blx	r3
 8006c70:	3601      	adds	r6, #1
 8006c72:	e7f2      	b.n	8006c5a <__libc_init_array+0x1e>
 8006c74:	0800ba14 	.word	0x0800ba14
 8006c78:	0800ba14 	.word	0x0800ba14
 8006c7c:	0800ba14 	.word	0x0800ba14
 8006c80:	0800ba18 	.word	0x0800ba18

08006c84 <memset>:
 8006c84:	4402      	add	r2, r0
 8006c86:	4603      	mov	r3, r0
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d100      	bne.n	8006c8e <memset+0xa>
 8006c8c:	4770      	bx	lr
 8006c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c92:	e7f9      	b.n	8006c88 <memset+0x4>

08006c94 <__cvt>:
 8006c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	ec55 4b10 	vmov	r4, r5, d0
 8006c9c:	2d00      	cmp	r5, #0
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	462b      	mov	r3, r5
 8006ca4:	bfbb      	ittet	lt
 8006ca6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006caa:	461d      	movlt	r5, r3
 8006cac:	2300      	movge	r3, #0
 8006cae:	232d      	movlt	r3, #45	; 0x2d
 8006cb0:	700b      	strb	r3, [r1, #0]
 8006cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cb8:	4691      	mov	r9, r2
 8006cba:	f023 0820 	bic.w	r8, r3, #32
 8006cbe:	bfbc      	itt	lt
 8006cc0:	4622      	movlt	r2, r4
 8006cc2:	4614      	movlt	r4, r2
 8006cc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cc8:	d005      	beq.n	8006cd6 <__cvt+0x42>
 8006cca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cce:	d100      	bne.n	8006cd2 <__cvt+0x3e>
 8006cd0:	3601      	adds	r6, #1
 8006cd2:	2102      	movs	r1, #2
 8006cd4:	e000      	b.n	8006cd8 <__cvt+0x44>
 8006cd6:	2103      	movs	r1, #3
 8006cd8:	ab03      	add	r3, sp, #12
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	ab02      	add	r3, sp, #8
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	ec45 4b10 	vmov	d0, r4, r5
 8006ce4:	4653      	mov	r3, sl
 8006ce6:	4632      	mov	r2, r6
 8006ce8:	f001 fdb6 	bl	8008858 <_dtoa_r>
 8006cec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	d102      	bne.n	8006cfa <__cvt+0x66>
 8006cf4:	f019 0f01 	tst.w	r9, #1
 8006cf8:	d022      	beq.n	8006d40 <__cvt+0xac>
 8006cfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cfe:	eb07 0906 	add.w	r9, r7, r6
 8006d02:	d110      	bne.n	8006d26 <__cvt+0x92>
 8006d04:	783b      	ldrb	r3, [r7, #0]
 8006d06:	2b30      	cmp	r3, #48	; 0x30
 8006d08:	d10a      	bne.n	8006d20 <__cvt+0x8c>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fee1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d16:	b918      	cbnz	r0, 8006d20 <__cvt+0x8c>
 8006d18:	f1c6 0601 	rsb	r6, r6, #1
 8006d1c:	f8ca 6000 	str.w	r6, [sl]
 8006d20:	f8da 3000 	ldr.w	r3, [sl]
 8006d24:	4499      	add	r9, r3
 8006d26:	2200      	movs	r2, #0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	f7f9 fed3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d32:	b108      	cbz	r0, 8006d38 <__cvt+0xa4>
 8006d34:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d38:	2230      	movs	r2, #48	; 0x30
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	454b      	cmp	r3, r9
 8006d3e:	d307      	bcc.n	8006d50 <__cvt+0xbc>
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d44:	1bdb      	subs	r3, r3, r7
 8006d46:	4638      	mov	r0, r7
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	b004      	add	sp, #16
 8006d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d50:	1c59      	adds	r1, r3, #1
 8006d52:	9103      	str	r1, [sp, #12]
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	e7f0      	b.n	8006d3a <__cvt+0xa6>

08006d58 <__exponent>:
 8006d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	bfb8      	it	lt
 8006d60:	4249      	neglt	r1, r1
 8006d62:	f803 2b02 	strb.w	r2, [r3], #2
 8006d66:	bfb4      	ite	lt
 8006d68:	222d      	movlt	r2, #45	; 0x2d
 8006d6a:	222b      	movge	r2, #43	; 0x2b
 8006d6c:	2909      	cmp	r1, #9
 8006d6e:	7042      	strb	r2, [r0, #1]
 8006d70:	dd2a      	ble.n	8006dc8 <__exponent+0x70>
 8006d72:	f10d 0407 	add.w	r4, sp, #7
 8006d76:	46a4      	mov	ip, r4
 8006d78:	270a      	movs	r7, #10
 8006d7a:	46a6      	mov	lr, r4
 8006d7c:	460a      	mov	r2, r1
 8006d7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d82:	fb07 1516 	mls	r5, r7, r6, r1
 8006d86:	3530      	adds	r5, #48	; 0x30
 8006d88:	2a63      	cmp	r2, #99	; 0x63
 8006d8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d92:	4631      	mov	r1, r6
 8006d94:	dcf1      	bgt.n	8006d7a <__exponent+0x22>
 8006d96:	3130      	adds	r1, #48	; 0x30
 8006d98:	f1ae 0502 	sub.w	r5, lr, #2
 8006d9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006da0:	1c44      	adds	r4, r0, #1
 8006da2:	4629      	mov	r1, r5
 8006da4:	4561      	cmp	r1, ip
 8006da6:	d30a      	bcc.n	8006dbe <__exponent+0x66>
 8006da8:	f10d 0209 	add.w	r2, sp, #9
 8006dac:	eba2 020e 	sub.w	r2, r2, lr
 8006db0:	4565      	cmp	r5, ip
 8006db2:	bf88      	it	hi
 8006db4:	2200      	movhi	r2, #0
 8006db6:	4413      	add	r3, r2
 8006db8:	1a18      	subs	r0, r3, r0
 8006dba:	b003      	add	sp, #12
 8006dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dc6:	e7ed      	b.n	8006da4 <__exponent+0x4c>
 8006dc8:	2330      	movs	r3, #48	; 0x30
 8006dca:	3130      	adds	r1, #48	; 0x30
 8006dcc:	7083      	strb	r3, [r0, #2]
 8006dce:	70c1      	strb	r1, [r0, #3]
 8006dd0:	1d03      	adds	r3, r0, #4
 8006dd2:	e7f1      	b.n	8006db8 <__exponent+0x60>

08006dd4 <_printf_float>:
 8006dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd8:	ed2d 8b02 	vpush	{d8}
 8006ddc:	b08d      	sub	sp, #52	; 0x34
 8006dde:	460c      	mov	r4, r1
 8006de0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006de4:	4616      	mov	r6, r2
 8006de6:	461f      	mov	r7, r3
 8006de8:	4605      	mov	r5, r0
 8006dea:	f002 fe91 	bl	8009b10 <_localeconv_r>
 8006dee:	f8d0 a000 	ldr.w	sl, [r0]
 8006df2:	4650      	mov	r0, sl
 8006df4:	f7f9 f9f4 	bl	80001e0 <strlen>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	9305      	str	r3, [sp, #20]
 8006e00:	f8d8 3000 	ldr.w	r3, [r8]
 8006e04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e08:	3307      	adds	r3, #7
 8006e0a:	f023 0307 	bic.w	r3, r3, #7
 8006e0e:	f103 0208 	add.w	r2, r3, #8
 8006e12:	f8c8 2000 	str.w	r2, [r8]
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e26:	9307      	str	r3, [sp, #28]
 8006e28:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e2c:	ee08 0a10 	vmov	s16, r0
 8006e30:	4b9f      	ldr	r3, [pc, #636]	; (80070b0 <_printf_float+0x2dc>)
 8006e32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e36:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3a:	f7f9 fe7f 	bl	8000b3c <__aeabi_dcmpun>
 8006e3e:	bb88      	cbnz	r0, 8006ea4 <_printf_float+0xd0>
 8006e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e44:	4b9a      	ldr	r3, [pc, #616]	; (80070b0 <_printf_float+0x2dc>)
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	f7f9 fe59 	bl	8000b00 <__aeabi_dcmple>
 8006e4e:	bb48      	cbnz	r0, 8006ea4 <_printf_float+0xd0>
 8006e50:	2200      	movs	r2, #0
 8006e52:	2300      	movs	r3, #0
 8006e54:	4640      	mov	r0, r8
 8006e56:	4649      	mov	r1, r9
 8006e58:	f7f9 fe48 	bl	8000aec <__aeabi_dcmplt>
 8006e5c:	b110      	cbz	r0, 8006e64 <_printf_float+0x90>
 8006e5e:	232d      	movs	r3, #45	; 0x2d
 8006e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e64:	4b93      	ldr	r3, [pc, #588]	; (80070b4 <_printf_float+0x2e0>)
 8006e66:	4894      	ldr	r0, [pc, #592]	; (80070b8 <_printf_float+0x2e4>)
 8006e68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e6c:	bf94      	ite	ls
 8006e6e:	4698      	movls	r8, r3
 8006e70:	4680      	movhi	r8, r0
 8006e72:	2303      	movs	r3, #3
 8006e74:	6123      	str	r3, [r4, #16]
 8006e76:	9b05      	ldr	r3, [sp, #20]
 8006e78:	f023 0204 	bic.w	r2, r3, #4
 8006e7c:	6022      	str	r2, [r4, #0]
 8006e7e:	f04f 0900 	mov.w	r9, #0
 8006e82:	9700      	str	r7, [sp, #0]
 8006e84:	4633      	mov	r3, r6
 8006e86:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 f9d8 	bl	8007240 <_printf_common>
 8006e90:	3001      	adds	r0, #1
 8006e92:	f040 8090 	bne.w	8006fb6 <_printf_float+0x1e2>
 8006e96:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9a:	b00d      	add	sp, #52	; 0x34
 8006e9c:	ecbd 8b02 	vpop	{d8}
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 fe46 	bl	8000b3c <__aeabi_dcmpun>
 8006eb0:	b140      	cbz	r0, 8006ec4 <_printf_float+0xf0>
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bfbc      	itt	lt
 8006eb8:	232d      	movlt	r3, #45	; 0x2d
 8006eba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ebe:	487f      	ldr	r0, [pc, #508]	; (80070bc <_printf_float+0x2e8>)
 8006ec0:	4b7f      	ldr	r3, [pc, #508]	; (80070c0 <_printf_float+0x2ec>)
 8006ec2:	e7d1      	b.n	8006e68 <_printf_float+0x94>
 8006ec4:	6863      	ldr	r3, [r4, #4]
 8006ec6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eca:	9206      	str	r2, [sp, #24]
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	d13f      	bne.n	8006f50 <_printf_float+0x17c>
 8006ed0:	2306      	movs	r3, #6
 8006ed2:	6063      	str	r3, [r4, #4]
 8006ed4:	9b05      	ldr	r3, [sp, #20]
 8006ed6:	6861      	ldr	r1, [r4, #4]
 8006ed8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006edc:	2300      	movs	r3, #0
 8006ede:	9303      	str	r3, [sp, #12]
 8006ee0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ee2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ee6:	ab09      	add	r3, sp, #36	; 0x24
 8006ee8:	ec49 8b10 	vmov	d0, r8, r9
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	6022      	str	r2, [r4, #0]
 8006ef0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f7ff fecd 	bl	8006c94 <__cvt>
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006efe:	2b47      	cmp	r3, #71	; 0x47
 8006f00:	4680      	mov	r8, r0
 8006f02:	d108      	bne.n	8006f16 <_printf_float+0x142>
 8006f04:	1cc8      	adds	r0, r1, #3
 8006f06:	db02      	blt.n	8006f0e <_printf_float+0x13a>
 8006f08:	6863      	ldr	r3, [r4, #4]
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	dd41      	ble.n	8006f92 <_printf_float+0x1be>
 8006f0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f12:	fa5f fb8b 	uxtb.w	fp, fp
 8006f16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f1a:	d820      	bhi.n	8006f5e <_printf_float+0x18a>
 8006f1c:	3901      	subs	r1, #1
 8006f1e:	465a      	mov	r2, fp
 8006f20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f24:	9109      	str	r1, [sp, #36]	; 0x24
 8006f26:	f7ff ff17 	bl	8006d58 <__exponent>
 8006f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f2c:	1813      	adds	r3, r2, r0
 8006f2e:	2a01      	cmp	r2, #1
 8006f30:	4681      	mov	r9, r0
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	dc02      	bgt.n	8006f3c <_printf_float+0x168>
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	07d2      	lsls	r2, r2, #31
 8006f3a:	d501      	bpl.n	8006f40 <_printf_float+0x16c>
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	6123      	str	r3, [r4, #16]
 8006f40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d09c      	beq.n	8006e82 <_printf_float+0xae>
 8006f48:	232d      	movs	r3, #45	; 0x2d
 8006f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f4e:	e798      	b.n	8006e82 <_printf_float+0xae>
 8006f50:	9a06      	ldr	r2, [sp, #24]
 8006f52:	2a47      	cmp	r2, #71	; 0x47
 8006f54:	d1be      	bne.n	8006ed4 <_printf_float+0x100>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1bc      	bne.n	8006ed4 <_printf_float+0x100>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e7b9      	b.n	8006ed2 <_printf_float+0xfe>
 8006f5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f62:	d118      	bne.n	8006f96 <_printf_float+0x1c2>
 8006f64:	2900      	cmp	r1, #0
 8006f66:	6863      	ldr	r3, [r4, #4]
 8006f68:	dd0b      	ble.n	8006f82 <_printf_float+0x1ae>
 8006f6a:	6121      	str	r1, [r4, #16]
 8006f6c:	b913      	cbnz	r3, 8006f74 <_printf_float+0x1a0>
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	07d0      	lsls	r0, r2, #31
 8006f72:	d502      	bpl.n	8006f7a <_printf_float+0x1a6>
 8006f74:	3301      	adds	r3, #1
 8006f76:	440b      	add	r3, r1
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f7c:	f04f 0900 	mov.w	r9, #0
 8006f80:	e7de      	b.n	8006f40 <_printf_float+0x16c>
 8006f82:	b913      	cbnz	r3, 8006f8a <_printf_float+0x1b6>
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	07d2      	lsls	r2, r2, #31
 8006f88:	d501      	bpl.n	8006f8e <_printf_float+0x1ba>
 8006f8a:	3302      	adds	r3, #2
 8006f8c:	e7f4      	b.n	8006f78 <_printf_float+0x1a4>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e7f2      	b.n	8006f78 <_printf_float+0x1a4>
 8006f92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f98:	4299      	cmp	r1, r3
 8006f9a:	db05      	blt.n	8006fa8 <_printf_float+0x1d4>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	6121      	str	r1, [r4, #16]
 8006fa0:	07d8      	lsls	r0, r3, #31
 8006fa2:	d5ea      	bpl.n	8006f7a <_printf_float+0x1a6>
 8006fa4:	1c4b      	adds	r3, r1, #1
 8006fa6:	e7e7      	b.n	8006f78 <_printf_float+0x1a4>
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	bfd4      	ite	le
 8006fac:	f1c1 0202 	rsble	r2, r1, #2
 8006fb0:	2201      	movgt	r2, #1
 8006fb2:	4413      	add	r3, r2
 8006fb4:	e7e0      	b.n	8006f78 <_printf_float+0x1a4>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	055a      	lsls	r2, r3, #21
 8006fba:	d407      	bmi.n	8006fcc <_printf_float+0x1f8>
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	4642      	mov	r2, r8
 8006fc0:	4631      	mov	r1, r6
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	47b8      	blx	r7
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d12c      	bne.n	8007024 <_printf_float+0x250>
 8006fca:	e764      	b.n	8006e96 <_printf_float+0xc2>
 8006fcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fd0:	f240 80e0 	bls.w	8007194 <_printf_float+0x3c0>
 8006fd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f7f9 fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d034      	beq.n	800704e <_printf_float+0x27a>
 8006fe4:	4a37      	ldr	r2, [pc, #220]	; (80070c4 <_printf_float+0x2f0>)
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4628      	mov	r0, r5
 8006fec:	47b8      	blx	r7
 8006fee:	3001      	adds	r0, #1
 8006ff0:	f43f af51 	beq.w	8006e96 <_printf_float+0xc2>
 8006ff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	db02      	blt.n	8007002 <_printf_float+0x22e>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07d8      	lsls	r0, r3, #31
 8007000:	d510      	bpl.n	8007024 <_printf_float+0x250>
 8007002:	ee18 3a10 	vmov	r3, s16
 8007006:	4652      	mov	r2, sl
 8007008:	4631      	mov	r1, r6
 800700a:	4628      	mov	r0, r5
 800700c:	47b8      	blx	r7
 800700e:	3001      	adds	r0, #1
 8007010:	f43f af41 	beq.w	8006e96 <_printf_float+0xc2>
 8007014:	f04f 0800 	mov.w	r8, #0
 8007018:	f104 091a 	add.w	r9, r4, #26
 800701c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800701e:	3b01      	subs	r3, #1
 8007020:	4543      	cmp	r3, r8
 8007022:	dc09      	bgt.n	8007038 <_printf_float+0x264>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	079b      	lsls	r3, r3, #30
 8007028:	f100 8105 	bmi.w	8007236 <_printf_float+0x462>
 800702c:	68e0      	ldr	r0, [r4, #12]
 800702e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007030:	4298      	cmp	r0, r3
 8007032:	bfb8      	it	lt
 8007034:	4618      	movlt	r0, r3
 8007036:	e730      	b.n	8006e9a <_printf_float+0xc6>
 8007038:	2301      	movs	r3, #1
 800703a:	464a      	mov	r2, r9
 800703c:	4631      	mov	r1, r6
 800703e:	4628      	mov	r0, r5
 8007040:	47b8      	blx	r7
 8007042:	3001      	adds	r0, #1
 8007044:	f43f af27 	beq.w	8006e96 <_printf_float+0xc2>
 8007048:	f108 0801 	add.w	r8, r8, #1
 800704c:	e7e6      	b.n	800701c <_printf_float+0x248>
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	dc39      	bgt.n	80070c8 <_printf_float+0x2f4>
 8007054:	4a1b      	ldr	r2, [pc, #108]	; (80070c4 <_printf_float+0x2f0>)
 8007056:	2301      	movs	r3, #1
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	f43f af19 	beq.w	8006e96 <_printf_float+0xc2>
 8007064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007068:	4313      	orrs	r3, r2
 800706a:	d102      	bne.n	8007072 <_printf_float+0x29e>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	07d9      	lsls	r1, r3, #31
 8007070:	d5d8      	bpl.n	8007024 <_printf_float+0x250>
 8007072:	ee18 3a10 	vmov	r3, s16
 8007076:	4652      	mov	r2, sl
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f af09 	beq.w	8006e96 <_printf_float+0xc2>
 8007084:	f04f 0900 	mov.w	r9, #0
 8007088:	f104 0a1a 	add.w	sl, r4, #26
 800708c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708e:	425b      	negs	r3, r3
 8007090:	454b      	cmp	r3, r9
 8007092:	dc01      	bgt.n	8007098 <_printf_float+0x2c4>
 8007094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007096:	e792      	b.n	8006fbe <_printf_float+0x1ea>
 8007098:	2301      	movs	r3, #1
 800709a:	4652      	mov	r2, sl
 800709c:	4631      	mov	r1, r6
 800709e:	4628      	mov	r0, r5
 80070a0:	47b8      	blx	r7
 80070a2:	3001      	adds	r0, #1
 80070a4:	f43f aef7 	beq.w	8006e96 <_printf_float+0xc2>
 80070a8:	f109 0901 	add.w	r9, r9, #1
 80070ac:	e7ee      	b.n	800708c <_printf_float+0x2b8>
 80070ae:	bf00      	nop
 80070b0:	7fefffff 	.word	0x7fefffff
 80070b4:	0800b558 	.word	0x0800b558
 80070b8:	0800b55c 	.word	0x0800b55c
 80070bc:	0800b564 	.word	0x0800b564
 80070c0:	0800b560 	.word	0x0800b560
 80070c4:	0800b568 	.word	0x0800b568
 80070c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070cc:	429a      	cmp	r2, r3
 80070ce:	bfa8      	it	ge
 80070d0:	461a      	movge	r2, r3
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	4691      	mov	r9, r2
 80070d6:	dc37      	bgt.n	8007148 <_printf_float+0x374>
 80070d8:	f04f 0b00 	mov.w	fp, #0
 80070dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070e0:	f104 021a 	add.w	r2, r4, #26
 80070e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070e6:	9305      	str	r3, [sp, #20]
 80070e8:	eba3 0309 	sub.w	r3, r3, r9
 80070ec:	455b      	cmp	r3, fp
 80070ee:	dc33      	bgt.n	8007158 <_printf_float+0x384>
 80070f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f4:	429a      	cmp	r2, r3
 80070f6:	db3b      	blt.n	8007170 <_printf_float+0x39c>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	07da      	lsls	r2, r3, #31
 80070fc:	d438      	bmi.n	8007170 <_printf_float+0x39c>
 80070fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007100:	9b05      	ldr	r3, [sp, #20]
 8007102:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	eba2 0901 	sub.w	r9, r2, r1
 800710a:	4599      	cmp	r9, r3
 800710c:	bfa8      	it	ge
 800710e:	4699      	movge	r9, r3
 8007110:	f1b9 0f00 	cmp.w	r9, #0
 8007114:	dc35      	bgt.n	8007182 <_printf_float+0x3ae>
 8007116:	f04f 0800 	mov.w	r8, #0
 800711a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800711e:	f104 0a1a 	add.w	sl, r4, #26
 8007122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	eba3 0309 	sub.w	r3, r3, r9
 800712c:	4543      	cmp	r3, r8
 800712e:	f77f af79 	ble.w	8007024 <_printf_float+0x250>
 8007132:	2301      	movs	r3, #1
 8007134:	4652      	mov	r2, sl
 8007136:	4631      	mov	r1, r6
 8007138:	4628      	mov	r0, r5
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	f43f aeaa 	beq.w	8006e96 <_printf_float+0xc2>
 8007142:	f108 0801 	add.w	r8, r8, #1
 8007146:	e7ec      	b.n	8007122 <_printf_float+0x34e>
 8007148:	4613      	mov	r3, r2
 800714a:	4631      	mov	r1, r6
 800714c:	4642      	mov	r2, r8
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	d1c0      	bne.n	80070d8 <_printf_float+0x304>
 8007156:	e69e      	b.n	8006e96 <_printf_float+0xc2>
 8007158:	2301      	movs	r3, #1
 800715a:	4631      	mov	r1, r6
 800715c:	4628      	mov	r0, r5
 800715e:	9205      	str	r2, [sp, #20]
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	f43f ae97 	beq.w	8006e96 <_printf_float+0xc2>
 8007168:	9a05      	ldr	r2, [sp, #20]
 800716a:	f10b 0b01 	add.w	fp, fp, #1
 800716e:	e7b9      	b.n	80070e4 <_printf_float+0x310>
 8007170:	ee18 3a10 	vmov	r3, s16
 8007174:	4652      	mov	r2, sl
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	d1be      	bne.n	80070fe <_printf_float+0x32a>
 8007180:	e689      	b.n	8006e96 <_printf_float+0xc2>
 8007182:	9a05      	ldr	r2, [sp, #20]
 8007184:	464b      	mov	r3, r9
 8007186:	4442      	add	r2, r8
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	d1c1      	bne.n	8007116 <_printf_float+0x342>
 8007192:	e680      	b.n	8006e96 <_printf_float+0xc2>
 8007194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007196:	2a01      	cmp	r2, #1
 8007198:	dc01      	bgt.n	800719e <_printf_float+0x3ca>
 800719a:	07db      	lsls	r3, r3, #31
 800719c:	d538      	bpl.n	8007210 <_printf_float+0x43c>
 800719e:	2301      	movs	r3, #1
 80071a0:	4642      	mov	r2, r8
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b8      	blx	r7
 80071a8:	3001      	adds	r0, #1
 80071aa:	f43f ae74 	beq.w	8006e96 <_printf_float+0xc2>
 80071ae:	ee18 3a10 	vmov	r3, s16
 80071b2:	4652      	mov	r2, sl
 80071b4:	4631      	mov	r1, r6
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b8      	blx	r7
 80071ba:	3001      	adds	r0, #1
 80071bc:	f43f ae6b 	beq.w	8006e96 <_printf_float+0xc2>
 80071c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071c4:	2200      	movs	r2, #0
 80071c6:	2300      	movs	r3, #0
 80071c8:	f7f9 fc86 	bl	8000ad8 <__aeabi_dcmpeq>
 80071cc:	b9d8      	cbnz	r0, 8007206 <_printf_float+0x432>
 80071ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d0:	f108 0201 	add.w	r2, r8, #1
 80071d4:	3b01      	subs	r3, #1
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	d10e      	bne.n	80071fe <_printf_float+0x42a>
 80071e0:	e659      	b.n	8006e96 <_printf_float+0xc2>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4652      	mov	r2, sl
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	f43f ae52 	beq.w	8006e96 <_printf_float+0xc2>
 80071f2:	f108 0801 	add.w	r8, r8, #1
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	3b01      	subs	r3, #1
 80071fa:	4543      	cmp	r3, r8
 80071fc:	dcf1      	bgt.n	80071e2 <_printf_float+0x40e>
 80071fe:	464b      	mov	r3, r9
 8007200:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007204:	e6dc      	b.n	8006fc0 <_printf_float+0x1ec>
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	f104 0a1a 	add.w	sl, r4, #26
 800720e:	e7f2      	b.n	80071f6 <_printf_float+0x422>
 8007210:	2301      	movs	r3, #1
 8007212:	4642      	mov	r2, r8
 8007214:	e7df      	b.n	80071d6 <_printf_float+0x402>
 8007216:	2301      	movs	r3, #1
 8007218:	464a      	mov	r2, r9
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	f43f ae38 	beq.w	8006e96 <_printf_float+0xc2>
 8007226:	f108 0801 	add.w	r8, r8, #1
 800722a:	68e3      	ldr	r3, [r4, #12]
 800722c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800722e:	1a5b      	subs	r3, r3, r1
 8007230:	4543      	cmp	r3, r8
 8007232:	dcf0      	bgt.n	8007216 <_printf_float+0x442>
 8007234:	e6fa      	b.n	800702c <_printf_float+0x258>
 8007236:	f04f 0800 	mov.w	r8, #0
 800723a:	f104 0919 	add.w	r9, r4, #25
 800723e:	e7f4      	b.n	800722a <_printf_float+0x456>

08007240 <_printf_common>:
 8007240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007244:	4616      	mov	r6, r2
 8007246:	4699      	mov	r9, r3
 8007248:	688a      	ldr	r2, [r1, #8]
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007250:	4293      	cmp	r3, r2
 8007252:	bfb8      	it	lt
 8007254:	4613      	movlt	r3, r2
 8007256:	6033      	str	r3, [r6, #0]
 8007258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800725c:	4607      	mov	r7, r0
 800725e:	460c      	mov	r4, r1
 8007260:	b10a      	cbz	r2, 8007266 <_printf_common+0x26>
 8007262:	3301      	adds	r3, #1
 8007264:	6033      	str	r3, [r6, #0]
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	0699      	lsls	r1, r3, #26
 800726a:	bf42      	ittt	mi
 800726c:	6833      	ldrmi	r3, [r6, #0]
 800726e:	3302      	addmi	r3, #2
 8007270:	6033      	strmi	r3, [r6, #0]
 8007272:	6825      	ldr	r5, [r4, #0]
 8007274:	f015 0506 	ands.w	r5, r5, #6
 8007278:	d106      	bne.n	8007288 <_printf_common+0x48>
 800727a:	f104 0a19 	add.w	sl, r4, #25
 800727e:	68e3      	ldr	r3, [r4, #12]
 8007280:	6832      	ldr	r2, [r6, #0]
 8007282:	1a9b      	subs	r3, r3, r2
 8007284:	42ab      	cmp	r3, r5
 8007286:	dc26      	bgt.n	80072d6 <_printf_common+0x96>
 8007288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800728c:	1e13      	subs	r3, r2, #0
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	bf18      	it	ne
 8007292:	2301      	movne	r3, #1
 8007294:	0692      	lsls	r2, r2, #26
 8007296:	d42b      	bmi.n	80072f0 <_printf_common+0xb0>
 8007298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800729c:	4649      	mov	r1, r9
 800729e:	4638      	mov	r0, r7
 80072a0:	47c0      	blx	r8
 80072a2:	3001      	adds	r0, #1
 80072a4:	d01e      	beq.n	80072e4 <_printf_common+0xa4>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	68e5      	ldr	r5, [r4, #12]
 80072aa:	6832      	ldr	r2, [r6, #0]
 80072ac:	f003 0306 	and.w	r3, r3, #6
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	bf08      	it	eq
 80072b4:	1aad      	subeq	r5, r5, r2
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	6922      	ldr	r2, [r4, #16]
 80072ba:	bf0c      	ite	eq
 80072bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c0:	2500      	movne	r5, #0
 80072c2:	4293      	cmp	r3, r2
 80072c4:	bfc4      	itt	gt
 80072c6:	1a9b      	subgt	r3, r3, r2
 80072c8:	18ed      	addgt	r5, r5, r3
 80072ca:	2600      	movs	r6, #0
 80072cc:	341a      	adds	r4, #26
 80072ce:	42b5      	cmp	r5, r6
 80072d0:	d11a      	bne.n	8007308 <_printf_common+0xc8>
 80072d2:	2000      	movs	r0, #0
 80072d4:	e008      	b.n	80072e8 <_printf_common+0xa8>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4652      	mov	r2, sl
 80072da:	4649      	mov	r1, r9
 80072dc:	4638      	mov	r0, r7
 80072de:	47c0      	blx	r8
 80072e0:	3001      	adds	r0, #1
 80072e2:	d103      	bne.n	80072ec <_printf_common+0xac>
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ec:	3501      	adds	r5, #1
 80072ee:	e7c6      	b.n	800727e <_printf_common+0x3e>
 80072f0:	18e1      	adds	r1, r4, r3
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	2030      	movs	r0, #48	; 0x30
 80072f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072fa:	4422      	add	r2, r4
 80072fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007304:	3302      	adds	r3, #2
 8007306:	e7c7      	b.n	8007298 <_printf_common+0x58>
 8007308:	2301      	movs	r3, #1
 800730a:	4622      	mov	r2, r4
 800730c:	4649      	mov	r1, r9
 800730e:	4638      	mov	r0, r7
 8007310:	47c0      	blx	r8
 8007312:	3001      	adds	r0, #1
 8007314:	d0e6      	beq.n	80072e4 <_printf_common+0xa4>
 8007316:	3601      	adds	r6, #1
 8007318:	e7d9      	b.n	80072ce <_printf_common+0x8e>
	...

0800731c <_printf_i>:
 800731c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	460c      	mov	r4, r1
 8007322:	4691      	mov	r9, r2
 8007324:	7e27      	ldrb	r7, [r4, #24]
 8007326:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007328:	2f78      	cmp	r7, #120	; 0x78
 800732a:	4680      	mov	r8, r0
 800732c:	469a      	mov	sl, r3
 800732e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007332:	d807      	bhi.n	8007344 <_printf_i+0x28>
 8007334:	2f62      	cmp	r7, #98	; 0x62
 8007336:	d80a      	bhi.n	800734e <_printf_i+0x32>
 8007338:	2f00      	cmp	r7, #0
 800733a:	f000 80d8 	beq.w	80074ee <_printf_i+0x1d2>
 800733e:	2f58      	cmp	r7, #88	; 0x58
 8007340:	f000 80a3 	beq.w	800748a <_printf_i+0x16e>
 8007344:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800734c:	e03a      	b.n	80073c4 <_printf_i+0xa8>
 800734e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007352:	2b15      	cmp	r3, #21
 8007354:	d8f6      	bhi.n	8007344 <_printf_i+0x28>
 8007356:	a001      	add	r0, pc, #4	; (adr r0, 800735c <_printf_i+0x40>)
 8007358:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800735c:	080073b5 	.word	0x080073b5
 8007360:	080073c9 	.word	0x080073c9
 8007364:	08007345 	.word	0x08007345
 8007368:	08007345 	.word	0x08007345
 800736c:	08007345 	.word	0x08007345
 8007370:	08007345 	.word	0x08007345
 8007374:	080073c9 	.word	0x080073c9
 8007378:	08007345 	.word	0x08007345
 800737c:	08007345 	.word	0x08007345
 8007380:	08007345 	.word	0x08007345
 8007384:	08007345 	.word	0x08007345
 8007388:	080074d5 	.word	0x080074d5
 800738c:	080073f9 	.word	0x080073f9
 8007390:	080074b7 	.word	0x080074b7
 8007394:	08007345 	.word	0x08007345
 8007398:	08007345 	.word	0x08007345
 800739c:	080074f7 	.word	0x080074f7
 80073a0:	08007345 	.word	0x08007345
 80073a4:	080073f9 	.word	0x080073f9
 80073a8:	08007345 	.word	0x08007345
 80073ac:	08007345 	.word	0x08007345
 80073b0:	080074bf 	.word	0x080074bf
 80073b4:	680b      	ldr	r3, [r1, #0]
 80073b6:	1d1a      	adds	r2, r3, #4
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	600a      	str	r2, [r1, #0]
 80073bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c4:	2301      	movs	r3, #1
 80073c6:	e0a3      	b.n	8007510 <_printf_i+0x1f4>
 80073c8:	6825      	ldr	r5, [r4, #0]
 80073ca:	6808      	ldr	r0, [r1, #0]
 80073cc:	062e      	lsls	r6, r5, #24
 80073ce:	f100 0304 	add.w	r3, r0, #4
 80073d2:	d50a      	bpl.n	80073ea <_printf_i+0xce>
 80073d4:	6805      	ldr	r5, [r0, #0]
 80073d6:	600b      	str	r3, [r1, #0]
 80073d8:	2d00      	cmp	r5, #0
 80073da:	da03      	bge.n	80073e4 <_printf_i+0xc8>
 80073dc:	232d      	movs	r3, #45	; 0x2d
 80073de:	426d      	negs	r5, r5
 80073e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e4:	485e      	ldr	r0, [pc, #376]	; (8007560 <_printf_i+0x244>)
 80073e6:	230a      	movs	r3, #10
 80073e8:	e019      	b.n	800741e <_printf_i+0x102>
 80073ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073ee:	6805      	ldr	r5, [r0, #0]
 80073f0:	600b      	str	r3, [r1, #0]
 80073f2:	bf18      	it	ne
 80073f4:	b22d      	sxthne	r5, r5
 80073f6:	e7ef      	b.n	80073d8 <_printf_i+0xbc>
 80073f8:	680b      	ldr	r3, [r1, #0]
 80073fa:	6825      	ldr	r5, [r4, #0]
 80073fc:	1d18      	adds	r0, r3, #4
 80073fe:	6008      	str	r0, [r1, #0]
 8007400:	0628      	lsls	r0, r5, #24
 8007402:	d501      	bpl.n	8007408 <_printf_i+0xec>
 8007404:	681d      	ldr	r5, [r3, #0]
 8007406:	e002      	b.n	800740e <_printf_i+0xf2>
 8007408:	0669      	lsls	r1, r5, #25
 800740a:	d5fb      	bpl.n	8007404 <_printf_i+0xe8>
 800740c:	881d      	ldrh	r5, [r3, #0]
 800740e:	4854      	ldr	r0, [pc, #336]	; (8007560 <_printf_i+0x244>)
 8007410:	2f6f      	cmp	r7, #111	; 0x6f
 8007412:	bf0c      	ite	eq
 8007414:	2308      	moveq	r3, #8
 8007416:	230a      	movne	r3, #10
 8007418:	2100      	movs	r1, #0
 800741a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800741e:	6866      	ldr	r6, [r4, #4]
 8007420:	60a6      	str	r6, [r4, #8]
 8007422:	2e00      	cmp	r6, #0
 8007424:	bfa2      	ittt	ge
 8007426:	6821      	ldrge	r1, [r4, #0]
 8007428:	f021 0104 	bicge.w	r1, r1, #4
 800742c:	6021      	strge	r1, [r4, #0]
 800742e:	b90d      	cbnz	r5, 8007434 <_printf_i+0x118>
 8007430:	2e00      	cmp	r6, #0
 8007432:	d04d      	beq.n	80074d0 <_printf_i+0x1b4>
 8007434:	4616      	mov	r6, r2
 8007436:	fbb5 f1f3 	udiv	r1, r5, r3
 800743a:	fb03 5711 	mls	r7, r3, r1, r5
 800743e:	5dc7      	ldrb	r7, [r0, r7]
 8007440:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007444:	462f      	mov	r7, r5
 8007446:	42bb      	cmp	r3, r7
 8007448:	460d      	mov	r5, r1
 800744a:	d9f4      	bls.n	8007436 <_printf_i+0x11a>
 800744c:	2b08      	cmp	r3, #8
 800744e:	d10b      	bne.n	8007468 <_printf_i+0x14c>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	07df      	lsls	r7, r3, #31
 8007454:	d508      	bpl.n	8007468 <_printf_i+0x14c>
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	6861      	ldr	r1, [r4, #4]
 800745a:	4299      	cmp	r1, r3
 800745c:	bfde      	ittt	le
 800745e:	2330      	movle	r3, #48	; 0x30
 8007460:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007464:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007468:	1b92      	subs	r2, r2, r6
 800746a:	6122      	str	r2, [r4, #16]
 800746c:	f8cd a000 	str.w	sl, [sp]
 8007470:	464b      	mov	r3, r9
 8007472:	aa03      	add	r2, sp, #12
 8007474:	4621      	mov	r1, r4
 8007476:	4640      	mov	r0, r8
 8007478:	f7ff fee2 	bl	8007240 <_printf_common>
 800747c:	3001      	adds	r0, #1
 800747e:	d14c      	bne.n	800751a <_printf_i+0x1fe>
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	b004      	add	sp, #16
 8007486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748a:	4835      	ldr	r0, [pc, #212]	; (8007560 <_printf_i+0x244>)
 800748c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	680e      	ldr	r6, [r1, #0]
 8007494:	061f      	lsls	r7, r3, #24
 8007496:	f856 5b04 	ldr.w	r5, [r6], #4
 800749a:	600e      	str	r6, [r1, #0]
 800749c:	d514      	bpl.n	80074c8 <_printf_i+0x1ac>
 800749e:	07d9      	lsls	r1, r3, #31
 80074a0:	bf44      	itt	mi
 80074a2:	f043 0320 	orrmi.w	r3, r3, #32
 80074a6:	6023      	strmi	r3, [r4, #0]
 80074a8:	b91d      	cbnz	r5, 80074b2 <_printf_i+0x196>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	f023 0320 	bic.w	r3, r3, #32
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	2310      	movs	r3, #16
 80074b4:	e7b0      	b.n	8007418 <_printf_i+0xfc>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f043 0320 	orr.w	r3, r3, #32
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	2378      	movs	r3, #120	; 0x78
 80074c0:	4828      	ldr	r0, [pc, #160]	; (8007564 <_printf_i+0x248>)
 80074c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074c6:	e7e3      	b.n	8007490 <_printf_i+0x174>
 80074c8:	065e      	lsls	r6, r3, #25
 80074ca:	bf48      	it	mi
 80074cc:	b2ad      	uxthmi	r5, r5
 80074ce:	e7e6      	b.n	800749e <_printf_i+0x182>
 80074d0:	4616      	mov	r6, r2
 80074d2:	e7bb      	b.n	800744c <_printf_i+0x130>
 80074d4:	680b      	ldr	r3, [r1, #0]
 80074d6:	6826      	ldr	r6, [r4, #0]
 80074d8:	6960      	ldr	r0, [r4, #20]
 80074da:	1d1d      	adds	r5, r3, #4
 80074dc:	600d      	str	r5, [r1, #0]
 80074de:	0635      	lsls	r5, r6, #24
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	d501      	bpl.n	80074e8 <_printf_i+0x1cc>
 80074e4:	6018      	str	r0, [r3, #0]
 80074e6:	e002      	b.n	80074ee <_printf_i+0x1d2>
 80074e8:	0671      	lsls	r1, r6, #25
 80074ea:	d5fb      	bpl.n	80074e4 <_printf_i+0x1c8>
 80074ec:	8018      	strh	r0, [r3, #0]
 80074ee:	2300      	movs	r3, #0
 80074f0:	6123      	str	r3, [r4, #16]
 80074f2:	4616      	mov	r6, r2
 80074f4:	e7ba      	b.n	800746c <_printf_i+0x150>
 80074f6:	680b      	ldr	r3, [r1, #0]
 80074f8:	1d1a      	adds	r2, r3, #4
 80074fa:	600a      	str	r2, [r1, #0]
 80074fc:	681e      	ldr	r6, [r3, #0]
 80074fe:	6862      	ldr	r2, [r4, #4]
 8007500:	2100      	movs	r1, #0
 8007502:	4630      	mov	r0, r6
 8007504:	f7f8 fe74 	bl	80001f0 <memchr>
 8007508:	b108      	cbz	r0, 800750e <_printf_i+0x1f2>
 800750a:	1b80      	subs	r0, r0, r6
 800750c:	6060      	str	r0, [r4, #4]
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	6123      	str	r3, [r4, #16]
 8007512:	2300      	movs	r3, #0
 8007514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007518:	e7a8      	b.n	800746c <_printf_i+0x150>
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	4632      	mov	r2, r6
 800751e:	4649      	mov	r1, r9
 8007520:	4640      	mov	r0, r8
 8007522:	47d0      	blx	sl
 8007524:	3001      	adds	r0, #1
 8007526:	d0ab      	beq.n	8007480 <_printf_i+0x164>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	079b      	lsls	r3, r3, #30
 800752c:	d413      	bmi.n	8007556 <_printf_i+0x23a>
 800752e:	68e0      	ldr	r0, [r4, #12]
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	4298      	cmp	r0, r3
 8007534:	bfb8      	it	lt
 8007536:	4618      	movlt	r0, r3
 8007538:	e7a4      	b.n	8007484 <_printf_i+0x168>
 800753a:	2301      	movs	r3, #1
 800753c:	4632      	mov	r2, r6
 800753e:	4649      	mov	r1, r9
 8007540:	4640      	mov	r0, r8
 8007542:	47d0      	blx	sl
 8007544:	3001      	adds	r0, #1
 8007546:	d09b      	beq.n	8007480 <_printf_i+0x164>
 8007548:	3501      	adds	r5, #1
 800754a:	68e3      	ldr	r3, [r4, #12]
 800754c:	9903      	ldr	r1, [sp, #12]
 800754e:	1a5b      	subs	r3, r3, r1
 8007550:	42ab      	cmp	r3, r5
 8007552:	dcf2      	bgt.n	800753a <_printf_i+0x21e>
 8007554:	e7eb      	b.n	800752e <_printf_i+0x212>
 8007556:	2500      	movs	r5, #0
 8007558:	f104 0619 	add.w	r6, r4, #25
 800755c:	e7f5      	b.n	800754a <_printf_i+0x22e>
 800755e:	bf00      	nop
 8007560:	0800b56a 	.word	0x0800b56a
 8007564:	0800b57b 	.word	0x0800b57b

08007568 <_scanf_float>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	b087      	sub	sp, #28
 800756e:	4617      	mov	r7, r2
 8007570:	9303      	str	r3, [sp, #12]
 8007572:	688b      	ldr	r3, [r1, #8]
 8007574:	1e5a      	subs	r2, r3, #1
 8007576:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800757a:	bf83      	ittte	hi
 800757c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007580:	195b      	addhi	r3, r3, r5
 8007582:	9302      	strhi	r3, [sp, #8]
 8007584:	2300      	movls	r3, #0
 8007586:	bf86      	itte	hi
 8007588:	f240 135d 	movwhi	r3, #349	; 0x15d
 800758c:	608b      	strhi	r3, [r1, #8]
 800758e:	9302      	strls	r3, [sp, #8]
 8007590:	680b      	ldr	r3, [r1, #0]
 8007592:	468b      	mov	fp, r1
 8007594:	2500      	movs	r5, #0
 8007596:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800759a:	f84b 3b1c 	str.w	r3, [fp], #28
 800759e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075a2:	4680      	mov	r8, r0
 80075a4:	460c      	mov	r4, r1
 80075a6:	465e      	mov	r6, fp
 80075a8:	46aa      	mov	sl, r5
 80075aa:	46a9      	mov	r9, r5
 80075ac:	9501      	str	r5, [sp, #4]
 80075ae:	68a2      	ldr	r2, [r4, #8]
 80075b0:	b152      	cbz	r2, 80075c8 <_scanf_float+0x60>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b4e      	cmp	r3, #78	; 0x4e
 80075b8:	d864      	bhi.n	8007684 <_scanf_float+0x11c>
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d83c      	bhi.n	8007638 <_scanf_float+0xd0>
 80075be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80075c2:	b2c8      	uxtb	r0, r1
 80075c4:	280e      	cmp	r0, #14
 80075c6:	d93a      	bls.n	800763e <_scanf_float+0xd6>
 80075c8:	f1b9 0f00 	cmp.w	r9, #0
 80075cc:	d003      	beq.n	80075d6 <_scanf_float+0x6e>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075da:	f1ba 0f01 	cmp.w	sl, #1
 80075de:	f200 8113 	bhi.w	8007808 <_scanf_float+0x2a0>
 80075e2:	455e      	cmp	r6, fp
 80075e4:	f200 8105 	bhi.w	80077f2 <_scanf_float+0x28a>
 80075e8:	2501      	movs	r5, #1
 80075ea:	4628      	mov	r0, r5
 80075ec:	b007      	add	sp, #28
 80075ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80075f6:	2a0d      	cmp	r2, #13
 80075f8:	d8e6      	bhi.n	80075c8 <_scanf_float+0x60>
 80075fa:	a101      	add	r1, pc, #4	; (adr r1, 8007600 <_scanf_float+0x98>)
 80075fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007600:	0800773f 	.word	0x0800773f
 8007604:	080075c9 	.word	0x080075c9
 8007608:	080075c9 	.word	0x080075c9
 800760c:	080075c9 	.word	0x080075c9
 8007610:	0800779f 	.word	0x0800779f
 8007614:	08007777 	.word	0x08007777
 8007618:	080075c9 	.word	0x080075c9
 800761c:	080075c9 	.word	0x080075c9
 8007620:	0800774d 	.word	0x0800774d
 8007624:	080075c9 	.word	0x080075c9
 8007628:	080075c9 	.word	0x080075c9
 800762c:	080075c9 	.word	0x080075c9
 8007630:	080075c9 	.word	0x080075c9
 8007634:	08007705 	.word	0x08007705
 8007638:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800763c:	e7db      	b.n	80075f6 <_scanf_float+0x8e>
 800763e:	290e      	cmp	r1, #14
 8007640:	d8c2      	bhi.n	80075c8 <_scanf_float+0x60>
 8007642:	a001      	add	r0, pc, #4	; (adr r0, 8007648 <_scanf_float+0xe0>)
 8007644:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007648:	080076f7 	.word	0x080076f7
 800764c:	080075c9 	.word	0x080075c9
 8007650:	080076f7 	.word	0x080076f7
 8007654:	0800778b 	.word	0x0800778b
 8007658:	080075c9 	.word	0x080075c9
 800765c:	080076a5 	.word	0x080076a5
 8007660:	080076e1 	.word	0x080076e1
 8007664:	080076e1 	.word	0x080076e1
 8007668:	080076e1 	.word	0x080076e1
 800766c:	080076e1 	.word	0x080076e1
 8007670:	080076e1 	.word	0x080076e1
 8007674:	080076e1 	.word	0x080076e1
 8007678:	080076e1 	.word	0x080076e1
 800767c:	080076e1 	.word	0x080076e1
 8007680:	080076e1 	.word	0x080076e1
 8007684:	2b6e      	cmp	r3, #110	; 0x6e
 8007686:	d809      	bhi.n	800769c <_scanf_float+0x134>
 8007688:	2b60      	cmp	r3, #96	; 0x60
 800768a:	d8b2      	bhi.n	80075f2 <_scanf_float+0x8a>
 800768c:	2b54      	cmp	r3, #84	; 0x54
 800768e:	d077      	beq.n	8007780 <_scanf_float+0x218>
 8007690:	2b59      	cmp	r3, #89	; 0x59
 8007692:	d199      	bne.n	80075c8 <_scanf_float+0x60>
 8007694:	2d07      	cmp	r5, #7
 8007696:	d197      	bne.n	80075c8 <_scanf_float+0x60>
 8007698:	2508      	movs	r5, #8
 800769a:	e029      	b.n	80076f0 <_scanf_float+0x188>
 800769c:	2b74      	cmp	r3, #116	; 0x74
 800769e:	d06f      	beq.n	8007780 <_scanf_float+0x218>
 80076a0:	2b79      	cmp	r3, #121	; 0x79
 80076a2:	e7f6      	b.n	8007692 <_scanf_float+0x12a>
 80076a4:	6821      	ldr	r1, [r4, #0]
 80076a6:	05c8      	lsls	r0, r1, #23
 80076a8:	d51a      	bpl.n	80076e0 <_scanf_float+0x178>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076b0:	6021      	str	r1, [r4, #0]
 80076b2:	f109 0901 	add.w	r9, r9, #1
 80076b6:	b11b      	cbz	r3, 80076c0 <_scanf_float+0x158>
 80076b8:	3b01      	subs	r3, #1
 80076ba:	3201      	adds	r2, #1
 80076bc:	9302      	str	r3, [sp, #8]
 80076be:	60a2      	str	r2, [r4, #8]
 80076c0:	68a3      	ldr	r3, [r4, #8]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	60a3      	str	r3, [r4, #8]
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	3301      	adds	r3, #1
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	f340 8084 	ble.w	80077e0 <_scanf_float+0x278>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	603b      	str	r3, [r7, #0]
 80076de:	e766      	b.n	80075ae <_scanf_float+0x46>
 80076e0:	eb1a 0f05 	cmn.w	sl, r5
 80076e4:	f47f af70 	bne.w	80075c8 <_scanf_float+0x60>
 80076e8:	6822      	ldr	r2, [r4, #0]
 80076ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80076ee:	6022      	str	r2, [r4, #0]
 80076f0:	f806 3b01 	strb.w	r3, [r6], #1
 80076f4:	e7e4      	b.n	80076c0 <_scanf_float+0x158>
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	0610      	lsls	r0, r2, #24
 80076fa:	f57f af65 	bpl.w	80075c8 <_scanf_float+0x60>
 80076fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007702:	e7f4      	b.n	80076ee <_scanf_float+0x186>
 8007704:	f1ba 0f00 	cmp.w	sl, #0
 8007708:	d10e      	bne.n	8007728 <_scanf_float+0x1c0>
 800770a:	f1b9 0f00 	cmp.w	r9, #0
 800770e:	d10e      	bne.n	800772e <_scanf_float+0x1c6>
 8007710:	6822      	ldr	r2, [r4, #0]
 8007712:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007716:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800771a:	d108      	bne.n	800772e <_scanf_float+0x1c6>
 800771c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007720:	6022      	str	r2, [r4, #0]
 8007722:	f04f 0a01 	mov.w	sl, #1
 8007726:	e7e3      	b.n	80076f0 <_scanf_float+0x188>
 8007728:	f1ba 0f02 	cmp.w	sl, #2
 800772c:	d055      	beq.n	80077da <_scanf_float+0x272>
 800772e:	2d01      	cmp	r5, #1
 8007730:	d002      	beq.n	8007738 <_scanf_float+0x1d0>
 8007732:	2d04      	cmp	r5, #4
 8007734:	f47f af48 	bne.w	80075c8 <_scanf_float+0x60>
 8007738:	3501      	adds	r5, #1
 800773a:	b2ed      	uxtb	r5, r5
 800773c:	e7d8      	b.n	80076f0 <_scanf_float+0x188>
 800773e:	f1ba 0f01 	cmp.w	sl, #1
 8007742:	f47f af41 	bne.w	80075c8 <_scanf_float+0x60>
 8007746:	f04f 0a02 	mov.w	sl, #2
 800774a:	e7d1      	b.n	80076f0 <_scanf_float+0x188>
 800774c:	b97d      	cbnz	r5, 800776e <_scanf_float+0x206>
 800774e:	f1b9 0f00 	cmp.w	r9, #0
 8007752:	f47f af3c 	bne.w	80075ce <_scanf_float+0x66>
 8007756:	6822      	ldr	r2, [r4, #0]
 8007758:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800775c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007760:	f47f af39 	bne.w	80075d6 <_scanf_float+0x6e>
 8007764:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007768:	6022      	str	r2, [r4, #0]
 800776a:	2501      	movs	r5, #1
 800776c:	e7c0      	b.n	80076f0 <_scanf_float+0x188>
 800776e:	2d03      	cmp	r5, #3
 8007770:	d0e2      	beq.n	8007738 <_scanf_float+0x1d0>
 8007772:	2d05      	cmp	r5, #5
 8007774:	e7de      	b.n	8007734 <_scanf_float+0x1cc>
 8007776:	2d02      	cmp	r5, #2
 8007778:	f47f af26 	bne.w	80075c8 <_scanf_float+0x60>
 800777c:	2503      	movs	r5, #3
 800777e:	e7b7      	b.n	80076f0 <_scanf_float+0x188>
 8007780:	2d06      	cmp	r5, #6
 8007782:	f47f af21 	bne.w	80075c8 <_scanf_float+0x60>
 8007786:	2507      	movs	r5, #7
 8007788:	e7b2      	b.n	80076f0 <_scanf_float+0x188>
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	0591      	lsls	r1, r2, #22
 800778e:	f57f af1b 	bpl.w	80075c8 <_scanf_float+0x60>
 8007792:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007796:	6022      	str	r2, [r4, #0]
 8007798:	f8cd 9004 	str.w	r9, [sp, #4]
 800779c:	e7a8      	b.n	80076f0 <_scanf_float+0x188>
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80077a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077a8:	d006      	beq.n	80077b8 <_scanf_float+0x250>
 80077aa:	0550      	lsls	r0, r2, #21
 80077ac:	f57f af0c 	bpl.w	80075c8 <_scanf_float+0x60>
 80077b0:	f1b9 0f00 	cmp.w	r9, #0
 80077b4:	f43f af0f 	beq.w	80075d6 <_scanf_float+0x6e>
 80077b8:	0591      	lsls	r1, r2, #22
 80077ba:	bf58      	it	pl
 80077bc:	9901      	ldrpl	r1, [sp, #4]
 80077be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077c2:	bf58      	it	pl
 80077c4:	eba9 0101 	subpl.w	r1, r9, r1
 80077c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80077cc:	bf58      	it	pl
 80077ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077d2:	6022      	str	r2, [r4, #0]
 80077d4:	f04f 0900 	mov.w	r9, #0
 80077d8:	e78a      	b.n	80076f0 <_scanf_float+0x188>
 80077da:	f04f 0a03 	mov.w	sl, #3
 80077de:	e787      	b.n	80076f0 <_scanf_float+0x188>
 80077e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077e4:	4639      	mov	r1, r7
 80077e6:	4640      	mov	r0, r8
 80077e8:	4798      	blx	r3
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f43f aedf 	beq.w	80075ae <_scanf_float+0x46>
 80077f0:	e6ea      	b.n	80075c8 <_scanf_float+0x60>
 80077f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077fa:	463a      	mov	r2, r7
 80077fc:	4640      	mov	r0, r8
 80077fe:	4798      	blx	r3
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	3b01      	subs	r3, #1
 8007804:	6123      	str	r3, [r4, #16]
 8007806:	e6ec      	b.n	80075e2 <_scanf_float+0x7a>
 8007808:	1e6b      	subs	r3, r5, #1
 800780a:	2b06      	cmp	r3, #6
 800780c:	d825      	bhi.n	800785a <_scanf_float+0x2f2>
 800780e:	2d02      	cmp	r5, #2
 8007810:	d836      	bhi.n	8007880 <_scanf_float+0x318>
 8007812:	455e      	cmp	r6, fp
 8007814:	f67f aee8 	bls.w	80075e8 <_scanf_float+0x80>
 8007818:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800781c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007820:	463a      	mov	r2, r7
 8007822:	4640      	mov	r0, r8
 8007824:	4798      	blx	r3
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	3b01      	subs	r3, #1
 800782a:	6123      	str	r3, [r4, #16]
 800782c:	e7f1      	b.n	8007812 <_scanf_float+0x2aa>
 800782e:	9802      	ldr	r0, [sp, #8]
 8007830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007834:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007838:	9002      	str	r0, [sp, #8]
 800783a:	463a      	mov	r2, r7
 800783c:	4640      	mov	r0, r8
 800783e:	4798      	blx	r3
 8007840:	6923      	ldr	r3, [r4, #16]
 8007842:	3b01      	subs	r3, #1
 8007844:	6123      	str	r3, [r4, #16]
 8007846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800784a:	fa5f fa8a 	uxtb.w	sl, sl
 800784e:	f1ba 0f02 	cmp.w	sl, #2
 8007852:	d1ec      	bne.n	800782e <_scanf_float+0x2c6>
 8007854:	3d03      	subs	r5, #3
 8007856:	b2ed      	uxtb	r5, r5
 8007858:	1b76      	subs	r6, r6, r5
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	05da      	lsls	r2, r3, #23
 800785e:	d52f      	bpl.n	80078c0 <_scanf_float+0x358>
 8007860:	055b      	lsls	r3, r3, #21
 8007862:	d510      	bpl.n	8007886 <_scanf_float+0x31e>
 8007864:	455e      	cmp	r6, fp
 8007866:	f67f aebf 	bls.w	80075e8 <_scanf_float+0x80>
 800786a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800786e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007872:	463a      	mov	r2, r7
 8007874:	4640      	mov	r0, r8
 8007876:	4798      	blx	r3
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	3b01      	subs	r3, #1
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	e7f1      	b.n	8007864 <_scanf_float+0x2fc>
 8007880:	46aa      	mov	sl, r5
 8007882:	9602      	str	r6, [sp, #8]
 8007884:	e7df      	b.n	8007846 <_scanf_float+0x2de>
 8007886:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	2965      	cmp	r1, #101	; 0x65
 800788e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007892:	f106 35ff 	add.w	r5, r6, #4294967295
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	d00c      	beq.n	80078b4 <_scanf_float+0x34c>
 800789a:	2945      	cmp	r1, #69	; 0x45
 800789c:	d00a      	beq.n	80078b4 <_scanf_float+0x34c>
 800789e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078a2:	463a      	mov	r2, r7
 80078a4:	4640      	mov	r0, r8
 80078a6:	4798      	blx	r3
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	1eb5      	subs	r5, r6, #2
 80078b2:	6123      	str	r3, [r4, #16]
 80078b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078b8:	463a      	mov	r2, r7
 80078ba:	4640      	mov	r0, r8
 80078bc:	4798      	blx	r3
 80078be:	462e      	mov	r6, r5
 80078c0:	6825      	ldr	r5, [r4, #0]
 80078c2:	f015 0510 	ands.w	r5, r5, #16
 80078c6:	d158      	bne.n	800797a <_scanf_float+0x412>
 80078c8:	7035      	strb	r5, [r6, #0]
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d4:	d11c      	bne.n	8007910 <_scanf_float+0x3a8>
 80078d6:	9b01      	ldr	r3, [sp, #4]
 80078d8:	454b      	cmp	r3, r9
 80078da:	eba3 0209 	sub.w	r2, r3, r9
 80078de:	d124      	bne.n	800792a <_scanf_float+0x3c2>
 80078e0:	2200      	movs	r2, #0
 80078e2:	4659      	mov	r1, fp
 80078e4:	4640      	mov	r0, r8
 80078e6:	f000 fe9d 	bl	8008624 <_strtod_r>
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	6821      	ldr	r1, [r4, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f011 0f02 	tst.w	r1, #2
 80078f4:	ec57 6b10 	vmov	r6, r7, d0
 80078f8:	f103 0204 	add.w	r2, r3, #4
 80078fc:	d020      	beq.n	8007940 <_scanf_float+0x3d8>
 80078fe:	9903      	ldr	r1, [sp, #12]
 8007900:	600a      	str	r2, [r1, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	e9c3 6700 	strd	r6, r7, [r3]
 8007908:	68e3      	ldr	r3, [r4, #12]
 800790a:	3301      	adds	r3, #1
 800790c:	60e3      	str	r3, [r4, #12]
 800790e:	e66c      	b.n	80075ea <_scanf_float+0x82>
 8007910:	9b04      	ldr	r3, [sp, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0e4      	beq.n	80078e0 <_scanf_float+0x378>
 8007916:	9905      	ldr	r1, [sp, #20]
 8007918:	230a      	movs	r3, #10
 800791a:	462a      	mov	r2, r5
 800791c:	3101      	adds	r1, #1
 800791e:	4640      	mov	r0, r8
 8007920:	f000 ff0a 	bl	8008738 <_strtol_r>
 8007924:	9b04      	ldr	r3, [sp, #16]
 8007926:	9e05      	ldr	r6, [sp, #20]
 8007928:	1ac2      	subs	r2, r0, r3
 800792a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800792e:	429e      	cmp	r6, r3
 8007930:	bf28      	it	cs
 8007932:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007936:	4912      	ldr	r1, [pc, #72]	; (8007980 <_scanf_float+0x418>)
 8007938:	4630      	mov	r0, r6
 800793a:	f000 f82b 	bl	8007994 <siprintf>
 800793e:	e7cf      	b.n	80078e0 <_scanf_float+0x378>
 8007940:	f011 0f04 	tst.w	r1, #4
 8007944:	9903      	ldr	r1, [sp, #12]
 8007946:	600a      	str	r2, [r1, #0]
 8007948:	d1db      	bne.n	8007902 <_scanf_float+0x39a>
 800794a:	f8d3 8000 	ldr.w	r8, [r3]
 800794e:	ee10 2a10 	vmov	r2, s0
 8007952:	ee10 0a10 	vmov	r0, s0
 8007956:	463b      	mov	r3, r7
 8007958:	4639      	mov	r1, r7
 800795a:	f7f9 f8ef 	bl	8000b3c <__aeabi_dcmpun>
 800795e:	b128      	cbz	r0, 800796c <_scanf_float+0x404>
 8007960:	4808      	ldr	r0, [pc, #32]	; (8007984 <_scanf_float+0x41c>)
 8007962:	f000 f811 	bl	8007988 <nanf>
 8007966:	ed88 0a00 	vstr	s0, [r8]
 800796a:	e7cd      	b.n	8007908 <_scanf_float+0x3a0>
 800796c:	4630      	mov	r0, r6
 800796e:	4639      	mov	r1, r7
 8007970:	f7f9 f942 	bl	8000bf8 <__aeabi_d2f>
 8007974:	f8c8 0000 	str.w	r0, [r8]
 8007978:	e7c6      	b.n	8007908 <_scanf_float+0x3a0>
 800797a:	2500      	movs	r5, #0
 800797c:	e635      	b.n	80075ea <_scanf_float+0x82>
 800797e:	bf00      	nop
 8007980:	0800b58c 	.word	0x0800b58c
 8007984:	0800b9a8 	.word	0x0800b9a8

08007988 <nanf>:
 8007988:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007990 <nanf+0x8>
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	7fc00000 	.word	0x7fc00000

08007994 <siprintf>:
 8007994:	b40e      	push	{r1, r2, r3}
 8007996:	b500      	push	{lr}
 8007998:	b09c      	sub	sp, #112	; 0x70
 800799a:	ab1d      	add	r3, sp, #116	; 0x74
 800799c:	9002      	str	r0, [sp, #8]
 800799e:	9006      	str	r0, [sp, #24]
 80079a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079a4:	4809      	ldr	r0, [pc, #36]	; (80079cc <siprintf+0x38>)
 80079a6:	9107      	str	r1, [sp, #28]
 80079a8:	9104      	str	r1, [sp, #16]
 80079aa:	4909      	ldr	r1, [pc, #36]	; (80079d0 <siprintf+0x3c>)
 80079ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b0:	9105      	str	r1, [sp, #20]
 80079b2:	6800      	ldr	r0, [r0, #0]
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	a902      	add	r1, sp, #8
 80079b8:	f002 fea6 	bl	800a708 <_svfiprintf_r>
 80079bc:	9b02      	ldr	r3, [sp, #8]
 80079be:	2200      	movs	r2, #0
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	b01c      	add	sp, #112	; 0x70
 80079c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c8:	b003      	add	sp, #12
 80079ca:	4770      	bx	lr
 80079cc:	2000000c 	.word	0x2000000c
 80079d0:	ffff0208 	.word	0xffff0208

080079d4 <sulp>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4604      	mov	r4, r0
 80079d8:	460d      	mov	r5, r1
 80079da:	ec45 4b10 	vmov	d0, r4, r5
 80079de:	4616      	mov	r6, r2
 80079e0:	f002 fc2e 	bl	800a240 <__ulp>
 80079e4:	ec51 0b10 	vmov	r0, r1, d0
 80079e8:	b17e      	cbz	r6, 8007a0a <sulp+0x36>
 80079ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80079ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dd09      	ble.n	8007a0a <sulp+0x36>
 80079f6:	051b      	lsls	r3, r3, #20
 80079f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079fc:	2400      	movs	r4, #0
 80079fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a02:	4622      	mov	r2, r4
 8007a04:	462b      	mov	r3, r5
 8007a06:	f7f8 fdff 	bl	8000608 <__aeabi_dmul>
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	0000      	movs	r0, r0
	...

08007a10 <_strtod_l>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	b0a3      	sub	sp, #140	; 0x8c
 8007a16:	461f      	mov	r7, r3
 8007a18:	2300      	movs	r3, #0
 8007a1a:	931e      	str	r3, [sp, #120]	; 0x78
 8007a1c:	4ba4      	ldr	r3, [pc, #656]	; (8007cb0 <_strtod_l+0x2a0>)
 8007a1e:	9219      	str	r2, [sp, #100]	; 0x64
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	9307      	str	r3, [sp, #28]
 8007a24:	4604      	mov	r4, r0
 8007a26:	4618      	mov	r0, r3
 8007a28:	4688      	mov	r8, r1
 8007a2a:	f7f8 fbd9 	bl	80001e0 <strlen>
 8007a2e:	f04f 0a00 	mov.w	sl, #0
 8007a32:	4605      	mov	r5, r0
 8007a34:	f04f 0b00 	mov.w	fp, #0
 8007a38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a3e:	781a      	ldrb	r2, [r3, #0]
 8007a40:	2a2b      	cmp	r2, #43	; 0x2b
 8007a42:	d04c      	beq.n	8007ade <_strtod_l+0xce>
 8007a44:	d839      	bhi.n	8007aba <_strtod_l+0xaa>
 8007a46:	2a0d      	cmp	r2, #13
 8007a48:	d832      	bhi.n	8007ab0 <_strtod_l+0xa0>
 8007a4a:	2a08      	cmp	r2, #8
 8007a4c:	d832      	bhi.n	8007ab4 <_strtod_l+0xa4>
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	d03c      	beq.n	8007acc <_strtod_l+0xbc>
 8007a52:	2300      	movs	r3, #0
 8007a54:	930e      	str	r3, [sp, #56]	; 0x38
 8007a56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007a58:	7833      	ldrb	r3, [r6, #0]
 8007a5a:	2b30      	cmp	r3, #48	; 0x30
 8007a5c:	f040 80b4 	bne.w	8007bc8 <_strtod_l+0x1b8>
 8007a60:	7873      	ldrb	r3, [r6, #1]
 8007a62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a66:	2b58      	cmp	r3, #88	; 0x58
 8007a68:	d16c      	bne.n	8007b44 <_strtod_l+0x134>
 8007a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	ab1e      	add	r3, sp, #120	; 0x78
 8007a70:	9702      	str	r7, [sp, #8]
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4a8f      	ldr	r2, [pc, #572]	; (8007cb4 <_strtod_l+0x2a4>)
 8007a76:	ab1f      	add	r3, sp, #124	; 0x7c
 8007a78:	a91d      	add	r1, sp, #116	; 0x74
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f001 fd40 	bl	8009500 <__gethex>
 8007a80:	f010 0707 	ands.w	r7, r0, #7
 8007a84:	4605      	mov	r5, r0
 8007a86:	d005      	beq.n	8007a94 <_strtod_l+0x84>
 8007a88:	2f06      	cmp	r7, #6
 8007a8a:	d12a      	bne.n	8007ae2 <_strtod_l+0xd2>
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	2300      	movs	r3, #0
 8007a90:	961d      	str	r6, [sp, #116]	; 0x74
 8007a92:	930e      	str	r3, [sp, #56]	; 0x38
 8007a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f040 8596 	bne.w	80085c8 <_strtod_l+0xbb8>
 8007a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a9e:	b1db      	cbz	r3, 8007ad8 <_strtod_l+0xc8>
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007aa6:	ec43 2b10 	vmov	d0, r2, r3
 8007aaa:	b023      	add	sp, #140	; 0x8c
 8007aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab0:	2a20      	cmp	r2, #32
 8007ab2:	d1ce      	bne.n	8007a52 <_strtod_l+0x42>
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	931d      	str	r3, [sp, #116]	; 0x74
 8007ab8:	e7c0      	b.n	8007a3c <_strtod_l+0x2c>
 8007aba:	2a2d      	cmp	r2, #45	; 0x2d
 8007abc:	d1c9      	bne.n	8007a52 <_strtod_l+0x42>
 8007abe:	2201      	movs	r2, #1
 8007ac0:	920e      	str	r2, [sp, #56]	; 0x38
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	921d      	str	r2, [sp, #116]	; 0x74
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1c4      	bne.n	8007a56 <_strtod_l+0x46>
 8007acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ace:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f040 8576 	bne.w	80085c4 <_strtod_l+0xbb4>
 8007ad8:	4652      	mov	r2, sl
 8007ada:	465b      	mov	r3, fp
 8007adc:	e7e3      	b.n	8007aa6 <_strtod_l+0x96>
 8007ade:	2200      	movs	r2, #0
 8007ae0:	e7ee      	b.n	8007ac0 <_strtod_l+0xb0>
 8007ae2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ae4:	b13a      	cbz	r2, 8007af6 <_strtod_l+0xe6>
 8007ae6:	2135      	movs	r1, #53	; 0x35
 8007ae8:	a820      	add	r0, sp, #128	; 0x80
 8007aea:	f002 fcb4 	bl	800a456 <__copybits>
 8007aee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007af0:	4620      	mov	r0, r4
 8007af2:	f002 f879 	bl	8009be8 <_Bfree>
 8007af6:	3f01      	subs	r7, #1
 8007af8:	2f05      	cmp	r7, #5
 8007afa:	d807      	bhi.n	8007b0c <_strtod_l+0xfc>
 8007afc:	e8df f007 	tbb	[pc, r7]
 8007b00:	1d180b0e 	.word	0x1d180b0e
 8007b04:	030e      	.short	0x030e
 8007b06:	f04f 0b00 	mov.w	fp, #0
 8007b0a:	46da      	mov	sl, fp
 8007b0c:	0728      	lsls	r0, r5, #28
 8007b0e:	d5c1      	bpl.n	8007a94 <_strtod_l+0x84>
 8007b10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b14:	e7be      	b.n	8007a94 <_strtod_l+0x84>
 8007b16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007b1a:	e7f7      	b.n	8007b0c <_strtod_l+0xfc>
 8007b1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007b20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b2e:	e7ed      	b.n	8007b0c <_strtod_l+0xfc>
 8007b30:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007cb8 <_strtod_l+0x2a8>
 8007b34:	f04f 0a00 	mov.w	sl, #0
 8007b38:	e7e8      	b.n	8007b0c <_strtod_l+0xfc>
 8007b3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007b3e:	f04f 3aff 	mov.w	sl, #4294967295
 8007b42:	e7e3      	b.n	8007b0c <_strtod_l+0xfc>
 8007b44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	921d      	str	r2, [sp, #116]	; 0x74
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b30      	cmp	r3, #48	; 0x30
 8007b4e:	d0f9      	beq.n	8007b44 <_strtod_l+0x134>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d09f      	beq.n	8007a94 <_strtod_l+0x84>
 8007b54:	2301      	movs	r3, #1
 8007b56:	f04f 0900 	mov.w	r9, #0
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007b64:	464f      	mov	r7, r9
 8007b66:	220a      	movs	r2, #10
 8007b68:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007b6a:	7806      	ldrb	r6, [r0, #0]
 8007b6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b70:	b2d9      	uxtb	r1, r3
 8007b72:	2909      	cmp	r1, #9
 8007b74:	d92a      	bls.n	8007bcc <_strtod_l+0x1bc>
 8007b76:	9907      	ldr	r1, [sp, #28]
 8007b78:	462a      	mov	r2, r5
 8007b7a:	f002 fedd 	bl	800a938 <strncmp>
 8007b7e:	b398      	cbz	r0, 8007be8 <_strtod_l+0x1d8>
 8007b80:	2000      	movs	r0, #0
 8007b82:	4633      	mov	r3, r6
 8007b84:	463d      	mov	r5, r7
 8007b86:	9007      	str	r0, [sp, #28]
 8007b88:	4602      	mov	r2, r0
 8007b8a:	2b65      	cmp	r3, #101	; 0x65
 8007b8c:	d001      	beq.n	8007b92 <_strtod_l+0x182>
 8007b8e:	2b45      	cmp	r3, #69	; 0x45
 8007b90:	d118      	bne.n	8007bc4 <_strtod_l+0x1b4>
 8007b92:	b91d      	cbnz	r5, 8007b9c <_strtod_l+0x18c>
 8007b94:	9b04      	ldr	r3, [sp, #16]
 8007b96:	4303      	orrs	r3, r0
 8007b98:	d098      	beq.n	8007acc <_strtod_l+0xbc>
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007ba0:	f108 0301 	add.w	r3, r8, #1
 8007ba4:	931d      	str	r3, [sp, #116]	; 0x74
 8007ba6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007baa:	2b2b      	cmp	r3, #43	; 0x2b
 8007bac:	d075      	beq.n	8007c9a <_strtod_l+0x28a>
 8007bae:	2b2d      	cmp	r3, #45	; 0x2d
 8007bb0:	d07b      	beq.n	8007caa <_strtod_l+0x29a>
 8007bb2:	f04f 0c00 	mov.w	ip, #0
 8007bb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007bba:	2909      	cmp	r1, #9
 8007bbc:	f240 8082 	bls.w	8007cc4 <_strtod_l+0x2b4>
 8007bc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	e09d      	b.n	8007d04 <_strtod_l+0x2f4>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e7c4      	b.n	8007b56 <_strtod_l+0x146>
 8007bcc:	2f08      	cmp	r7, #8
 8007bce:	bfd8      	it	le
 8007bd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007bd2:	f100 0001 	add.w	r0, r0, #1
 8007bd6:	bfda      	itte	le
 8007bd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bdc:	9309      	strle	r3, [sp, #36]	; 0x24
 8007bde:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007be2:	3701      	adds	r7, #1
 8007be4:	901d      	str	r0, [sp, #116]	; 0x74
 8007be6:	e7bf      	b.n	8007b68 <_strtod_l+0x158>
 8007be8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bea:	195a      	adds	r2, r3, r5
 8007bec:	921d      	str	r2, [sp, #116]	; 0x74
 8007bee:	5d5b      	ldrb	r3, [r3, r5]
 8007bf0:	2f00      	cmp	r7, #0
 8007bf2:	d037      	beq.n	8007c64 <_strtod_l+0x254>
 8007bf4:	9007      	str	r0, [sp, #28]
 8007bf6:	463d      	mov	r5, r7
 8007bf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007bfc:	2a09      	cmp	r2, #9
 8007bfe:	d912      	bls.n	8007c26 <_strtod_l+0x216>
 8007c00:	2201      	movs	r2, #1
 8007c02:	e7c2      	b.n	8007b8a <_strtod_l+0x17a>
 8007c04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	921d      	str	r2, [sp, #116]	; 0x74
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	2b30      	cmp	r3, #48	; 0x30
 8007c10:	d0f8      	beq.n	8007c04 <_strtod_l+0x1f4>
 8007c12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007c16:	2a08      	cmp	r2, #8
 8007c18:	f200 84db 	bhi.w	80085d2 <_strtod_l+0xbc2>
 8007c1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007c1e:	9007      	str	r0, [sp, #28]
 8007c20:	2000      	movs	r0, #0
 8007c22:	920a      	str	r2, [sp, #40]	; 0x28
 8007c24:	4605      	mov	r5, r0
 8007c26:	3b30      	subs	r3, #48	; 0x30
 8007c28:	f100 0201 	add.w	r2, r0, #1
 8007c2c:	d014      	beq.n	8007c58 <_strtod_l+0x248>
 8007c2e:	9907      	ldr	r1, [sp, #28]
 8007c30:	4411      	add	r1, r2
 8007c32:	9107      	str	r1, [sp, #28]
 8007c34:	462a      	mov	r2, r5
 8007c36:	eb00 0e05 	add.w	lr, r0, r5
 8007c3a:	210a      	movs	r1, #10
 8007c3c:	4572      	cmp	r2, lr
 8007c3e:	d113      	bne.n	8007c68 <_strtod_l+0x258>
 8007c40:	182a      	adds	r2, r5, r0
 8007c42:	2a08      	cmp	r2, #8
 8007c44:	f105 0501 	add.w	r5, r5, #1
 8007c48:	4405      	add	r5, r0
 8007c4a:	dc1c      	bgt.n	8007c86 <_strtod_l+0x276>
 8007c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c4e:	220a      	movs	r2, #10
 8007c50:	fb02 3301 	mla	r3, r2, r1, r3
 8007c54:	9309      	str	r3, [sp, #36]	; 0x24
 8007c56:	2200      	movs	r2, #0
 8007c58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c5a:	1c59      	adds	r1, r3, #1
 8007c5c:	911d      	str	r1, [sp, #116]	; 0x74
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	4610      	mov	r0, r2
 8007c62:	e7c9      	b.n	8007bf8 <_strtod_l+0x1e8>
 8007c64:	4638      	mov	r0, r7
 8007c66:	e7d2      	b.n	8007c0e <_strtod_l+0x1fe>
 8007c68:	2a08      	cmp	r2, #8
 8007c6a:	dc04      	bgt.n	8007c76 <_strtod_l+0x266>
 8007c6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007c6e:	434e      	muls	r6, r1
 8007c70:	9609      	str	r6, [sp, #36]	; 0x24
 8007c72:	3201      	adds	r2, #1
 8007c74:	e7e2      	b.n	8007c3c <_strtod_l+0x22c>
 8007c76:	f102 0c01 	add.w	ip, r2, #1
 8007c7a:	f1bc 0f10 	cmp.w	ip, #16
 8007c7e:	bfd8      	it	le
 8007c80:	fb01 f909 	mulle.w	r9, r1, r9
 8007c84:	e7f5      	b.n	8007c72 <_strtod_l+0x262>
 8007c86:	2d10      	cmp	r5, #16
 8007c88:	bfdc      	itt	le
 8007c8a:	220a      	movle	r2, #10
 8007c8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8007c90:	e7e1      	b.n	8007c56 <_strtod_l+0x246>
 8007c92:	2300      	movs	r3, #0
 8007c94:	9307      	str	r3, [sp, #28]
 8007c96:	2201      	movs	r2, #1
 8007c98:	e77c      	b.n	8007b94 <_strtod_l+0x184>
 8007c9a:	f04f 0c00 	mov.w	ip, #0
 8007c9e:	f108 0302 	add.w	r3, r8, #2
 8007ca2:	931d      	str	r3, [sp, #116]	; 0x74
 8007ca4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007ca8:	e785      	b.n	8007bb6 <_strtod_l+0x1a6>
 8007caa:	f04f 0c01 	mov.w	ip, #1
 8007cae:	e7f6      	b.n	8007c9e <_strtod_l+0x28e>
 8007cb0:	0800b7e8 	.word	0x0800b7e8
 8007cb4:	0800b594 	.word	0x0800b594
 8007cb8:	7ff00000 	.word	0x7ff00000
 8007cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cbe:	1c59      	adds	r1, r3, #1
 8007cc0:	911d      	str	r1, [sp, #116]	; 0x74
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b30      	cmp	r3, #48	; 0x30
 8007cc6:	d0f9      	beq.n	8007cbc <_strtod_l+0x2ac>
 8007cc8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007ccc:	2908      	cmp	r1, #8
 8007cce:	f63f af79 	bhi.w	8007bc4 <_strtod_l+0x1b4>
 8007cd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007cd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cd8:	9308      	str	r3, [sp, #32]
 8007cda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cdc:	1c59      	adds	r1, r3, #1
 8007cde:	911d      	str	r1, [sp, #116]	; 0x74
 8007ce0:	785b      	ldrb	r3, [r3, #1]
 8007ce2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007ce6:	2e09      	cmp	r6, #9
 8007ce8:	d937      	bls.n	8007d5a <_strtod_l+0x34a>
 8007cea:	9e08      	ldr	r6, [sp, #32]
 8007cec:	1b89      	subs	r1, r1, r6
 8007cee:	2908      	cmp	r1, #8
 8007cf0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007cf4:	dc02      	bgt.n	8007cfc <_strtod_l+0x2ec>
 8007cf6:	4576      	cmp	r6, lr
 8007cf8:	bfa8      	it	ge
 8007cfa:	4676      	movge	r6, lr
 8007cfc:	f1bc 0f00 	cmp.w	ip, #0
 8007d00:	d000      	beq.n	8007d04 <_strtod_l+0x2f4>
 8007d02:	4276      	negs	r6, r6
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	d14f      	bne.n	8007da8 <_strtod_l+0x398>
 8007d08:	9904      	ldr	r1, [sp, #16]
 8007d0a:	4301      	orrs	r1, r0
 8007d0c:	f47f aec2 	bne.w	8007a94 <_strtod_l+0x84>
 8007d10:	2a00      	cmp	r2, #0
 8007d12:	f47f aedb 	bne.w	8007acc <_strtod_l+0xbc>
 8007d16:	2b69      	cmp	r3, #105	; 0x69
 8007d18:	d027      	beq.n	8007d6a <_strtod_l+0x35a>
 8007d1a:	dc24      	bgt.n	8007d66 <_strtod_l+0x356>
 8007d1c:	2b49      	cmp	r3, #73	; 0x49
 8007d1e:	d024      	beq.n	8007d6a <_strtod_l+0x35a>
 8007d20:	2b4e      	cmp	r3, #78	; 0x4e
 8007d22:	f47f aed3 	bne.w	8007acc <_strtod_l+0xbc>
 8007d26:	499e      	ldr	r1, [pc, #632]	; (8007fa0 <_strtod_l+0x590>)
 8007d28:	a81d      	add	r0, sp, #116	; 0x74
 8007d2a:	f001 fe41 	bl	80099b0 <__match>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f43f aecc 	beq.w	8007acc <_strtod_l+0xbc>
 8007d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b28      	cmp	r3, #40	; 0x28
 8007d3a:	d12d      	bne.n	8007d98 <_strtod_l+0x388>
 8007d3c:	4999      	ldr	r1, [pc, #612]	; (8007fa4 <_strtod_l+0x594>)
 8007d3e:	aa20      	add	r2, sp, #128	; 0x80
 8007d40:	a81d      	add	r0, sp, #116	; 0x74
 8007d42:	f001 fe49 	bl	80099d8 <__hexnan>
 8007d46:	2805      	cmp	r0, #5
 8007d48:	d126      	bne.n	8007d98 <_strtod_l+0x388>
 8007d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007d50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007d54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007d58:	e69c      	b.n	8007a94 <_strtod_l+0x84>
 8007d5a:	210a      	movs	r1, #10
 8007d5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007d60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d64:	e7b9      	b.n	8007cda <_strtod_l+0x2ca>
 8007d66:	2b6e      	cmp	r3, #110	; 0x6e
 8007d68:	e7db      	b.n	8007d22 <_strtod_l+0x312>
 8007d6a:	498f      	ldr	r1, [pc, #572]	; (8007fa8 <_strtod_l+0x598>)
 8007d6c:	a81d      	add	r0, sp, #116	; 0x74
 8007d6e:	f001 fe1f 	bl	80099b0 <__match>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	f43f aeaa 	beq.w	8007acc <_strtod_l+0xbc>
 8007d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d7a:	498c      	ldr	r1, [pc, #560]	; (8007fac <_strtod_l+0x59c>)
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	a81d      	add	r0, sp, #116	; 0x74
 8007d80:	931d      	str	r3, [sp, #116]	; 0x74
 8007d82:	f001 fe15 	bl	80099b0 <__match>
 8007d86:	b910      	cbnz	r0, 8007d8e <_strtod_l+0x37e>
 8007d88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	931d      	str	r3, [sp, #116]	; 0x74
 8007d8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007fbc <_strtod_l+0x5ac>
 8007d92:	f04f 0a00 	mov.w	sl, #0
 8007d96:	e67d      	b.n	8007a94 <_strtod_l+0x84>
 8007d98:	4885      	ldr	r0, [pc, #532]	; (8007fb0 <_strtod_l+0x5a0>)
 8007d9a:	f002 fdb5 	bl	800a908 <nan>
 8007d9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007da2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007da6:	e675      	b.n	8007a94 <_strtod_l+0x84>
 8007da8:	9b07      	ldr	r3, [sp, #28]
 8007daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dac:	1af3      	subs	r3, r6, r3
 8007dae:	2f00      	cmp	r7, #0
 8007db0:	bf08      	it	eq
 8007db2:	462f      	moveq	r7, r5
 8007db4:	2d10      	cmp	r5, #16
 8007db6:	9308      	str	r3, [sp, #32]
 8007db8:	46a8      	mov	r8, r5
 8007dba:	bfa8      	it	ge
 8007dbc:	f04f 0810 	movge.w	r8, #16
 8007dc0:	f7f8 fba8 	bl	8000514 <__aeabi_ui2d>
 8007dc4:	2d09      	cmp	r5, #9
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	468b      	mov	fp, r1
 8007dca:	dd13      	ble.n	8007df4 <_strtod_l+0x3e4>
 8007dcc:	4b79      	ldr	r3, [pc, #484]	; (8007fb4 <_strtod_l+0x5a4>)
 8007dce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007dd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dd6:	f7f8 fc17 	bl	8000608 <__aeabi_dmul>
 8007dda:	4682      	mov	sl, r0
 8007ddc:	4648      	mov	r0, r9
 8007dde:	468b      	mov	fp, r1
 8007de0:	f7f8 fb98 	bl	8000514 <__aeabi_ui2d>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4650      	mov	r0, sl
 8007dea:	4659      	mov	r1, fp
 8007dec:	f7f8 fa56 	bl	800029c <__adddf3>
 8007df0:	4682      	mov	sl, r0
 8007df2:	468b      	mov	fp, r1
 8007df4:	2d0f      	cmp	r5, #15
 8007df6:	dc38      	bgt.n	8007e6a <_strtod_l+0x45a>
 8007df8:	9b08      	ldr	r3, [sp, #32]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f43f ae4a 	beq.w	8007a94 <_strtod_l+0x84>
 8007e00:	dd24      	ble.n	8007e4c <_strtod_l+0x43c>
 8007e02:	2b16      	cmp	r3, #22
 8007e04:	dc0b      	bgt.n	8007e1e <_strtod_l+0x40e>
 8007e06:	4d6b      	ldr	r5, [pc, #428]	; (8007fb4 <_strtod_l+0x5a4>)
 8007e08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007e0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007e10:	4652      	mov	r2, sl
 8007e12:	465b      	mov	r3, fp
 8007e14:	f7f8 fbf8 	bl	8000608 <__aeabi_dmul>
 8007e18:	4682      	mov	sl, r0
 8007e1a:	468b      	mov	fp, r1
 8007e1c:	e63a      	b.n	8007a94 <_strtod_l+0x84>
 8007e1e:	9a08      	ldr	r2, [sp, #32]
 8007e20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e24:	4293      	cmp	r3, r2
 8007e26:	db20      	blt.n	8007e6a <_strtod_l+0x45a>
 8007e28:	4c62      	ldr	r4, [pc, #392]	; (8007fb4 <_strtod_l+0x5a4>)
 8007e2a:	f1c5 050f 	rsb	r5, r5, #15
 8007e2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e32:	4652      	mov	r2, sl
 8007e34:	465b      	mov	r3, fp
 8007e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e3a:	f7f8 fbe5 	bl	8000608 <__aeabi_dmul>
 8007e3e:	9b08      	ldr	r3, [sp, #32]
 8007e40:	1b5d      	subs	r5, r3, r5
 8007e42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007e46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e4a:	e7e3      	b.n	8007e14 <_strtod_l+0x404>
 8007e4c:	9b08      	ldr	r3, [sp, #32]
 8007e4e:	3316      	adds	r3, #22
 8007e50:	db0b      	blt.n	8007e6a <_strtod_l+0x45a>
 8007e52:	9b07      	ldr	r3, [sp, #28]
 8007e54:	4a57      	ldr	r2, [pc, #348]	; (8007fb4 <_strtod_l+0x5a4>)
 8007e56:	1b9e      	subs	r6, r3, r6
 8007e58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007e5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e60:	4650      	mov	r0, sl
 8007e62:	4659      	mov	r1, fp
 8007e64:	f7f8 fcfa 	bl	800085c <__aeabi_ddiv>
 8007e68:	e7d6      	b.n	8007e18 <_strtod_l+0x408>
 8007e6a:	9b08      	ldr	r3, [sp, #32]
 8007e6c:	eba5 0808 	sub.w	r8, r5, r8
 8007e70:	4498      	add	r8, r3
 8007e72:	f1b8 0f00 	cmp.w	r8, #0
 8007e76:	dd71      	ble.n	8007f5c <_strtod_l+0x54c>
 8007e78:	f018 030f 	ands.w	r3, r8, #15
 8007e7c:	d00a      	beq.n	8007e94 <_strtod_l+0x484>
 8007e7e:	494d      	ldr	r1, [pc, #308]	; (8007fb4 <_strtod_l+0x5a4>)
 8007e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e84:	4652      	mov	r2, sl
 8007e86:	465b      	mov	r3, fp
 8007e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e8c:	f7f8 fbbc 	bl	8000608 <__aeabi_dmul>
 8007e90:	4682      	mov	sl, r0
 8007e92:	468b      	mov	fp, r1
 8007e94:	f038 080f 	bics.w	r8, r8, #15
 8007e98:	d04d      	beq.n	8007f36 <_strtod_l+0x526>
 8007e9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007e9e:	dd22      	ble.n	8007ee6 <_strtod_l+0x4d6>
 8007ea0:	2500      	movs	r5, #0
 8007ea2:	462e      	mov	r6, r5
 8007ea4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ea6:	9507      	str	r5, [sp, #28]
 8007ea8:	2322      	movs	r3, #34	; 0x22
 8007eaa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007fbc <_strtod_l+0x5ac>
 8007eae:	6023      	str	r3, [r4, #0]
 8007eb0:	f04f 0a00 	mov.w	sl, #0
 8007eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f43f adec 	beq.w	8007a94 <_strtod_l+0x84>
 8007ebc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f001 fe92 	bl	8009be8 <_Bfree>
 8007ec4:	9907      	ldr	r1, [sp, #28]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f001 fe8e 	bl	8009be8 <_Bfree>
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f001 fe8a 	bl	8009be8 <_Bfree>
 8007ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f001 fe86 	bl	8009be8 <_Bfree>
 8007edc:	4629      	mov	r1, r5
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f001 fe82 	bl	8009be8 <_Bfree>
 8007ee4:	e5d6      	b.n	8007a94 <_strtod_l+0x84>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007eec:	4650      	mov	r0, sl
 8007eee:	4659      	mov	r1, fp
 8007ef0:	4699      	mov	r9, r3
 8007ef2:	f1b8 0f01 	cmp.w	r8, #1
 8007ef6:	dc21      	bgt.n	8007f3c <_strtod_l+0x52c>
 8007ef8:	b10b      	cbz	r3, 8007efe <_strtod_l+0x4ee>
 8007efa:	4682      	mov	sl, r0
 8007efc:	468b      	mov	fp, r1
 8007efe:	4b2e      	ldr	r3, [pc, #184]	; (8007fb8 <_strtod_l+0x5a8>)
 8007f00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f08:	4652      	mov	r2, sl
 8007f0a:	465b      	mov	r3, fp
 8007f0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f10:	f7f8 fb7a 	bl	8000608 <__aeabi_dmul>
 8007f14:	4b29      	ldr	r3, [pc, #164]	; (8007fbc <_strtod_l+0x5ac>)
 8007f16:	460a      	mov	r2, r1
 8007f18:	400b      	ands	r3, r1
 8007f1a:	4929      	ldr	r1, [pc, #164]	; (8007fc0 <_strtod_l+0x5b0>)
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	4682      	mov	sl, r0
 8007f20:	d8be      	bhi.n	8007ea0 <_strtod_l+0x490>
 8007f22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f26:	428b      	cmp	r3, r1
 8007f28:	bf86      	itte	hi
 8007f2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007fc4 <_strtod_l+0x5b4>
 8007f2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f36:	2300      	movs	r3, #0
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	e081      	b.n	8008040 <_strtod_l+0x630>
 8007f3c:	f018 0f01 	tst.w	r8, #1
 8007f40:	d007      	beq.n	8007f52 <_strtod_l+0x542>
 8007f42:	4b1d      	ldr	r3, [pc, #116]	; (8007fb8 <_strtod_l+0x5a8>)
 8007f44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 fb5c 	bl	8000608 <__aeabi_dmul>
 8007f50:	2301      	movs	r3, #1
 8007f52:	f109 0901 	add.w	r9, r9, #1
 8007f56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f5a:	e7ca      	b.n	8007ef2 <_strtod_l+0x4e2>
 8007f5c:	d0eb      	beq.n	8007f36 <_strtod_l+0x526>
 8007f5e:	f1c8 0800 	rsb	r8, r8, #0
 8007f62:	f018 020f 	ands.w	r2, r8, #15
 8007f66:	d00a      	beq.n	8007f7e <_strtod_l+0x56e>
 8007f68:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <_strtod_l+0x5a4>)
 8007f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f6e:	4650      	mov	r0, sl
 8007f70:	4659      	mov	r1, fp
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 fc71 	bl	800085c <__aeabi_ddiv>
 8007f7a:	4682      	mov	sl, r0
 8007f7c:	468b      	mov	fp, r1
 8007f7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f82:	d0d8      	beq.n	8007f36 <_strtod_l+0x526>
 8007f84:	f1b8 0f1f 	cmp.w	r8, #31
 8007f88:	dd1e      	ble.n	8007fc8 <_strtod_l+0x5b8>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	462e      	mov	r6, r5
 8007f8e:	9509      	str	r5, [sp, #36]	; 0x24
 8007f90:	9507      	str	r5, [sp, #28]
 8007f92:	2322      	movs	r3, #34	; 0x22
 8007f94:	f04f 0a00 	mov.w	sl, #0
 8007f98:	f04f 0b00 	mov.w	fp, #0
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	e789      	b.n	8007eb4 <_strtod_l+0x4a4>
 8007fa0:	0800b565 	.word	0x0800b565
 8007fa4:	0800b5a8 	.word	0x0800b5a8
 8007fa8:	0800b55d 	.word	0x0800b55d
 8007fac:	0800b6ec 	.word	0x0800b6ec
 8007fb0:	0800b9a8 	.word	0x0800b9a8
 8007fb4:	0800b888 	.word	0x0800b888
 8007fb8:	0800b860 	.word	0x0800b860
 8007fbc:	7ff00000 	.word	0x7ff00000
 8007fc0:	7ca00000 	.word	0x7ca00000
 8007fc4:	7fefffff 	.word	0x7fefffff
 8007fc8:	f018 0310 	ands.w	r3, r8, #16
 8007fcc:	bf18      	it	ne
 8007fce:	236a      	movne	r3, #106	; 0x6a
 8007fd0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008388 <_strtod_l+0x978>
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	4659      	mov	r1, fp
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f018 0f01 	tst.w	r8, #1
 8007fe0:	d004      	beq.n	8007fec <_strtod_l+0x5dc>
 8007fe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007fe6:	f7f8 fb0f 	bl	8000608 <__aeabi_dmul>
 8007fea:	2301      	movs	r3, #1
 8007fec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007ff0:	f109 0908 	add.w	r9, r9, #8
 8007ff4:	d1f2      	bne.n	8007fdc <_strtod_l+0x5cc>
 8007ff6:	b10b      	cbz	r3, 8007ffc <_strtod_l+0x5ec>
 8007ff8:	4682      	mov	sl, r0
 8007ffa:	468b      	mov	fp, r1
 8007ffc:	9b04      	ldr	r3, [sp, #16]
 8007ffe:	b1bb      	cbz	r3, 8008030 <_strtod_l+0x620>
 8008000:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008004:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008008:	2b00      	cmp	r3, #0
 800800a:	4659      	mov	r1, fp
 800800c:	dd10      	ble.n	8008030 <_strtod_l+0x620>
 800800e:	2b1f      	cmp	r3, #31
 8008010:	f340 8128 	ble.w	8008264 <_strtod_l+0x854>
 8008014:	2b34      	cmp	r3, #52	; 0x34
 8008016:	bfde      	ittt	le
 8008018:	3b20      	suble	r3, #32
 800801a:	f04f 32ff 	movle.w	r2, #4294967295
 800801e:	fa02 f303 	lslle.w	r3, r2, r3
 8008022:	f04f 0a00 	mov.w	sl, #0
 8008026:	bfcc      	ite	gt
 8008028:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800802c:	ea03 0b01 	andle.w	fp, r3, r1
 8008030:	2200      	movs	r2, #0
 8008032:	2300      	movs	r3, #0
 8008034:	4650      	mov	r0, sl
 8008036:	4659      	mov	r1, fp
 8008038:	f7f8 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800803c:	2800      	cmp	r0, #0
 800803e:	d1a4      	bne.n	8007f8a <_strtod_l+0x57a>
 8008040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008046:	462b      	mov	r3, r5
 8008048:	463a      	mov	r2, r7
 800804a:	4620      	mov	r0, r4
 800804c:	f001 fe38 	bl	8009cc0 <__s2b>
 8008050:	9009      	str	r0, [sp, #36]	; 0x24
 8008052:	2800      	cmp	r0, #0
 8008054:	f43f af24 	beq.w	8007ea0 <_strtod_l+0x490>
 8008058:	9b07      	ldr	r3, [sp, #28]
 800805a:	1b9e      	subs	r6, r3, r6
 800805c:	9b08      	ldr	r3, [sp, #32]
 800805e:	2b00      	cmp	r3, #0
 8008060:	bfb4      	ite	lt
 8008062:	4633      	movlt	r3, r6
 8008064:	2300      	movge	r3, #0
 8008066:	9310      	str	r3, [sp, #64]	; 0x40
 8008068:	9b08      	ldr	r3, [sp, #32]
 800806a:	2500      	movs	r5, #0
 800806c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008070:	9318      	str	r3, [sp, #96]	; 0x60
 8008072:	462e      	mov	r6, r5
 8008074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008076:	4620      	mov	r0, r4
 8008078:	6859      	ldr	r1, [r3, #4]
 800807a:	f001 fd75 	bl	8009b68 <_Balloc>
 800807e:	9007      	str	r0, [sp, #28]
 8008080:	2800      	cmp	r0, #0
 8008082:	f43f af11 	beq.w	8007ea8 <_strtod_l+0x498>
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	3202      	adds	r2, #2
 800808c:	f103 010c 	add.w	r1, r3, #12
 8008090:	0092      	lsls	r2, r2, #2
 8008092:	300c      	adds	r0, #12
 8008094:	f001 fd5a 	bl	8009b4c <memcpy>
 8008098:	ec4b ab10 	vmov	d0, sl, fp
 800809c:	aa20      	add	r2, sp, #128	; 0x80
 800809e:	a91f      	add	r1, sp, #124	; 0x7c
 80080a0:	4620      	mov	r0, r4
 80080a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80080a6:	f002 f947 	bl	800a338 <__d2b>
 80080aa:	901e      	str	r0, [sp, #120]	; 0x78
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f43f aefb 	beq.w	8007ea8 <_strtod_l+0x498>
 80080b2:	2101      	movs	r1, #1
 80080b4:	4620      	mov	r0, r4
 80080b6:	f001 fe9d 	bl	8009df4 <__i2b>
 80080ba:	4606      	mov	r6, r0
 80080bc:	2800      	cmp	r0, #0
 80080be:	f43f aef3 	beq.w	8007ea8 <_strtod_l+0x498>
 80080c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080c4:	9904      	ldr	r1, [sp, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bfab      	itete	ge
 80080ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80080cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80080ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80080d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80080d4:	bfac      	ite	ge
 80080d6:	eb03 0902 	addge.w	r9, r3, r2
 80080da:	1ad7      	sublt	r7, r2, r3
 80080dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080de:	eba3 0801 	sub.w	r8, r3, r1
 80080e2:	4490      	add	r8, r2
 80080e4:	4ba3      	ldr	r3, [pc, #652]	; (8008374 <_strtod_l+0x964>)
 80080e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80080ea:	4598      	cmp	r8, r3
 80080ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080f0:	f280 80cc 	bge.w	800828c <_strtod_l+0x87c>
 80080f4:	eba3 0308 	sub.w	r3, r3, r8
 80080f8:	2b1f      	cmp	r3, #31
 80080fa:	eba2 0203 	sub.w	r2, r2, r3
 80080fe:	f04f 0101 	mov.w	r1, #1
 8008102:	f300 80b6 	bgt.w	8008272 <_strtod_l+0x862>
 8008106:	fa01 f303 	lsl.w	r3, r1, r3
 800810a:	9311      	str	r3, [sp, #68]	; 0x44
 800810c:	2300      	movs	r3, #0
 800810e:	930c      	str	r3, [sp, #48]	; 0x30
 8008110:	eb09 0802 	add.w	r8, r9, r2
 8008114:	9b04      	ldr	r3, [sp, #16]
 8008116:	45c1      	cmp	r9, r8
 8008118:	4417      	add	r7, r2
 800811a:	441f      	add	r7, r3
 800811c:	464b      	mov	r3, r9
 800811e:	bfa8      	it	ge
 8008120:	4643      	movge	r3, r8
 8008122:	42bb      	cmp	r3, r7
 8008124:	bfa8      	it	ge
 8008126:	463b      	movge	r3, r7
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfc2      	ittt	gt
 800812c:	eba8 0803 	subgt.w	r8, r8, r3
 8008130:	1aff      	subgt	r7, r7, r3
 8008132:	eba9 0903 	subgt.w	r9, r9, r3
 8008136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	dd17      	ble.n	800816c <_strtod_l+0x75c>
 800813c:	4631      	mov	r1, r6
 800813e:	461a      	mov	r2, r3
 8008140:	4620      	mov	r0, r4
 8008142:	f001 ff13 	bl	8009f6c <__pow5mult>
 8008146:	4606      	mov	r6, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	f43f aead 	beq.w	8007ea8 <_strtod_l+0x498>
 800814e:	4601      	mov	r1, r0
 8008150:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008152:	4620      	mov	r0, r4
 8008154:	f001 fe64 	bl	8009e20 <__multiply>
 8008158:	900f      	str	r0, [sp, #60]	; 0x3c
 800815a:	2800      	cmp	r0, #0
 800815c:	f43f aea4 	beq.w	8007ea8 <_strtod_l+0x498>
 8008160:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008162:	4620      	mov	r0, r4
 8008164:	f001 fd40 	bl	8009be8 <_Bfree>
 8008168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800816a:	931e      	str	r3, [sp, #120]	; 0x78
 800816c:	f1b8 0f00 	cmp.w	r8, #0
 8008170:	f300 8091 	bgt.w	8008296 <_strtod_l+0x886>
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd08      	ble.n	800818c <_strtod_l+0x77c>
 800817a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800817c:	9907      	ldr	r1, [sp, #28]
 800817e:	4620      	mov	r0, r4
 8008180:	f001 fef4 	bl	8009f6c <__pow5mult>
 8008184:	9007      	str	r0, [sp, #28]
 8008186:	2800      	cmp	r0, #0
 8008188:	f43f ae8e 	beq.w	8007ea8 <_strtod_l+0x498>
 800818c:	2f00      	cmp	r7, #0
 800818e:	dd08      	ble.n	80081a2 <_strtod_l+0x792>
 8008190:	9907      	ldr	r1, [sp, #28]
 8008192:	463a      	mov	r2, r7
 8008194:	4620      	mov	r0, r4
 8008196:	f001 ff43 	bl	800a020 <__lshift>
 800819a:	9007      	str	r0, [sp, #28]
 800819c:	2800      	cmp	r0, #0
 800819e:	f43f ae83 	beq.w	8007ea8 <_strtod_l+0x498>
 80081a2:	f1b9 0f00 	cmp.w	r9, #0
 80081a6:	dd08      	ble.n	80081ba <_strtod_l+0x7aa>
 80081a8:	4631      	mov	r1, r6
 80081aa:	464a      	mov	r2, r9
 80081ac:	4620      	mov	r0, r4
 80081ae:	f001 ff37 	bl	800a020 <__lshift>
 80081b2:	4606      	mov	r6, r0
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f43f ae77 	beq.w	8007ea8 <_strtod_l+0x498>
 80081ba:	9a07      	ldr	r2, [sp, #28]
 80081bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80081be:	4620      	mov	r0, r4
 80081c0:	f001 ffb6 	bl	800a130 <__mdiff>
 80081c4:	4605      	mov	r5, r0
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f43f ae6e 	beq.w	8007ea8 <_strtod_l+0x498>
 80081cc:	68c3      	ldr	r3, [r0, #12]
 80081ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80081d0:	2300      	movs	r3, #0
 80081d2:	60c3      	str	r3, [r0, #12]
 80081d4:	4631      	mov	r1, r6
 80081d6:	f001 ff8f 	bl	800a0f8 <__mcmp>
 80081da:	2800      	cmp	r0, #0
 80081dc:	da65      	bge.n	80082aa <_strtod_l+0x89a>
 80081de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081e0:	ea53 030a 	orrs.w	r3, r3, sl
 80081e4:	f040 8087 	bne.w	80082f6 <_strtod_l+0x8e6>
 80081e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 8082 	bne.w	80082f6 <_strtod_l+0x8e6>
 80081f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081f6:	0d1b      	lsrs	r3, r3, #20
 80081f8:	051b      	lsls	r3, r3, #20
 80081fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081fe:	d97a      	bls.n	80082f6 <_strtod_l+0x8e6>
 8008200:	696b      	ldr	r3, [r5, #20]
 8008202:	b913      	cbnz	r3, 800820a <_strtod_l+0x7fa>
 8008204:	692b      	ldr	r3, [r5, #16]
 8008206:	2b01      	cmp	r3, #1
 8008208:	dd75      	ble.n	80082f6 <_strtod_l+0x8e6>
 800820a:	4629      	mov	r1, r5
 800820c:	2201      	movs	r2, #1
 800820e:	4620      	mov	r0, r4
 8008210:	f001 ff06 	bl	800a020 <__lshift>
 8008214:	4631      	mov	r1, r6
 8008216:	4605      	mov	r5, r0
 8008218:	f001 ff6e 	bl	800a0f8 <__mcmp>
 800821c:	2800      	cmp	r0, #0
 800821e:	dd6a      	ble.n	80082f6 <_strtod_l+0x8e6>
 8008220:	9904      	ldr	r1, [sp, #16]
 8008222:	4a55      	ldr	r2, [pc, #340]	; (8008378 <_strtod_l+0x968>)
 8008224:	465b      	mov	r3, fp
 8008226:	2900      	cmp	r1, #0
 8008228:	f000 8085 	beq.w	8008336 <_strtod_l+0x926>
 800822c:	ea02 010b 	and.w	r1, r2, fp
 8008230:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008234:	dc7f      	bgt.n	8008336 <_strtod_l+0x926>
 8008236:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800823a:	f77f aeaa 	ble.w	8007f92 <_strtod_l+0x582>
 800823e:	4a4f      	ldr	r2, [pc, #316]	; (800837c <_strtod_l+0x96c>)
 8008240:	2300      	movs	r3, #0
 8008242:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008246:	4650      	mov	r0, sl
 8008248:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800824c:	4659      	mov	r1, fp
 800824e:	f7f8 f9db 	bl	8000608 <__aeabi_dmul>
 8008252:	460b      	mov	r3, r1
 8008254:	4303      	orrs	r3, r0
 8008256:	bf08      	it	eq
 8008258:	2322      	moveq	r3, #34	; 0x22
 800825a:	4682      	mov	sl, r0
 800825c:	468b      	mov	fp, r1
 800825e:	bf08      	it	eq
 8008260:	6023      	streq	r3, [r4, #0]
 8008262:	e62b      	b.n	8007ebc <_strtod_l+0x4ac>
 8008264:	f04f 32ff 	mov.w	r2, #4294967295
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	ea03 0a0a 	and.w	sl, r3, sl
 8008270:	e6de      	b.n	8008030 <_strtod_l+0x620>
 8008272:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008276:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800827a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800827e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008282:	fa01 f308 	lsl.w	r3, r1, r8
 8008286:	930c      	str	r3, [sp, #48]	; 0x30
 8008288:	9111      	str	r1, [sp, #68]	; 0x44
 800828a:	e741      	b.n	8008110 <_strtod_l+0x700>
 800828c:	2300      	movs	r3, #0
 800828e:	930c      	str	r3, [sp, #48]	; 0x30
 8008290:	2301      	movs	r3, #1
 8008292:	9311      	str	r3, [sp, #68]	; 0x44
 8008294:	e73c      	b.n	8008110 <_strtod_l+0x700>
 8008296:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008298:	4642      	mov	r2, r8
 800829a:	4620      	mov	r0, r4
 800829c:	f001 fec0 	bl	800a020 <__lshift>
 80082a0:	901e      	str	r0, [sp, #120]	; 0x78
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f47f af66 	bne.w	8008174 <_strtod_l+0x764>
 80082a8:	e5fe      	b.n	8007ea8 <_strtod_l+0x498>
 80082aa:	465f      	mov	r7, fp
 80082ac:	d16e      	bne.n	800838c <_strtod_l+0x97c>
 80082ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082b4:	b342      	cbz	r2, 8008308 <_strtod_l+0x8f8>
 80082b6:	4a32      	ldr	r2, [pc, #200]	; (8008380 <_strtod_l+0x970>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d128      	bne.n	800830e <_strtod_l+0x8fe>
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	4650      	mov	r0, sl
 80082c0:	b1eb      	cbz	r3, 80082fe <_strtod_l+0x8ee>
 80082c2:	4a2d      	ldr	r2, [pc, #180]	; (8008378 <_strtod_l+0x968>)
 80082c4:	403a      	ands	r2, r7
 80082c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80082ca:	f04f 31ff 	mov.w	r1, #4294967295
 80082ce:	d819      	bhi.n	8008304 <_strtod_l+0x8f4>
 80082d0:	0d12      	lsrs	r2, r2, #20
 80082d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082d6:	fa01 f303 	lsl.w	r3, r1, r3
 80082da:	4298      	cmp	r0, r3
 80082dc:	d117      	bne.n	800830e <_strtod_l+0x8fe>
 80082de:	4b29      	ldr	r3, [pc, #164]	; (8008384 <_strtod_l+0x974>)
 80082e0:	429f      	cmp	r7, r3
 80082e2:	d102      	bne.n	80082ea <_strtod_l+0x8da>
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f addf 	beq.w	8007ea8 <_strtod_l+0x498>
 80082ea:	4b23      	ldr	r3, [pc, #140]	; (8008378 <_strtod_l+0x968>)
 80082ec:	403b      	ands	r3, r7
 80082ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80082f2:	f04f 0a00 	mov.w	sl, #0
 80082f6:	9b04      	ldr	r3, [sp, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1a0      	bne.n	800823e <_strtod_l+0x82e>
 80082fc:	e5de      	b.n	8007ebc <_strtod_l+0x4ac>
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008302:	e7ea      	b.n	80082da <_strtod_l+0x8ca>
 8008304:	460b      	mov	r3, r1
 8008306:	e7e8      	b.n	80082da <_strtod_l+0x8ca>
 8008308:	ea53 030a 	orrs.w	r3, r3, sl
 800830c:	d088      	beq.n	8008220 <_strtod_l+0x810>
 800830e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008310:	b1db      	cbz	r3, 800834a <_strtod_l+0x93a>
 8008312:	423b      	tst	r3, r7
 8008314:	d0ef      	beq.n	80082f6 <_strtod_l+0x8e6>
 8008316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008318:	9a04      	ldr	r2, [sp, #16]
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	b1c3      	cbz	r3, 8008352 <_strtod_l+0x942>
 8008320:	f7ff fb58 	bl	80079d4 <sulp>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800832c:	f7f7 ffb6 	bl	800029c <__adddf3>
 8008330:	4682      	mov	sl, r0
 8008332:	468b      	mov	fp, r1
 8008334:	e7df      	b.n	80082f6 <_strtod_l+0x8e6>
 8008336:	4013      	ands	r3, r2
 8008338:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800833c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008340:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008344:	f04f 3aff 	mov.w	sl, #4294967295
 8008348:	e7d5      	b.n	80082f6 <_strtod_l+0x8e6>
 800834a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800834c:	ea13 0f0a 	tst.w	r3, sl
 8008350:	e7e0      	b.n	8008314 <_strtod_l+0x904>
 8008352:	f7ff fb3f 	bl	80079d4 <sulp>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800835e:	f7f7 ff9b 	bl	8000298 <__aeabi_dsub>
 8008362:	2200      	movs	r2, #0
 8008364:	2300      	movs	r3, #0
 8008366:	4682      	mov	sl, r0
 8008368:	468b      	mov	fp, r1
 800836a:	f7f8 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800836e:	2800      	cmp	r0, #0
 8008370:	d0c1      	beq.n	80082f6 <_strtod_l+0x8e6>
 8008372:	e60e      	b.n	8007f92 <_strtod_l+0x582>
 8008374:	fffffc02 	.word	0xfffffc02
 8008378:	7ff00000 	.word	0x7ff00000
 800837c:	39500000 	.word	0x39500000
 8008380:	000fffff 	.word	0x000fffff
 8008384:	7fefffff 	.word	0x7fefffff
 8008388:	0800b5c0 	.word	0x0800b5c0
 800838c:	4631      	mov	r1, r6
 800838e:	4628      	mov	r0, r5
 8008390:	f002 f82e 	bl	800a3f0 <__ratio>
 8008394:	ec59 8b10 	vmov	r8, r9, d0
 8008398:	ee10 0a10 	vmov	r0, s0
 800839c:	2200      	movs	r2, #0
 800839e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083a2:	4649      	mov	r1, r9
 80083a4:	f7f8 fbac 	bl	8000b00 <__aeabi_dcmple>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d07c      	beq.n	80084a6 <_strtod_l+0xa96>
 80083ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04c      	beq.n	800844c <_strtod_l+0xa3c>
 80083b2:	4b95      	ldr	r3, [pc, #596]	; (8008608 <_strtod_l+0xbf8>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80083ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008608 <_strtod_l+0xbf8>
 80083be:	f04f 0800 	mov.w	r8, #0
 80083c2:	4b92      	ldr	r3, [pc, #584]	; (800860c <_strtod_l+0xbfc>)
 80083c4:	403b      	ands	r3, r7
 80083c6:	9311      	str	r3, [sp, #68]	; 0x44
 80083c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083ca:	4b91      	ldr	r3, [pc, #580]	; (8008610 <_strtod_l+0xc00>)
 80083cc:	429a      	cmp	r2, r3
 80083ce:	f040 80b2 	bne.w	8008536 <_strtod_l+0xb26>
 80083d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80083de:	ec4b ab10 	vmov	d0, sl, fp
 80083e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80083e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80083ea:	f001 ff29 	bl	800a240 <__ulp>
 80083ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083f2:	ec53 2b10 	vmov	r2, r3, d0
 80083f6:	f7f8 f907 	bl	8000608 <__aeabi_dmul>
 80083fa:	4652      	mov	r2, sl
 80083fc:	465b      	mov	r3, fp
 80083fe:	f7f7 ff4d 	bl	800029c <__adddf3>
 8008402:	460b      	mov	r3, r1
 8008404:	4981      	ldr	r1, [pc, #516]	; (800860c <_strtod_l+0xbfc>)
 8008406:	4a83      	ldr	r2, [pc, #524]	; (8008614 <_strtod_l+0xc04>)
 8008408:	4019      	ands	r1, r3
 800840a:	4291      	cmp	r1, r2
 800840c:	4682      	mov	sl, r0
 800840e:	d95e      	bls.n	80084ce <_strtod_l+0xabe>
 8008410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008412:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008416:	4293      	cmp	r3, r2
 8008418:	d103      	bne.n	8008422 <_strtod_l+0xa12>
 800841a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841c:	3301      	adds	r3, #1
 800841e:	f43f ad43 	beq.w	8007ea8 <_strtod_l+0x498>
 8008422:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008620 <_strtod_l+0xc10>
 8008426:	f04f 3aff 	mov.w	sl, #4294967295
 800842a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800842c:	4620      	mov	r0, r4
 800842e:	f001 fbdb 	bl	8009be8 <_Bfree>
 8008432:	9907      	ldr	r1, [sp, #28]
 8008434:	4620      	mov	r0, r4
 8008436:	f001 fbd7 	bl	8009be8 <_Bfree>
 800843a:	4631      	mov	r1, r6
 800843c:	4620      	mov	r0, r4
 800843e:	f001 fbd3 	bl	8009be8 <_Bfree>
 8008442:	4629      	mov	r1, r5
 8008444:	4620      	mov	r0, r4
 8008446:	f001 fbcf 	bl	8009be8 <_Bfree>
 800844a:	e613      	b.n	8008074 <_strtod_l+0x664>
 800844c:	f1ba 0f00 	cmp.w	sl, #0
 8008450:	d11b      	bne.n	800848a <_strtod_l+0xa7a>
 8008452:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008456:	b9f3      	cbnz	r3, 8008496 <_strtod_l+0xa86>
 8008458:	4b6b      	ldr	r3, [pc, #428]	; (8008608 <_strtod_l+0xbf8>)
 800845a:	2200      	movs	r2, #0
 800845c:	4640      	mov	r0, r8
 800845e:	4649      	mov	r1, r9
 8008460:	f7f8 fb44 	bl	8000aec <__aeabi_dcmplt>
 8008464:	b9d0      	cbnz	r0, 800849c <_strtod_l+0xa8c>
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	4b6b      	ldr	r3, [pc, #428]	; (8008618 <_strtod_l+0xc08>)
 800846c:	2200      	movs	r2, #0
 800846e:	f7f8 f8cb 	bl	8000608 <__aeabi_dmul>
 8008472:	4680      	mov	r8, r0
 8008474:	4689      	mov	r9, r1
 8008476:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800847a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800847e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008480:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008484:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008488:	e79b      	b.n	80083c2 <_strtod_l+0x9b2>
 800848a:	f1ba 0f01 	cmp.w	sl, #1
 800848e:	d102      	bne.n	8008496 <_strtod_l+0xa86>
 8008490:	2f00      	cmp	r7, #0
 8008492:	f43f ad7e 	beq.w	8007f92 <_strtod_l+0x582>
 8008496:	4b61      	ldr	r3, [pc, #388]	; (800861c <_strtod_l+0xc0c>)
 8008498:	2200      	movs	r2, #0
 800849a:	e78c      	b.n	80083b6 <_strtod_l+0x9a6>
 800849c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008618 <_strtod_l+0xc08>
 80084a0:	f04f 0800 	mov.w	r8, #0
 80084a4:	e7e7      	b.n	8008476 <_strtod_l+0xa66>
 80084a6:	4b5c      	ldr	r3, [pc, #368]	; (8008618 <_strtod_l+0xc08>)
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	2200      	movs	r2, #0
 80084ae:	f7f8 f8ab 	bl	8000608 <__aeabi_dmul>
 80084b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084b4:	4680      	mov	r8, r0
 80084b6:	4689      	mov	r9, r1
 80084b8:	b933      	cbnz	r3, 80084c8 <_strtod_l+0xab8>
 80084ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084be:	9012      	str	r0, [sp, #72]	; 0x48
 80084c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80084c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80084c6:	e7dd      	b.n	8008484 <_strtod_l+0xa74>
 80084c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80084cc:	e7f9      	b.n	80084c2 <_strtod_l+0xab2>
 80084ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80084d2:	9b04      	ldr	r3, [sp, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1a8      	bne.n	800842a <_strtod_l+0xa1a>
 80084d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80084de:	0d1b      	lsrs	r3, r3, #20
 80084e0:	051b      	lsls	r3, r3, #20
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d1a1      	bne.n	800842a <_strtod_l+0xa1a>
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f8 fbed 	bl	8000cc8 <__aeabi_d2lz>
 80084ee:	f7f8 f85d 	bl	80005ac <__aeabi_l2d>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4640      	mov	r0, r8
 80084f8:	4649      	mov	r1, r9
 80084fa:	f7f7 fecd 	bl	8000298 <__aeabi_dsub>
 80084fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008500:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008504:	ea43 030a 	orr.w	r3, r3, sl
 8008508:	4313      	orrs	r3, r2
 800850a:	4680      	mov	r8, r0
 800850c:	4689      	mov	r9, r1
 800850e:	d053      	beq.n	80085b8 <_strtod_l+0xba8>
 8008510:	a335      	add	r3, pc, #212	; (adr r3, 80085e8 <_strtod_l+0xbd8>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f7f8 fae9 	bl	8000aec <__aeabi_dcmplt>
 800851a:	2800      	cmp	r0, #0
 800851c:	f47f acce 	bne.w	8007ebc <_strtod_l+0x4ac>
 8008520:	a333      	add	r3, pc, #204	; (adr r3, 80085f0 <_strtod_l+0xbe0>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	4640      	mov	r0, r8
 8008528:	4649      	mov	r1, r9
 800852a:	f7f8 fafd 	bl	8000b28 <__aeabi_dcmpgt>
 800852e:	2800      	cmp	r0, #0
 8008530:	f43f af7b 	beq.w	800842a <_strtod_l+0xa1a>
 8008534:	e4c2      	b.n	8007ebc <_strtod_l+0x4ac>
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	b333      	cbz	r3, 8008588 <_strtod_l+0xb78>
 800853a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800853c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008540:	d822      	bhi.n	8008588 <_strtod_l+0xb78>
 8008542:	a32d      	add	r3, pc, #180	; (adr r3, 80085f8 <_strtod_l+0xbe8>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f8 fad8 	bl	8000b00 <__aeabi_dcmple>
 8008550:	b1a0      	cbz	r0, 800857c <_strtod_l+0xb6c>
 8008552:	4649      	mov	r1, r9
 8008554:	4640      	mov	r0, r8
 8008556:	f7f8 fb2f 	bl	8000bb8 <__aeabi_d2uiz>
 800855a:	2801      	cmp	r0, #1
 800855c:	bf38      	it	cc
 800855e:	2001      	movcc	r0, #1
 8008560:	f7f7 ffd8 	bl	8000514 <__aeabi_ui2d>
 8008564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008566:	4680      	mov	r8, r0
 8008568:	4689      	mov	r9, r1
 800856a:	bb13      	cbnz	r3, 80085b2 <_strtod_l+0xba2>
 800856c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008570:	9014      	str	r0, [sp, #80]	; 0x50
 8008572:	9315      	str	r3, [sp, #84]	; 0x54
 8008574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008578:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800857c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800857e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008580:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	930d      	str	r3, [sp, #52]	; 0x34
 8008588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800858c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008594:	f001 fe54 	bl	800a240 <__ulp>
 8008598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800859c:	ec53 2b10 	vmov	r2, r3, d0
 80085a0:	f7f8 f832 	bl	8000608 <__aeabi_dmul>
 80085a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085a8:	f7f7 fe78 	bl	800029c <__adddf3>
 80085ac:	4682      	mov	sl, r0
 80085ae:	468b      	mov	fp, r1
 80085b0:	e78f      	b.n	80084d2 <_strtod_l+0xac2>
 80085b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80085b6:	e7dd      	b.n	8008574 <_strtod_l+0xb64>
 80085b8:	a311      	add	r3, pc, #68	; (adr r3, 8008600 <_strtod_l+0xbf0>)
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f7f8 fa95 	bl	8000aec <__aeabi_dcmplt>
 80085c2:	e7b4      	b.n	800852e <_strtod_l+0xb1e>
 80085c4:	2300      	movs	r3, #0
 80085c6:	930e      	str	r3, [sp, #56]	; 0x38
 80085c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	f7ff ba65 	b.w	8007a9c <_strtod_l+0x8c>
 80085d2:	2b65      	cmp	r3, #101	; 0x65
 80085d4:	f43f ab5d 	beq.w	8007c92 <_strtod_l+0x282>
 80085d8:	2b45      	cmp	r3, #69	; 0x45
 80085da:	f43f ab5a 	beq.w	8007c92 <_strtod_l+0x282>
 80085de:	2201      	movs	r2, #1
 80085e0:	f7ff bb92 	b.w	8007d08 <_strtod_l+0x2f8>
 80085e4:	f3af 8000 	nop.w
 80085e8:	94a03595 	.word	0x94a03595
 80085ec:	3fdfffff 	.word	0x3fdfffff
 80085f0:	35afe535 	.word	0x35afe535
 80085f4:	3fe00000 	.word	0x3fe00000
 80085f8:	ffc00000 	.word	0xffc00000
 80085fc:	41dfffff 	.word	0x41dfffff
 8008600:	94a03595 	.word	0x94a03595
 8008604:	3fcfffff 	.word	0x3fcfffff
 8008608:	3ff00000 	.word	0x3ff00000
 800860c:	7ff00000 	.word	0x7ff00000
 8008610:	7fe00000 	.word	0x7fe00000
 8008614:	7c9fffff 	.word	0x7c9fffff
 8008618:	3fe00000 	.word	0x3fe00000
 800861c:	bff00000 	.word	0xbff00000
 8008620:	7fefffff 	.word	0x7fefffff

08008624 <_strtod_r>:
 8008624:	4b01      	ldr	r3, [pc, #4]	; (800862c <_strtod_r+0x8>)
 8008626:	f7ff b9f3 	b.w	8007a10 <_strtod_l>
 800862a:	bf00      	nop
 800862c:	20000074 	.word	0x20000074

08008630 <_strtol_l.isra.0>:
 8008630:	2b01      	cmp	r3, #1
 8008632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008636:	d001      	beq.n	800863c <_strtol_l.isra.0+0xc>
 8008638:	2b24      	cmp	r3, #36	; 0x24
 800863a:	d906      	bls.n	800864a <_strtol_l.isra.0+0x1a>
 800863c:	f7fe faf8 	bl	8006c30 <__errno>
 8008640:	2316      	movs	r3, #22
 8008642:	6003      	str	r3, [r0, #0]
 8008644:	2000      	movs	r0, #0
 8008646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864a:	4f3a      	ldr	r7, [pc, #232]	; (8008734 <_strtol_l.isra.0+0x104>)
 800864c:	468e      	mov	lr, r1
 800864e:	4676      	mov	r6, lr
 8008650:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008654:	5de5      	ldrb	r5, [r4, r7]
 8008656:	f015 0508 	ands.w	r5, r5, #8
 800865a:	d1f8      	bne.n	800864e <_strtol_l.isra.0+0x1e>
 800865c:	2c2d      	cmp	r4, #45	; 0x2d
 800865e:	d134      	bne.n	80086ca <_strtol_l.isra.0+0x9a>
 8008660:	f89e 4000 	ldrb.w	r4, [lr]
 8008664:	f04f 0801 	mov.w	r8, #1
 8008668:	f106 0e02 	add.w	lr, r6, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05c      	beq.n	800872a <_strtol_l.isra.0+0xfa>
 8008670:	2b10      	cmp	r3, #16
 8008672:	d10c      	bne.n	800868e <_strtol_l.isra.0+0x5e>
 8008674:	2c30      	cmp	r4, #48	; 0x30
 8008676:	d10a      	bne.n	800868e <_strtol_l.isra.0+0x5e>
 8008678:	f89e 4000 	ldrb.w	r4, [lr]
 800867c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008680:	2c58      	cmp	r4, #88	; 0x58
 8008682:	d14d      	bne.n	8008720 <_strtol_l.isra.0+0xf0>
 8008684:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008688:	2310      	movs	r3, #16
 800868a:	f10e 0e02 	add.w	lr, lr, #2
 800868e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008692:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008696:	2600      	movs	r6, #0
 8008698:	fbbc f9f3 	udiv	r9, ip, r3
 800869c:	4635      	mov	r5, r6
 800869e:	fb03 ca19 	mls	sl, r3, r9, ip
 80086a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80086a6:	2f09      	cmp	r7, #9
 80086a8:	d818      	bhi.n	80086dc <_strtol_l.isra.0+0xac>
 80086aa:	463c      	mov	r4, r7
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	dd24      	ble.n	80086fa <_strtol_l.isra.0+0xca>
 80086b0:	2e00      	cmp	r6, #0
 80086b2:	db1f      	blt.n	80086f4 <_strtol_l.isra.0+0xc4>
 80086b4:	45a9      	cmp	r9, r5
 80086b6:	d31d      	bcc.n	80086f4 <_strtol_l.isra.0+0xc4>
 80086b8:	d101      	bne.n	80086be <_strtol_l.isra.0+0x8e>
 80086ba:	45a2      	cmp	sl, r4
 80086bc:	db1a      	blt.n	80086f4 <_strtol_l.isra.0+0xc4>
 80086be:	fb05 4503 	mla	r5, r5, r3, r4
 80086c2:	2601      	movs	r6, #1
 80086c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80086c8:	e7eb      	b.n	80086a2 <_strtol_l.isra.0+0x72>
 80086ca:	2c2b      	cmp	r4, #43	; 0x2b
 80086cc:	bf08      	it	eq
 80086ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 80086d2:	46a8      	mov	r8, r5
 80086d4:	bf08      	it	eq
 80086d6:	f106 0e02 	addeq.w	lr, r6, #2
 80086da:	e7c7      	b.n	800866c <_strtol_l.isra.0+0x3c>
 80086dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80086e0:	2f19      	cmp	r7, #25
 80086e2:	d801      	bhi.n	80086e8 <_strtol_l.isra.0+0xb8>
 80086e4:	3c37      	subs	r4, #55	; 0x37
 80086e6:	e7e1      	b.n	80086ac <_strtol_l.isra.0+0x7c>
 80086e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80086ec:	2f19      	cmp	r7, #25
 80086ee:	d804      	bhi.n	80086fa <_strtol_l.isra.0+0xca>
 80086f0:	3c57      	subs	r4, #87	; 0x57
 80086f2:	e7db      	b.n	80086ac <_strtol_l.isra.0+0x7c>
 80086f4:	f04f 36ff 	mov.w	r6, #4294967295
 80086f8:	e7e4      	b.n	80086c4 <_strtol_l.isra.0+0x94>
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	da05      	bge.n	800870a <_strtol_l.isra.0+0xda>
 80086fe:	2322      	movs	r3, #34	; 0x22
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	4665      	mov	r5, ip
 8008704:	b942      	cbnz	r2, 8008718 <_strtol_l.isra.0+0xe8>
 8008706:	4628      	mov	r0, r5
 8008708:	e79d      	b.n	8008646 <_strtol_l.isra.0+0x16>
 800870a:	f1b8 0f00 	cmp.w	r8, #0
 800870e:	d000      	beq.n	8008712 <_strtol_l.isra.0+0xe2>
 8008710:	426d      	negs	r5, r5
 8008712:	2a00      	cmp	r2, #0
 8008714:	d0f7      	beq.n	8008706 <_strtol_l.isra.0+0xd6>
 8008716:	b10e      	cbz	r6, 800871c <_strtol_l.isra.0+0xec>
 8008718:	f10e 31ff 	add.w	r1, lr, #4294967295
 800871c:	6011      	str	r1, [r2, #0]
 800871e:	e7f2      	b.n	8008706 <_strtol_l.isra.0+0xd6>
 8008720:	2430      	movs	r4, #48	; 0x30
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1b3      	bne.n	800868e <_strtol_l.isra.0+0x5e>
 8008726:	2308      	movs	r3, #8
 8008728:	e7b1      	b.n	800868e <_strtol_l.isra.0+0x5e>
 800872a:	2c30      	cmp	r4, #48	; 0x30
 800872c:	d0a4      	beq.n	8008678 <_strtol_l.isra.0+0x48>
 800872e:	230a      	movs	r3, #10
 8008730:	e7ad      	b.n	800868e <_strtol_l.isra.0+0x5e>
 8008732:	bf00      	nop
 8008734:	0800b5e9 	.word	0x0800b5e9

08008738 <_strtol_r>:
 8008738:	f7ff bf7a 	b.w	8008630 <_strtol_l.isra.0>

0800873c <quorem>:
 800873c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	6903      	ldr	r3, [r0, #16]
 8008742:	690c      	ldr	r4, [r1, #16]
 8008744:	42a3      	cmp	r3, r4
 8008746:	4607      	mov	r7, r0
 8008748:	f2c0 8081 	blt.w	800884e <quorem+0x112>
 800874c:	3c01      	subs	r4, #1
 800874e:	f101 0814 	add.w	r8, r1, #20
 8008752:	f100 0514 	add.w	r5, r0, #20
 8008756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008764:	3301      	adds	r3, #1
 8008766:	429a      	cmp	r2, r3
 8008768:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800876c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008770:	fbb2 f6f3 	udiv	r6, r2, r3
 8008774:	d331      	bcc.n	80087da <quorem+0x9e>
 8008776:	f04f 0e00 	mov.w	lr, #0
 800877a:	4640      	mov	r0, r8
 800877c:	46ac      	mov	ip, r5
 800877e:	46f2      	mov	sl, lr
 8008780:	f850 2b04 	ldr.w	r2, [r0], #4
 8008784:	b293      	uxth	r3, r2
 8008786:	fb06 e303 	mla	r3, r6, r3, lr
 800878a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800878e:	b29b      	uxth	r3, r3
 8008790:	ebaa 0303 	sub.w	r3, sl, r3
 8008794:	0c12      	lsrs	r2, r2, #16
 8008796:	f8dc a000 	ldr.w	sl, [ip]
 800879a:	fb06 e202 	mla	r2, r6, r2, lr
 800879e:	fa13 f38a 	uxtah	r3, r3, sl
 80087a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087a6:	fa1f fa82 	uxth.w	sl, r2
 80087aa:	f8dc 2000 	ldr.w	r2, [ip]
 80087ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80087b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087bc:	4581      	cmp	r9, r0
 80087be:	f84c 3b04 	str.w	r3, [ip], #4
 80087c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087c6:	d2db      	bcs.n	8008780 <quorem+0x44>
 80087c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80087cc:	b92b      	cbnz	r3, 80087da <quorem+0x9e>
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	3b04      	subs	r3, #4
 80087d2:	429d      	cmp	r5, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	d32e      	bcc.n	8008836 <quorem+0xfa>
 80087d8:	613c      	str	r4, [r7, #16]
 80087da:	4638      	mov	r0, r7
 80087dc:	f001 fc8c 	bl	800a0f8 <__mcmp>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	db24      	blt.n	800882e <quorem+0xf2>
 80087e4:	3601      	adds	r6, #1
 80087e6:	4628      	mov	r0, r5
 80087e8:	f04f 0c00 	mov.w	ip, #0
 80087ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80087f0:	f8d0 e000 	ldr.w	lr, [r0]
 80087f4:	b293      	uxth	r3, r2
 80087f6:	ebac 0303 	sub.w	r3, ip, r3
 80087fa:	0c12      	lsrs	r2, r2, #16
 80087fc:	fa13 f38e 	uxtah	r3, r3, lr
 8008800:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008808:	b29b      	uxth	r3, r3
 800880a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800880e:	45c1      	cmp	r9, r8
 8008810:	f840 3b04 	str.w	r3, [r0], #4
 8008814:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008818:	d2e8      	bcs.n	80087ec <quorem+0xb0>
 800881a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800881e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008822:	b922      	cbnz	r2, 800882e <quorem+0xf2>
 8008824:	3b04      	subs	r3, #4
 8008826:	429d      	cmp	r5, r3
 8008828:	461a      	mov	r2, r3
 800882a:	d30a      	bcc.n	8008842 <quorem+0x106>
 800882c:	613c      	str	r4, [r7, #16]
 800882e:	4630      	mov	r0, r6
 8008830:	b003      	add	sp, #12
 8008832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008836:	6812      	ldr	r2, [r2, #0]
 8008838:	3b04      	subs	r3, #4
 800883a:	2a00      	cmp	r2, #0
 800883c:	d1cc      	bne.n	80087d8 <quorem+0x9c>
 800883e:	3c01      	subs	r4, #1
 8008840:	e7c7      	b.n	80087d2 <quorem+0x96>
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	3b04      	subs	r3, #4
 8008846:	2a00      	cmp	r2, #0
 8008848:	d1f0      	bne.n	800882c <quorem+0xf0>
 800884a:	3c01      	subs	r4, #1
 800884c:	e7eb      	b.n	8008826 <quorem+0xea>
 800884e:	2000      	movs	r0, #0
 8008850:	e7ee      	b.n	8008830 <quorem+0xf4>
 8008852:	0000      	movs	r0, r0
 8008854:	0000      	movs	r0, r0
	...

08008858 <_dtoa_r>:
 8008858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	ed2d 8b02 	vpush	{d8}
 8008860:	ec57 6b10 	vmov	r6, r7, d0
 8008864:	b095      	sub	sp, #84	; 0x54
 8008866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800886c:	9105      	str	r1, [sp, #20]
 800886e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008872:	4604      	mov	r4, r0
 8008874:	9209      	str	r2, [sp, #36]	; 0x24
 8008876:	930f      	str	r3, [sp, #60]	; 0x3c
 8008878:	b975      	cbnz	r5, 8008898 <_dtoa_r+0x40>
 800887a:	2010      	movs	r0, #16
 800887c:	f001 f94c 	bl	8009b18 <malloc>
 8008880:	4602      	mov	r2, r0
 8008882:	6260      	str	r0, [r4, #36]	; 0x24
 8008884:	b920      	cbnz	r0, 8008890 <_dtoa_r+0x38>
 8008886:	4bb2      	ldr	r3, [pc, #712]	; (8008b50 <_dtoa_r+0x2f8>)
 8008888:	21ea      	movs	r1, #234	; 0xea
 800888a:	48b2      	ldr	r0, [pc, #712]	; (8008b54 <_dtoa_r+0x2fc>)
 800888c:	f002 f874 	bl	800a978 <__assert_func>
 8008890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008894:	6005      	str	r5, [r0, #0]
 8008896:	60c5      	str	r5, [r0, #12]
 8008898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800889a:	6819      	ldr	r1, [r3, #0]
 800889c:	b151      	cbz	r1, 80088b4 <_dtoa_r+0x5c>
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	604a      	str	r2, [r1, #4]
 80088a2:	2301      	movs	r3, #1
 80088a4:	4093      	lsls	r3, r2
 80088a6:	608b      	str	r3, [r1, #8]
 80088a8:	4620      	mov	r0, r4
 80088aa:	f001 f99d 	bl	8009be8 <_Bfree>
 80088ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	1e3b      	subs	r3, r7, #0
 80088b6:	bfb9      	ittee	lt
 80088b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088bc:	9303      	strlt	r3, [sp, #12]
 80088be:	2300      	movge	r3, #0
 80088c0:	f8c8 3000 	strge.w	r3, [r8]
 80088c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80088c8:	4ba3      	ldr	r3, [pc, #652]	; (8008b58 <_dtoa_r+0x300>)
 80088ca:	bfbc      	itt	lt
 80088cc:	2201      	movlt	r2, #1
 80088ce:	f8c8 2000 	strlt.w	r2, [r8]
 80088d2:	ea33 0309 	bics.w	r3, r3, r9
 80088d6:	d11b      	bne.n	8008910 <_dtoa_r+0xb8>
 80088d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088da:	f242 730f 	movw	r3, #9999	; 0x270f
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088e4:	4333      	orrs	r3, r6
 80088e6:	f000 857a 	beq.w	80093de <_dtoa_r+0xb86>
 80088ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ec:	b963      	cbnz	r3, 8008908 <_dtoa_r+0xb0>
 80088ee:	4b9b      	ldr	r3, [pc, #620]	; (8008b5c <_dtoa_r+0x304>)
 80088f0:	e024      	b.n	800893c <_dtoa_r+0xe4>
 80088f2:	4b9b      	ldr	r3, [pc, #620]	; (8008b60 <_dtoa_r+0x308>)
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	9800      	ldr	r0, [sp, #0]
 80088fe:	b015      	add	sp, #84	; 0x54
 8008900:	ecbd 8b02 	vpop	{d8}
 8008904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008908:	4b94      	ldr	r3, [pc, #592]	; (8008b5c <_dtoa_r+0x304>)
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	3303      	adds	r3, #3
 800890e:	e7f3      	b.n	80088f8 <_dtoa_r+0xa0>
 8008910:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008914:	2200      	movs	r2, #0
 8008916:	ec51 0b17 	vmov	r0, r1, d7
 800891a:	2300      	movs	r3, #0
 800891c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008920:	f7f8 f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 8008924:	4680      	mov	r8, r0
 8008926:	b158      	cbz	r0, 8008940 <_dtoa_r+0xe8>
 8008928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800892a:	2301      	movs	r3, #1
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 8551 	beq.w	80093d8 <_dtoa_r+0xb80>
 8008936:	488b      	ldr	r0, [pc, #556]	; (8008b64 <_dtoa_r+0x30c>)
 8008938:	6018      	str	r0, [r3, #0]
 800893a:	1e43      	subs	r3, r0, #1
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	e7dd      	b.n	80088fc <_dtoa_r+0xa4>
 8008940:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008944:	aa12      	add	r2, sp, #72	; 0x48
 8008946:	a913      	add	r1, sp, #76	; 0x4c
 8008948:	4620      	mov	r0, r4
 800894a:	f001 fcf5 	bl	800a338 <__d2b>
 800894e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008952:	4683      	mov	fp, r0
 8008954:	2d00      	cmp	r5, #0
 8008956:	d07c      	beq.n	8008a52 <_dtoa_r+0x1fa>
 8008958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800895a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800895e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008962:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008966:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800896a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800896e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008972:	4b7d      	ldr	r3, [pc, #500]	; (8008b68 <_dtoa_r+0x310>)
 8008974:	2200      	movs	r2, #0
 8008976:	4630      	mov	r0, r6
 8008978:	4639      	mov	r1, r7
 800897a:	f7f7 fc8d 	bl	8000298 <__aeabi_dsub>
 800897e:	a36e      	add	r3, pc, #440	; (adr r3, 8008b38 <_dtoa_r+0x2e0>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	a36d      	add	r3, pc, #436	; (adr r3, 8008b40 <_dtoa_r+0x2e8>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 fc85 	bl	800029c <__adddf3>
 8008992:	4606      	mov	r6, r0
 8008994:	4628      	mov	r0, r5
 8008996:	460f      	mov	r7, r1
 8008998:	f7f7 fdcc 	bl	8000534 <__aeabi_i2d>
 800899c:	a36a      	add	r3, pc, #424	; (adr r3, 8008b48 <_dtoa_r+0x2f0>)
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f7f7 fe31 	bl	8000608 <__aeabi_dmul>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f7 fc75 	bl	800029c <__adddf3>
 80089b2:	4606      	mov	r6, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	f7f8 f8d7 	bl	8000b68 <__aeabi_d2iz>
 80089ba:	2200      	movs	r2, #0
 80089bc:	4682      	mov	sl, r0
 80089be:	2300      	movs	r3, #0
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f8 f892 	bl	8000aec <__aeabi_dcmplt>
 80089c8:	b148      	cbz	r0, 80089de <_dtoa_r+0x186>
 80089ca:	4650      	mov	r0, sl
 80089cc:	f7f7 fdb2 	bl	8000534 <__aeabi_i2d>
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	f7f8 f880 	bl	8000ad8 <__aeabi_dcmpeq>
 80089d8:	b908      	cbnz	r0, 80089de <_dtoa_r+0x186>
 80089da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089de:	f1ba 0f16 	cmp.w	sl, #22
 80089e2:	d854      	bhi.n	8008a8e <_dtoa_r+0x236>
 80089e4:	4b61      	ldr	r3, [pc, #388]	; (8008b6c <_dtoa_r+0x314>)
 80089e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089f2:	f7f8 f87b 	bl	8000aec <__aeabi_dcmplt>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d04b      	beq.n	8008a92 <_dtoa_r+0x23a>
 80089fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089fe:	2300      	movs	r3, #0
 8008a00:	930e      	str	r3, [sp, #56]	; 0x38
 8008a02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a04:	1b5d      	subs	r5, r3, r5
 8008a06:	1e6b      	subs	r3, r5, #1
 8008a08:	9304      	str	r3, [sp, #16]
 8008a0a:	bf43      	ittte	mi
 8008a0c:	2300      	movmi	r3, #0
 8008a0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008a12:	9304      	strmi	r3, [sp, #16]
 8008a14:	f04f 0800 	movpl.w	r8, #0
 8008a18:	f1ba 0f00 	cmp.w	sl, #0
 8008a1c:	db3b      	blt.n	8008a96 <_dtoa_r+0x23e>
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008a24:	4453      	add	r3, sl
 8008a26:	9304      	str	r3, [sp, #16]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	9306      	str	r3, [sp, #24]
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	d869      	bhi.n	8008b06 <_dtoa_r+0x2ae>
 8008a32:	2b05      	cmp	r3, #5
 8008a34:	bfc4      	itt	gt
 8008a36:	3b04      	subgt	r3, #4
 8008a38:	9305      	strgt	r3, [sp, #20]
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	f1a3 0302 	sub.w	r3, r3, #2
 8008a40:	bfcc      	ite	gt
 8008a42:	2500      	movgt	r5, #0
 8008a44:	2501      	movle	r5, #1
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d869      	bhi.n	8008b1e <_dtoa_r+0x2c6>
 8008a4a:	e8df f003 	tbb	[pc, r3]
 8008a4e:	4e2c      	.short	0x4e2c
 8008a50:	5a4c      	.short	0x5a4c
 8008a52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a56:	441d      	add	r5, r3
 8008a58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	bfc1      	itttt	gt
 8008a60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a68:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a70:	bfda      	itte	le
 8008a72:	f1c3 0320 	rsble	r3, r3, #32
 8008a76:	fa06 f003 	lslle.w	r0, r6, r3
 8008a7a:	4318      	orrgt	r0, r3
 8008a7c:	f7f7 fd4a 	bl	8000514 <__aeabi_ui2d>
 8008a80:	2301      	movs	r3, #1
 8008a82:	4606      	mov	r6, r0
 8008a84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a88:	3d01      	subs	r5, #1
 8008a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8008a8c:	e771      	b.n	8008972 <_dtoa_r+0x11a>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e7b6      	b.n	8008a00 <_dtoa_r+0x1a8>
 8008a92:	900e      	str	r0, [sp, #56]	; 0x38
 8008a94:	e7b5      	b.n	8008a02 <_dtoa_r+0x1aa>
 8008a96:	f1ca 0300 	rsb	r3, sl, #0
 8008a9a:	9306      	str	r3, [sp, #24]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	eba8 080a 	sub.w	r8, r8, sl
 8008aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8008aa4:	e7c2      	b.n	8008a2c <_dtoa_r+0x1d4>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9308      	str	r3, [sp, #32]
 8008aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	dc39      	bgt.n	8008b24 <_dtoa_r+0x2cc>
 8008ab0:	f04f 0901 	mov.w	r9, #1
 8008ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ab8:	464b      	mov	r3, r9
 8008aba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008abe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	6042      	str	r2, [r0, #4]
 8008ac4:	2204      	movs	r2, #4
 8008ac6:	f102 0614 	add.w	r6, r2, #20
 8008aca:	429e      	cmp	r6, r3
 8008acc:	6841      	ldr	r1, [r0, #4]
 8008ace:	d92f      	bls.n	8008b30 <_dtoa_r+0x2d8>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f001 f849 	bl	8009b68 <_Balloc>
 8008ad6:	9000      	str	r0, [sp, #0]
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d14b      	bne.n	8008b74 <_dtoa_r+0x31c>
 8008adc:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <_dtoa_r+0x318>)
 8008ade:	4602      	mov	r2, r0
 8008ae0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ae4:	e6d1      	b.n	800888a <_dtoa_r+0x32>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e7de      	b.n	8008aa8 <_dtoa_r+0x250>
 8008aea:	2300      	movs	r3, #0
 8008aec:	9308      	str	r3, [sp, #32]
 8008aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af0:	eb0a 0903 	add.w	r9, sl, r3
 8008af4:	f109 0301 	add.w	r3, r9, #1
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	bfb8      	it	lt
 8008afe:	2301      	movlt	r3, #1
 8008b00:	e7dd      	b.n	8008abe <_dtoa_r+0x266>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e7f2      	b.n	8008aec <_dtoa_r+0x294>
 8008b06:	2501      	movs	r5, #1
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9305      	str	r3, [sp, #20]
 8008b0c:	9508      	str	r5, [sp, #32]
 8008b0e:	f04f 39ff 	mov.w	r9, #4294967295
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b18:	2312      	movs	r3, #18
 8008b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b1c:	e7cf      	b.n	8008abe <_dtoa_r+0x266>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	e7f4      	b.n	8008b0e <_dtoa_r+0x2b6>
 8008b24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b28:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	e7c6      	b.n	8008abe <_dtoa_r+0x266>
 8008b30:	3101      	adds	r1, #1
 8008b32:	6041      	str	r1, [r0, #4]
 8008b34:	0052      	lsls	r2, r2, #1
 8008b36:	e7c6      	b.n	8008ac6 <_dtoa_r+0x26e>
 8008b38:	636f4361 	.word	0x636f4361
 8008b3c:	3fd287a7 	.word	0x3fd287a7
 8008b40:	8b60c8b3 	.word	0x8b60c8b3
 8008b44:	3fc68a28 	.word	0x3fc68a28
 8008b48:	509f79fb 	.word	0x509f79fb
 8008b4c:	3fd34413 	.word	0x3fd34413
 8008b50:	0800b6f6 	.word	0x0800b6f6
 8008b54:	0800b70d 	.word	0x0800b70d
 8008b58:	7ff00000 	.word	0x7ff00000
 8008b5c:	0800b6f2 	.word	0x0800b6f2
 8008b60:	0800b6e9 	.word	0x0800b6e9
 8008b64:	0800b569 	.word	0x0800b569
 8008b68:	3ff80000 	.word	0x3ff80000
 8008b6c:	0800b888 	.word	0x0800b888
 8008b70:	0800b76c 	.word	0x0800b76c
 8008b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b76:	9a00      	ldr	r2, [sp, #0]
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	2b0e      	cmp	r3, #14
 8008b7e:	f200 80ad 	bhi.w	8008cdc <_dtoa_r+0x484>
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	f000 80aa 	beq.w	8008cdc <_dtoa_r+0x484>
 8008b88:	f1ba 0f00 	cmp.w	sl, #0
 8008b8c:	dd36      	ble.n	8008bfc <_dtoa_r+0x3a4>
 8008b8e:	4ac3      	ldr	r2, [pc, #780]	; (8008e9c <_dtoa_r+0x644>)
 8008b90:	f00a 030f 	and.w	r3, sl, #15
 8008b94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b98:	ed93 7b00 	vldr	d7, [r3]
 8008b9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008ba0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008ba4:	eeb0 8a47 	vmov.f32	s16, s14
 8008ba8:	eef0 8a67 	vmov.f32	s17, s15
 8008bac:	d016      	beq.n	8008bdc <_dtoa_r+0x384>
 8008bae:	4bbc      	ldr	r3, [pc, #752]	; (8008ea0 <_dtoa_r+0x648>)
 8008bb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bb8:	f7f7 fe50 	bl	800085c <__aeabi_ddiv>
 8008bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc0:	f007 070f 	and.w	r7, r7, #15
 8008bc4:	2503      	movs	r5, #3
 8008bc6:	4eb6      	ldr	r6, [pc, #728]	; (8008ea0 <_dtoa_r+0x648>)
 8008bc8:	b957      	cbnz	r7, 8008be0 <_dtoa_r+0x388>
 8008bca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bce:	ec53 2b18 	vmov	r2, r3, d8
 8008bd2:	f7f7 fe43 	bl	800085c <__aeabi_ddiv>
 8008bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bda:	e029      	b.n	8008c30 <_dtoa_r+0x3d8>
 8008bdc:	2502      	movs	r5, #2
 8008bde:	e7f2      	b.n	8008bc6 <_dtoa_r+0x36e>
 8008be0:	07f9      	lsls	r1, r7, #31
 8008be2:	d508      	bpl.n	8008bf6 <_dtoa_r+0x39e>
 8008be4:	ec51 0b18 	vmov	r0, r1, d8
 8008be8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bec:	f7f7 fd0c 	bl	8000608 <__aeabi_dmul>
 8008bf0:	ec41 0b18 	vmov	d8, r0, r1
 8008bf4:	3501      	adds	r5, #1
 8008bf6:	107f      	asrs	r7, r7, #1
 8008bf8:	3608      	adds	r6, #8
 8008bfa:	e7e5      	b.n	8008bc8 <_dtoa_r+0x370>
 8008bfc:	f000 80a6 	beq.w	8008d4c <_dtoa_r+0x4f4>
 8008c00:	f1ca 0600 	rsb	r6, sl, #0
 8008c04:	4ba5      	ldr	r3, [pc, #660]	; (8008e9c <_dtoa_r+0x644>)
 8008c06:	4fa6      	ldr	r7, [pc, #664]	; (8008ea0 <_dtoa_r+0x648>)
 8008c08:	f006 020f 	and.w	r2, r6, #15
 8008c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c18:	f7f7 fcf6 	bl	8000608 <__aeabi_dmul>
 8008c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c20:	1136      	asrs	r6, r6, #4
 8008c22:	2300      	movs	r3, #0
 8008c24:	2502      	movs	r5, #2
 8008c26:	2e00      	cmp	r6, #0
 8008c28:	f040 8085 	bne.w	8008d36 <_dtoa_r+0x4de>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1d2      	bne.n	8008bd6 <_dtoa_r+0x37e>
 8008c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 808c 	beq.w	8008d50 <_dtoa_r+0x4f8>
 8008c38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c3c:	4b99      	ldr	r3, [pc, #612]	; (8008ea4 <_dtoa_r+0x64c>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	f7f7 ff52 	bl	8000aec <__aeabi_dcmplt>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f000 8081 	beq.w	8008d50 <_dtoa_r+0x4f8>
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d07d      	beq.n	8008d50 <_dtoa_r+0x4f8>
 8008c54:	f1b9 0f00 	cmp.w	r9, #0
 8008c58:	dd3c      	ble.n	8008cd4 <_dtoa_r+0x47c>
 8008c5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	2200      	movs	r2, #0
 8008c62:	4b91      	ldr	r3, [pc, #580]	; (8008ea8 <_dtoa_r+0x650>)
 8008c64:	4630      	mov	r0, r6
 8008c66:	4639      	mov	r1, r7
 8008c68:	f7f7 fcce 	bl	8000608 <__aeabi_dmul>
 8008c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c70:	3501      	adds	r5, #1
 8008c72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008c76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7f7 fc5a 	bl	8000534 <__aeabi_i2d>
 8008c80:	4632      	mov	r2, r6
 8008c82:	463b      	mov	r3, r7
 8008c84:	f7f7 fcc0 	bl	8000608 <__aeabi_dmul>
 8008c88:	4b88      	ldr	r3, [pc, #544]	; (8008eac <_dtoa_r+0x654>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f7f7 fb06 	bl	800029c <__adddf3>
 8008c90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d15c      	bne.n	8008d5a <_dtoa_r+0x502>
 8008ca0:	4b83      	ldr	r3, [pc, #524]	; (8008eb0 <_dtoa_r+0x658>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	f7f7 faf6 	bl	8000298 <__aeabi_dsub>
 8008cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	460f      	mov	r7, r1
 8008cb4:	f7f7 ff38 	bl	8000b28 <__aeabi_dcmpgt>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	f040 8296 	bne.w	80091ea <_dtoa_r+0x992>
 8008cbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cc8:	4639      	mov	r1, r7
 8008cca:	f7f7 ff0f 	bl	8000aec <__aeabi_dcmplt>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f040 8288 	bne.w	80091e4 <_dtoa_r+0x98c>
 8008cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f2c0 8158 	blt.w	8008f94 <_dtoa_r+0x73c>
 8008ce4:	f1ba 0f0e 	cmp.w	sl, #14
 8008ce8:	f300 8154 	bgt.w	8008f94 <_dtoa_r+0x73c>
 8008cec:	4b6b      	ldr	r3, [pc, #428]	; (8008e9c <_dtoa_r+0x644>)
 8008cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f280 80e3 	bge.w	8008ec4 <_dtoa_r+0x66c>
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f300 80df 	bgt.w	8008ec4 <_dtoa_r+0x66c>
 8008d06:	f040 826d 	bne.w	80091e4 <_dtoa_r+0x98c>
 8008d0a:	4b69      	ldr	r3, [pc, #420]	; (8008eb0 <_dtoa_r+0x658>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4649      	mov	r1, r9
 8008d12:	f7f7 fc79 	bl	8000608 <__aeabi_dmul>
 8008d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d1a:	f7f7 fefb 	bl	8000b14 <__aeabi_dcmpge>
 8008d1e:	9e01      	ldr	r6, [sp, #4]
 8008d20:	4637      	mov	r7, r6
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f040 8243 	bne.w	80091ae <_dtoa_r+0x956>
 8008d28:	9d00      	ldr	r5, [sp, #0]
 8008d2a:	2331      	movs	r3, #49	; 0x31
 8008d2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008d30:	f10a 0a01 	add.w	sl, sl, #1
 8008d34:	e23f      	b.n	80091b6 <_dtoa_r+0x95e>
 8008d36:	07f2      	lsls	r2, r6, #31
 8008d38:	d505      	bpl.n	8008d46 <_dtoa_r+0x4ee>
 8008d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d3e:	f7f7 fc63 	bl	8000608 <__aeabi_dmul>
 8008d42:	3501      	adds	r5, #1
 8008d44:	2301      	movs	r3, #1
 8008d46:	1076      	asrs	r6, r6, #1
 8008d48:	3708      	adds	r7, #8
 8008d4a:	e76c      	b.n	8008c26 <_dtoa_r+0x3ce>
 8008d4c:	2502      	movs	r5, #2
 8008d4e:	e76f      	b.n	8008c30 <_dtoa_r+0x3d8>
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d56:	930c      	str	r3, [sp, #48]	; 0x30
 8008d58:	e78d      	b.n	8008c76 <_dtoa_r+0x41e>
 8008d5a:	9900      	ldr	r1, [sp, #0]
 8008d5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d60:	4b4e      	ldr	r3, [pc, #312]	; (8008e9c <_dtoa_r+0x644>)
 8008d62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d66:	4401      	add	r1, r0
 8008d68:	9102      	str	r1, [sp, #8]
 8008d6a:	9908      	ldr	r1, [sp, #32]
 8008d6c:	eeb0 8a47 	vmov.f32	s16, s14
 8008d70:	eef0 8a67 	vmov.f32	s17, s15
 8008d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d045      	beq.n	8008e0c <_dtoa_r+0x5b4>
 8008d80:	494c      	ldr	r1, [pc, #304]	; (8008eb4 <_dtoa_r+0x65c>)
 8008d82:	2000      	movs	r0, #0
 8008d84:	f7f7 fd6a 	bl	800085c <__aeabi_ddiv>
 8008d88:	ec53 2b18 	vmov	r2, r3, d8
 8008d8c:	f7f7 fa84 	bl	8000298 <__aeabi_dsub>
 8008d90:	9d00      	ldr	r5, [sp, #0]
 8008d92:	ec41 0b18 	vmov	d8, r0, r1
 8008d96:	4639      	mov	r1, r7
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7f7 fee5 	bl	8000b68 <__aeabi_d2iz>
 8008d9e:	900c      	str	r0, [sp, #48]	; 0x30
 8008da0:	f7f7 fbc8 	bl	8000534 <__aeabi_i2d>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4630      	mov	r0, r6
 8008daa:	4639      	mov	r1, r7
 8008dac:	f7f7 fa74 	bl	8000298 <__aeabi_dsub>
 8008db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008db2:	3330      	adds	r3, #48	; 0x30
 8008db4:	f805 3b01 	strb.w	r3, [r5], #1
 8008db8:	ec53 2b18 	vmov	r2, r3, d8
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	460f      	mov	r7, r1
 8008dc0:	f7f7 fe94 	bl	8000aec <__aeabi_dcmplt>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d165      	bne.n	8008e94 <_dtoa_r+0x63c>
 8008dc8:	4632      	mov	r2, r6
 8008dca:	463b      	mov	r3, r7
 8008dcc:	4935      	ldr	r1, [pc, #212]	; (8008ea4 <_dtoa_r+0x64c>)
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f7f7 fa62 	bl	8000298 <__aeabi_dsub>
 8008dd4:	ec53 2b18 	vmov	r2, r3, d8
 8008dd8:	f7f7 fe88 	bl	8000aec <__aeabi_dcmplt>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f040 80b9 	bne.w	8008f54 <_dtoa_r+0x6fc>
 8008de2:	9b02      	ldr	r3, [sp, #8]
 8008de4:	429d      	cmp	r5, r3
 8008de6:	f43f af75 	beq.w	8008cd4 <_dtoa_r+0x47c>
 8008dea:	4b2f      	ldr	r3, [pc, #188]	; (8008ea8 <_dtoa_r+0x650>)
 8008dec:	ec51 0b18 	vmov	r0, r1, d8
 8008df0:	2200      	movs	r2, #0
 8008df2:	f7f7 fc09 	bl	8000608 <__aeabi_dmul>
 8008df6:	4b2c      	ldr	r3, [pc, #176]	; (8008ea8 <_dtoa_r+0x650>)
 8008df8:	ec41 0b18 	vmov	d8, r0, r1
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4630      	mov	r0, r6
 8008e00:	4639      	mov	r1, r7
 8008e02:	f7f7 fc01 	bl	8000608 <__aeabi_dmul>
 8008e06:	4606      	mov	r6, r0
 8008e08:	460f      	mov	r7, r1
 8008e0a:	e7c4      	b.n	8008d96 <_dtoa_r+0x53e>
 8008e0c:	ec51 0b17 	vmov	r0, r1, d7
 8008e10:	f7f7 fbfa 	bl	8000608 <__aeabi_dmul>
 8008e14:	9b02      	ldr	r3, [sp, #8]
 8008e16:	9d00      	ldr	r5, [sp, #0]
 8008e18:	930c      	str	r3, [sp, #48]	; 0x30
 8008e1a:	ec41 0b18 	vmov	d8, r0, r1
 8008e1e:	4639      	mov	r1, r7
 8008e20:	4630      	mov	r0, r6
 8008e22:	f7f7 fea1 	bl	8000b68 <__aeabi_d2iz>
 8008e26:	9011      	str	r0, [sp, #68]	; 0x44
 8008e28:	f7f7 fb84 	bl	8000534 <__aeabi_i2d>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fa30 	bl	8000298 <__aeabi_dsub>
 8008e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e3a:	3330      	adds	r3, #48	; 0x30
 8008e3c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e40:	9b02      	ldr	r3, [sp, #8]
 8008e42:	429d      	cmp	r5, r3
 8008e44:	4606      	mov	r6, r0
 8008e46:	460f      	mov	r7, r1
 8008e48:	f04f 0200 	mov.w	r2, #0
 8008e4c:	d134      	bne.n	8008eb8 <_dtoa_r+0x660>
 8008e4e:	4b19      	ldr	r3, [pc, #100]	; (8008eb4 <_dtoa_r+0x65c>)
 8008e50:	ec51 0b18 	vmov	r0, r1, d8
 8008e54:	f7f7 fa22 	bl	800029c <__adddf3>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fe62 	bl	8000b28 <__aeabi_dcmpgt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d175      	bne.n	8008f54 <_dtoa_r+0x6fc>
 8008e68:	ec53 2b18 	vmov	r2, r3, d8
 8008e6c:	4911      	ldr	r1, [pc, #68]	; (8008eb4 <_dtoa_r+0x65c>)
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f7f7 fa12 	bl	8000298 <__aeabi_dsub>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 fe36 	bl	8000aec <__aeabi_dcmplt>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	f43f af27 	beq.w	8008cd4 <_dtoa_r+0x47c>
 8008e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e88:	1e6b      	subs	r3, r5, #1
 8008e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e90:	2b30      	cmp	r3, #48	; 0x30
 8008e92:	d0f8      	beq.n	8008e86 <_dtoa_r+0x62e>
 8008e94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008e98:	e04a      	b.n	8008f30 <_dtoa_r+0x6d8>
 8008e9a:	bf00      	nop
 8008e9c:	0800b888 	.word	0x0800b888
 8008ea0:	0800b860 	.word	0x0800b860
 8008ea4:	3ff00000 	.word	0x3ff00000
 8008ea8:	40240000 	.word	0x40240000
 8008eac:	401c0000 	.word	0x401c0000
 8008eb0:	40140000 	.word	0x40140000
 8008eb4:	3fe00000 	.word	0x3fe00000
 8008eb8:	4baf      	ldr	r3, [pc, #700]	; (8009178 <_dtoa_r+0x920>)
 8008eba:	f7f7 fba5 	bl	8000608 <__aeabi_dmul>
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	e7ac      	b.n	8008e1e <_dtoa_r+0x5c6>
 8008ec4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ec8:	9d00      	ldr	r5, [sp, #0]
 8008eca:	4642      	mov	r2, r8
 8008ecc:	464b      	mov	r3, r9
 8008ece:	4630      	mov	r0, r6
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	f7f7 fcc3 	bl	800085c <__aeabi_ddiv>
 8008ed6:	f7f7 fe47 	bl	8000b68 <__aeabi_d2iz>
 8008eda:	9002      	str	r0, [sp, #8]
 8008edc:	f7f7 fb2a 	bl	8000534 <__aeabi_i2d>
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4630      	mov	r0, r6
 8008eee:	4639      	mov	r1, r7
 8008ef0:	f7f7 f9d2 	bl	8000298 <__aeabi_dsub>
 8008ef4:	9e02      	ldr	r6, [sp, #8]
 8008ef6:	9f01      	ldr	r7, [sp, #4]
 8008ef8:	3630      	adds	r6, #48	; 0x30
 8008efa:	f805 6b01 	strb.w	r6, [r5], #1
 8008efe:	9e00      	ldr	r6, [sp, #0]
 8008f00:	1bae      	subs	r6, r5, r6
 8008f02:	42b7      	cmp	r7, r6
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	d137      	bne.n	8008f7a <_dtoa_r+0x722>
 8008f0a:	f7f7 f9c7 	bl	800029c <__adddf3>
 8008f0e:	4642      	mov	r2, r8
 8008f10:	464b      	mov	r3, r9
 8008f12:	4606      	mov	r6, r0
 8008f14:	460f      	mov	r7, r1
 8008f16:	f7f7 fe07 	bl	8000b28 <__aeabi_dcmpgt>
 8008f1a:	b9c8      	cbnz	r0, 8008f50 <_dtoa_r+0x6f8>
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f28:	b110      	cbz	r0, 8008f30 <_dtoa_r+0x6d8>
 8008f2a:	9b02      	ldr	r3, [sp, #8]
 8008f2c:	07d9      	lsls	r1, r3, #31
 8008f2e:	d40f      	bmi.n	8008f50 <_dtoa_r+0x6f8>
 8008f30:	4620      	mov	r0, r4
 8008f32:	4659      	mov	r1, fp
 8008f34:	f000 fe58 	bl	8009be8 <_Bfree>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	702b      	strb	r3, [r5, #0]
 8008f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f3e:	f10a 0001 	add.w	r0, sl, #1
 8008f42:	6018      	str	r0, [r3, #0]
 8008f44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f43f acd8 	beq.w	80088fc <_dtoa_r+0xa4>
 8008f4c:	601d      	str	r5, [r3, #0]
 8008f4e:	e4d5      	b.n	80088fc <_dtoa_r+0xa4>
 8008f50:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f54:	462b      	mov	r3, r5
 8008f56:	461d      	mov	r5, r3
 8008f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f5c:	2a39      	cmp	r2, #57	; 0x39
 8008f5e:	d108      	bne.n	8008f72 <_dtoa_r+0x71a>
 8008f60:	9a00      	ldr	r2, [sp, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d1f7      	bne.n	8008f56 <_dtoa_r+0x6fe>
 8008f66:	9a07      	ldr	r2, [sp, #28]
 8008f68:	9900      	ldr	r1, [sp, #0]
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	9207      	str	r2, [sp, #28]
 8008f6e:	2230      	movs	r2, #48	; 0x30
 8008f70:	700a      	strb	r2, [r1, #0]
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	3201      	adds	r2, #1
 8008f76:	701a      	strb	r2, [r3, #0]
 8008f78:	e78c      	b.n	8008e94 <_dtoa_r+0x63c>
 8008f7a:	4b7f      	ldr	r3, [pc, #508]	; (8009178 <_dtoa_r+0x920>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f7f7 fb43 	bl	8000608 <__aeabi_dmul>
 8008f82:	2200      	movs	r2, #0
 8008f84:	2300      	movs	r3, #0
 8008f86:	4606      	mov	r6, r0
 8008f88:	460f      	mov	r7, r1
 8008f8a:	f7f7 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d09b      	beq.n	8008eca <_dtoa_r+0x672>
 8008f92:	e7cd      	b.n	8008f30 <_dtoa_r+0x6d8>
 8008f94:	9a08      	ldr	r2, [sp, #32]
 8008f96:	2a00      	cmp	r2, #0
 8008f98:	f000 80c4 	beq.w	8009124 <_dtoa_r+0x8cc>
 8008f9c:	9a05      	ldr	r2, [sp, #20]
 8008f9e:	2a01      	cmp	r2, #1
 8008fa0:	f300 80a8 	bgt.w	80090f4 <_dtoa_r+0x89c>
 8008fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fa6:	2a00      	cmp	r2, #0
 8008fa8:	f000 80a0 	beq.w	80090ec <_dtoa_r+0x894>
 8008fac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fb0:	9e06      	ldr	r6, [sp, #24]
 8008fb2:	4645      	mov	r5, r8
 8008fb4:	9a04      	ldr	r2, [sp, #16]
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	441a      	add	r2, r3
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4498      	add	r8, r3
 8008fbe:	9204      	str	r2, [sp, #16]
 8008fc0:	f000 ff18 	bl	8009df4 <__i2b>
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	dd0b      	ble.n	8008fe2 <_dtoa_r+0x78a>
 8008fca:	9b04      	ldr	r3, [sp, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	dd08      	ble.n	8008fe2 <_dtoa_r+0x78a>
 8008fd0:	42ab      	cmp	r3, r5
 8008fd2:	9a04      	ldr	r2, [sp, #16]
 8008fd4:	bfa8      	it	ge
 8008fd6:	462b      	movge	r3, r5
 8008fd8:	eba8 0803 	sub.w	r8, r8, r3
 8008fdc:	1aed      	subs	r5, r5, r3
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	9b06      	ldr	r3, [sp, #24]
 8008fe4:	b1fb      	cbz	r3, 8009026 <_dtoa_r+0x7ce>
 8008fe6:	9b08      	ldr	r3, [sp, #32]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 809f 	beq.w	800912c <_dtoa_r+0x8d4>
 8008fee:	2e00      	cmp	r6, #0
 8008ff0:	dd11      	ble.n	8009016 <_dtoa_r+0x7be>
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 ffb8 	bl	8009f6c <__pow5mult>
 8008ffc:	465a      	mov	r2, fp
 8008ffe:	4601      	mov	r1, r0
 8009000:	4607      	mov	r7, r0
 8009002:	4620      	mov	r0, r4
 8009004:	f000 ff0c 	bl	8009e20 <__multiply>
 8009008:	4659      	mov	r1, fp
 800900a:	9007      	str	r0, [sp, #28]
 800900c:	4620      	mov	r0, r4
 800900e:	f000 fdeb 	bl	8009be8 <_Bfree>
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	469b      	mov	fp, r3
 8009016:	9b06      	ldr	r3, [sp, #24]
 8009018:	1b9a      	subs	r2, r3, r6
 800901a:	d004      	beq.n	8009026 <_dtoa_r+0x7ce>
 800901c:	4659      	mov	r1, fp
 800901e:	4620      	mov	r0, r4
 8009020:	f000 ffa4 	bl	8009f6c <__pow5mult>
 8009024:	4683      	mov	fp, r0
 8009026:	2101      	movs	r1, #1
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fee3 	bl	8009df4 <__i2b>
 800902e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009030:	2b00      	cmp	r3, #0
 8009032:	4606      	mov	r6, r0
 8009034:	dd7c      	ble.n	8009130 <_dtoa_r+0x8d8>
 8009036:	461a      	mov	r2, r3
 8009038:	4601      	mov	r1, r0
 800903a:	4620      	mov	r0, r4
 800903c:	f000 ff96 	bl	8009f6c <__pow5mult>
 8009040:	9b05      	ldr	r3, [sp, #20]
 8009042:	2b01      	cmp	r3, #1
 8009044:	4606      	mov	r6, r0
 8009046:	dd76      	ble.n	8009136 <_dtoa_r+0x8de>
 8009048:	2300      	movs	r3, #0
 800904a:	9306      	str	r3, [sp, #24]
 800904c:	6933      	ldr	r3, [r6, #16]
 800904e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009052:	6918      	ldr	r0, [r3, #16]
 8009054:	f000 fe7e 	bl	8009d54 <__hi0bits>
 8009058:	f1c0 0020 	rsb	r0, r0, #32
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	4418      	add	r0, r3
 8009060:	f010 001f 	ands.w	r0, r0, #31
 8009064:	f000 8086 	beq.w	8009174 <_dtoa_r+0x91c>
 8009068:	f1c0 0320 	rsb	r3, r0, #32
 800906c:	2b04      	cmp	r3, #4
 800906e:	dd7f      	ble.n	8009170 <_dtoa_r+0x918>
 8009070:	f1c0 001c 	rsb	r0, r0, #28
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	4403      	add	r3, r0
 8009078:	4480      	add	r8, r0
 800907a:	4405      	add	r5, r0
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	f1b8 0f00 	cmp.w	r8, #0
 8009082:	dd05      	ble.n	8009090 <_dtoa_r+0x838>
 8009084:	4659      	mov	r1, fp
 8009086:	4642      	mov	r2, r8
 8009088:	4620      	mov	r0, r4
 800908a:	f000 ffc9 	bl	800a020 <__lshift>
 800908e:	4683      	mov	fp, r0
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	dd05      	ble.n	80090a2 <_dtoa_r+0x84a>
 8009096:	4631      	mov	r1, r6
 8009098:	461a      	mov	r2, r3
 800909a:	4620      	mov	r0, r4
 800909c:	f000 ffc0 	bl	800a020 <__lshift>
 80090a0:	4606      	mov	r6, r0
 80090a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d069      	beq.n	800917c <_dtoa_r+0x924>
 80090a8:	4631      	mov	r1, r6
 80090aa:	4658      	mov	r0, fp
 80090ac:	f001 f824 	bl	800a0f8 <__mcmp>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	da63      	bge.n	800917c <_dtoa_r+0x924>
 80090b4:	2300      	movs	r3, #0
 80090b6:	4659      	mov	r1, fp
 80090b8:	220a      	movs	r2, #10
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 fdb6 	bl	8009c2c <__multadd>
 80090c0:	9b08      	ldr	r3, [sp, #32]
 80090c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090c6:	4683      	mov	fp, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 818f 	beq.w	80093ec <_dtoa_r+0xb94>
 80090ce:	4639      	mov	r1, r7
 80090d0:	2300      	movs	r3, #0
 80090d2:	220a      	movs	r2, #10
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 fda9 	bl	8009c2c <__multadd>
 80090da:	f1b9 0f00 	cmp.w	r9, #0
 80090de:	4607      	mov	r7, r0
 80090e0:	f300 808e 	bgt.w	8009200 <_dtoa_r+0x9a8>
 80090e4:	9b05      	ldr	r3, [sp, #20]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	dc50      	bgt.n	800918c <_dtoa_r+0x934>
 80090ea:	e089      	b.n	8009200 <_dtoa_r+0x9a8>
 80090ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090f2:	e75d      	b.n	8008fb0 <_dtoa_r+0x758>
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	1e5e      	subs	r6, r3, #1
 80090f8:	9b06      	ldr	r3, [sp, #24]
 80090fa:	42b3      	cmp	r3, r6
 80090fc:	bfbf      	itttt	lt
 80090fe:	9b06      	ldrlt	r3, [sp, #24]
 8009100:	9606      	strlt	r6, [sp, #24]
 8009102:	1af2      	sublt	r2, r6, r3
 8009104:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009106:	bfb6      	itet	lt
 8009108:	189b      	addlt	r3, r3, r2
 800910a:	1b9e      	subge	r6, r3, r6
 800910c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	bfb8      	it	lt
 8009112:	2600      	movlt	r6, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfb5      	itete	lt
 8009118:	eba8 0503 	sublt.w	r5, r8, r3
 800911c:	9b01      	ldrge	r3, [sp, #4]
 800911e:	2300      	movlt	r3, #0
 8009120:	4645      	movge	r5, r8
 8009122:	e747      	b.n	8008fb4 <_dtoa_r+0x75c>
 8009124:	9e06      	ldr	r6, [sp, #24]
 8009126:	9f08      	ldr	r7, [sp, #32]
 8009128:	4645      	mov	r5, r8
 800912a:	e74c      	b.n	8008fc6 <_dtoa_r+0x76e>
 800912c:	9a06      	ldr	r2, [sp, #24]
 800912e:	e775      	b.n	800901c <_dtoa_r+0x7c4>
 8009130:	9b05      	ldr	r3, [sp, #20]
 8009132:	2b01      	cmp	r3, #1
 8009134:	dc18      	bgt.n	8009168 <_dtoa_r+0x910>
 8009136:	9b02      	ldr	r3, [sp, #8]
 8009138:	b9b3      	cbnz	r3, 8009168 <_dtoa_r+0x910>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009140:	b9a3      	cbnz	r3, 800916c <_dtoa_r+0x914>
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009148:	0d1b      	lsrs	r3, r3, #20
 800914a:	051b      	lsls	r3, r3, #20
 800914c:	b12b      	cbz	r3, 800915a <_dtoa_r+0x902>
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	3301      	adds	r3, #1
 8009152:	9304      	str	r3, [sp, #16]
 8009154:	f108 0801 	add.w	r8, r8, #1
 8009158:	2301      	movs	r3, #1
 800915a:	9306      	str	r3, [sp, #24]
 800915c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800915e:	2b00      	cmp	r3, #0
 8009160:	f47f af74 	bne.w	800904c <_dtoa_r+0x7f4>
 8009164:	2001      	movs	r0, #1
 8009166:	e779      	b.n	800905c <_dtoa_r+0x804>
 8009168:	2300      	movs	r3, #0
 800916a:	e7f6      	b.n	800915a <_dtoa_r+0x902>
 800916c:	9b02      	ldr	r3, [sp, #8]
 800916e:	e7f4      	b.n	800915a <_dtoa_r+0x902>
 8009170:	d085      	beq.n	800907e <_dtoa_r+0x826>
 8009172:	4618      	mov	r0, r3
 8009174:	301c      	adds	r0, #28
 8009176:	e77d      	b.n	8009074 <_dtoa_r+0x81c>
 8009178:	40240000 	.word	0x40240000
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	dc38      	bgt.n	80091f4 <_dtoa_r+0x99c>
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	2b02      	cmp	r3, #2
 8009186:	dd35      	ble.n	80091f4 <_dtoa_r+0x99c>
 8009188:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800918c:	f1b9 0f00 	cmp.w	r9, #0
 8009190:	d10d      	bne.n	80091ae <_dtoa_r+0x956>
 8009192:	4631      	mov	r1, r6
 8009194:	464b      	mov	r3, r9
 8009196:	2205      	movs	r2, #5
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fd47 	bl	8009c2c <__multadd>
 800919e:	4601      	mov	r1, r0
 80091a0:	4606      	mov	r6, r0
 80091a2:	4658      	mov	r0, fp
 80091a4:	f000 ffa8 	bl	800a0f8 <__mcmp>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	f73f adbd 	bgt.w	8008d28 <_dtoa_r+0x4d0>
 80091ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b0:	9d00      	ldr	r5, [sp, #0]
 80091b2:	ea6f 0a03 	mvn.w	sl, r3
 80091b6:	f04f 0800 	mov.w	r8, #0
 80091ba:	4631      	mov	r1, r6
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fd13 	bl	8009be8 <_Bfree>
 80091c2:	2f00      	cmp	r7, #0
 80091c4:	f43f aeb4 	beq.w	8008f30 <_dtoa_r+0x6d8>
 80091c8:	f1b8 0f00 	cmp.w	r8, #0
 80091cc:	d005      	beq.n	80091da <_dtoa_r+0x982>
 80091ce:	45b8      	cmp	r8, r7
 80091d0:	d003      	beq.n	80091da <_dtoa_r+0x982>
 80091d2:	4641      	mov	r1, r8
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fd07 	bl	8009be8 <_Bfree>
 80091da:	4639      	mov	r1, r7
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 fd03 	bl	8009be8 <_Bfree>
 80091e2:	e6a5      	b.n	8008f30 <_dtoa_r+0x6d8>
 80091e4:	2600      	movs	r6, #0
 80091e6:	4637      	mov	r7, r6
 80091e8:	e7e1      	b.n	80091ae <_dtoa_r+0x956>
 80091ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80091f0:	4637      	mov	r7, r6
 80091f2:	e599      	b.n	8008d28 <_dtoa_r+0x4d0>
 80091f4:	9b08      	ldr	r3, [sp, #32]
 80091f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 80fd 	beq.w	80093fa <_dtoa_r+0xba2>
 8009200:	2d00      	cmp	r5, #0
 8009202:	dd05      	ble.n	8009210 <_dtoa_r+0x9b8>
 8009204:	4639      	mov	r1, r7
 8009206:	462a      	mov	r2, r5
 8009208:	4620      	mov	r0, r4
 800920a:	f000 ff09 	bl	800a020 <__lshift>
 800920e:	4607      	mov	r7, r0
 8009210:	9b06      	ldr	r3, [sp, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d05c      	beq.n	80092d0 <_dtoa_r+0xa78>
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	4620      	mov	r0, r4
 800921a:	f000 fca5 	bl	8009b68 <_Balloc>
 800921e:	4605      	mov	r5, r0
 8009220:	b928      	cbnz	r0, 800922e <_dtoa_r+0x9d6>
 8009222:	4b80      	ldr	r3, [pc, #512]	; (8009424 <_dtoa_r+0xbcc>)
 8009224:	4602      	mov	r2, r0
 8009226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800922a:	f7ff bb2e 	b.w	800888a <_dtoa_r+0x32>
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	3202      	adds	r2, #2
 8009232:	0092      	lsls	r2, r2, #2
 8009234:	f107 010c 	add.w	r1, r7, #12
 8009238:	300c      	adds	r0, #12
 800923a:	f000 fc87 	bl	8009b4c <memcpy>
 800923e:	2201      	movs	r2, #1
 8009240:	4629      	mov	r1, r5
 8009242:	4620      	mov	r0, r4
 8009244:	f000 feec 	bl	800a020 <__lshift>
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	3301      	adds	r3, #1
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	9b00      	ldr	r3, [sp, #0]
 8009250:	444b      	add	r3, r9
 8009252:	9307      	str	r3, [sp, #28]
 8009254:	9b02      	ldr	r3, [sp, #8]
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	46b8      	mov	r8, r7
 800925c:	9306      	str	r3, [sp, #24]
 800925e:	4607      	mov	r7, r0
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	4631      	mov	r1, r6
 8009264:	3b01      	subs	r3, #1
 8009266:	4658      	mov	r0, fp
 8009268:	9302      	str	r3, [sp, #8]
 800926a:	f7ff fa67 	bl	800873c <quorem>
 800926e:	4603      	mov	r3, r0
 8009270:	3330      	adds	r3, #48	; 0x30
 8009272:	9004      	str	r0, [sp, #16]
 8009274:	4641      	mov	r1, r8
 8009276:	4658      	mov	r0, fp
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	f000 ff3d 	bl	800a0f8 <__mcmp>
 800927e:	463a      	mov	r2, r7
 8009280:	4681      	mov	r9, r0
 8009282:	4631      	mov	r1, r6
 8009284:	4620      	mov	r0, r4
 8009286:	f000 ff53 	bl	800a130 <__mdiff>
 800928a:	68c2      	ldr	r2, [r0, #12]
 800928c:	9b08      	ldr	r3, [sp, #32]
 800928e:	4605      	mov	r5, r0
 8009290:	bb02      	cbnz	r2, 80092d4 <_dtoa_r+0xa7c>
 8009292:	4601      	mov	r1, r0
 8009294:	4658      	mov	r0, fp
 8009296:	f000 ff2f 	bl	800a0f8 <__mcmp>
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	4602      	mov	r2, r0
 800929e:	4629      	mov	r1, r5
 80092a0:	4620      	mov	r0, r4
 80092a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80092a6:	f000 fc9f 	bl	8009be8 <_Bfree>
 80092aa:	9b05      	ldr	r3, [sp, #20]
 80092ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ae:	9d01      	ldr	r5, [sp, #4]
 80092b0:	ea43 0102 	orr.w	r1, r3, r2
 80092b4:	9b06      	ldr	r3, [sp, #24]
 80092b6:	430b      	orrs	r3, r1
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	d10d      	bne.n	80092d8 <_dtoa_r+0xa80>
 80092bc:	2b39      	cmp	r3, #57	; 0x39
 80092be:	d029      	beq.n	8009314 <_dtoa_r+0xabc>
 80092c0:	f1b9 0f00 	cmp.w	r9, #0
 80092c4:	dd01      	ble.n	80092ca <_dtoa_r+0xa72>
 80092c6:	9b04      	ldr	r3, [sp, #16]
 80092c8:	3331      	adds	r3, #49	; 0x31
 80092ca:	9a02      	ldr	r2, [sp, #8]
 80092cc:	7013      	strb	r3, [r2, #0]
 80092ce:	e774      	b.n	80091ba <_dtoa_r+0x962>
 80092d0:	4638      	mov	r0, r7
 80092d2:	e7b9      	b.n	8009248 <_dtoa_r+0x9f0>
 80092d4:	2201      	movs	r2, #1
 80092d6:	e7e2      	b.n	800929e <_dtoa_r+0xa46>
 80092d8:	f1b9 0f00 	cmp.w	r9, #0
 80092dc:	db06      	blt.n	80092ec <_dtoa_r+0xa94>
 80092de:	9905      	ldr	r1, [sp, #20]
 80092e0:	ea41 0909 	orr.w	r9, r1, r9
 80092e4:	9906      	ldr	r1, [sp, #24]
 80092e6:	ea59 0101 	orrs.w	r1, r9, r1
 80092ea:	d120      	bne.n	800932e <_dtoa_r+0xad6>
 80092ec:	2a00      	cmp	r2, #0
 80092ee:	ddec      	ble.n	80092ca <_dtoa_r+0xa72>
 80092f0:	4659      	mov	r1, fp
 80092f2:	2201      	movs	r2, #1
 80092f4:	4620      	mov	r0, r4
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	f000 fe92 	bl	800a020 <__lshift>
 80092fc:	4631      	mov	r1, r6
 80092fe:	4683      	mov	fp, r0
 8009300:	f000 fefa 	bl	800a0f8 <__mcmp>
 8009304:	2800      	cmp	r0, #0
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	dc02      	bgt.n	8009310 <_dtoa_r+0xab8>
 800930a:	d1de      	bne.n	80092ca <_dtoa_r+0xa72>
 800930c:	07da      	lsls	r2, r3, #31
 800930e:	d5dc      	bpl.n	80092ca <_dtoa_r+0xa72>
 8009310:	2b39      	cmp	r3, #57	; 0x39
 8009312:	d1d8      	bne.n	80092c6 <_dtoa_r+0xa6e>
 8009314:	9a02      	ldr	r2, [sp, #8]
 8009316:	2339      	movs	r3, #57	; 0x39
 8009318:	7013      	strb	r3, [r2, #0]
 800931a:	462b      	mov	r3, r5
 800931c:	461d      	mov	r5, r3
 800931e:	3b01      	subs	r3, #1
 8009320:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009324:	2a39      	cmp	r2, #57	; 0x39
 8009326:	d050      	beq.n	80093ca <_dtoa_r+0xb72>
 8009328:	3201      	adds	r2, #1
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	e745      	b.n	80091ba <_dtoa_r+0x962>
 800932e:	2a00      	cmp	r2, #0
 8009330:	dd03      	ble.n	800933a <_dtoa_r+0xae2>
 8009332:	2b39      	cmp	r3, #57	; 0x39
 8009334:	d0ee      	beq.n	8009314 <_dtoa_r+0xabc>
 8009336:	3301      	adds	r3, #1
 8009338:	e7c7      	b.n	80092ca <_dtoa_r+0xa72>
 800933a:	9a01      	ldr	r2, [sp, #4]
 800933c:	9907      	ldr	r1, [sp, #28]
 800933e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009342:	428a      	cmp	r2, r1
 8009344:	d02a      	beq.n	800939c <_dtoa_r+0xb44>
 8009346:	4659      	mov	r1, fp
 8009348:	2300      	movs	r3, #0
 800934a:	220a      	movs	r2, #10
 800934c:	4620      	mov	r0, r4
 800934e:	f000 fc6d 	bl	8009c2c <__multadd>
 8009352:	45b8      	cmp	r8, r7
 8009354:	4683      	mov	fp, r0
 8009356:	f04f 0300 	mov.w	r3, #0
 800935a:	f04f 020a 	mov.w	r2, #10
 800935e:	4641      	mov	r1, r8
 8009360:	4620      	mov	r0, r4
 8009362:	d107      	bne.n	8009374 <_dtoa_r+0xb1c>
 8009364:	f000 fc62 	bl	8009c2c <__multadd>
 8009368:	4680      	mov	r8, r0
 800936a:	4607      	mov	r7, r0
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	3301      	adds	r3, #1
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	e775      	b.n	8009260 <_dtoa_r+0xa08>
 8009374:	f000 fc5a 	bl	8009c2c <__multadd>
 8009378:	4639      	mov	r1, r7
 800937a:	4680      	mov	r8, r0
 800937c:	2300      	movs	r3, #0
 800937e:	220a      	movs	r2, #10
 8009380:	4620      	mov	r0, r4
 8009382:	f000 fc53 	bl	8009c2c <__multadd>
 8009386:	4607      	mov	r7, r0
 8009388:	e7f0      	b.n	800936c <_dtoa_r+0xb14>
 800938a:	f1b9 0f00 	cmp.w	r9, #0
 800938e:	9a00      	ldr	r2, [sp, #0]
 8009390:	bfcc      	ite	gt
 8009392:	464d      	movgt	r5, r9
 8009394:	2501      	movle	r5, #1
 8009396:	4415      	add	r5, r2
 8009398:	f04f 0800 	mov.w	r8, #0
 800939c:	4659      	mov	r1, fp
 800939e:	2201      	movs	r2, #1
 80093a0:	4620      	mov	r0, r4
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	f000 fe3c 	bl	800a020 <__lshift>
 80093a8:	4631      	mov	r1, r6
 80093aa:	4683      	mov	fp, r0
 80093ac:	f000 fea4 	bl	800a0f8 <__mcmp>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	dcb2      	bgt.n	800931a <_dtoa_r+0xac2>
 80093b4:	d102      	bne.n	80093bc <_dtoa_r+0xb64>
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	07db      	lsls	r3, r3, #31
 80093ba:	d4ae      	bmi.n	800931a <_dtoa_r+0xac2>
 80093bc:	462b      	mov	r3, r5
 80093be:	461d      	mov	r5, r3
 80093c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093c4:	2a30      	cmp	r2, #48	; 0x30
 80093c6:	d0fa      	beq.n	80093be <_dtoa_r+0xb66>
 80093c8:	e6f7      	b.n	80091ba <_dtoa_r+0x962>
 80093ca:	9a00      	ldr	r2, [sp, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d1a5      	bne.n	800931c <_dtoa_r+0xac4>
 80093d0:	f10a 0a01 	add.w	sl, sl, #1
 80093d4:	2331      	movs	r3, #49	; 0x31
 80093d6:	e779      	b.n	80092cc <_dtoa_r+0xa74>
 80093d8:	4b13      	ldr	r3, [pc, #76]	; (8009428 <_dtoa_r+0xbd0>)
 80093da:	f7ff baaf 	b.w	800893c <_dtoa_r+0xe4>
 80093de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f47f aa86 	bne.w	80088f2 <_dtoa_r+0x9a>
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <_dtoa_r+0xbd4>)
 80093e8:	f7ff baa8 	b.w	800893c <_dtoa_r+0xe4>
 80093ec:	f1b9 0f00 	cmp.w	r9, #0
 80093f0:	dc03      	bgt.n	80093fa <_dtoa_r+0xba2>
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	f73f aec9 	bgt.w	800918c <_dtoa_r+0x934>
 80093fa:	9d00      	ldr	r5, [sp, #0]
 80093fc:	4631      	mov	r1, r6
 80093fe:	4658      	mov	r0, fp
 8009400:	f7ff f99c 	bl	800873c <quorem>
 8009404:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009408:	f805 3b01 	strb.w	r3, [r5], #1
 800940c:	9a00      	ldr	r2, [sp, #0]
 800940e:	1aaa      	subs	r2, r5, r2
 8009410:	4591      	cmp	r9, r2
 8009412:	ddba      	ble.n	800938a <_dtoa_r+0xb32>
 8009414:	4659      	mov	r1, fp
 8009416:	2300      	movs	r3, #0
 8009418:	220a      	movs	r2, #10
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fc06 	bl	8009c2c <__multadd>
 8009420:	4683      	mov	fp, r0
 8009422:	e7eb      	b.n	80093fc <_dtoa_r+0xba4>
 8009424:	0800b76c 	.word	0x0800b76c
 8009428:	0800b568 	.word	0x0800b568
 800942c:	0800b6e9 	.word	0x0800b6e9

08009430 <rshift>:
 8009430:	6903      	ldr	r3, [r0, #16]
 8009432:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800943a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800943e:	f100 0414 	add.w	r4, r0, #20
 8009442:	dd45      	ble.n	80094d0 <rshift+0xa0>
 8009444:	f011 011f 	ands.w	r1, r1, #31
 8009448:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800944c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009450:	d10c      	bne.n	800946c <rshift+0x3c>
 8009452:	f100 0710 	add.w	r7, r0, #16
 8009456:	4629      	mov	r1, r5
 8009458:	42b1      	cmp	r1, r6
 800945a:	d334      	bcc.n	80094c6 <rshift+0x96>
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	1eea      	subs	r2, r5, #3
 8009462:	4296      	cmp	r6, r2
 8009464:	bf38      	it	cc
 8009466:	2300      	movcc	r3, #0
 8009468:	4423      	add	r3, r4
 800946a:	e015      	b.n	8009498 <rshift+0x68>
 800946c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009470:	f1c1 0820 	rsb	r8, r1, #32
 8009474:	40cf      	lsrs	r7, r1
 8009476:	f105 0e04 	add.w	lr, r5, #4
 800947a:	46a1      	mov	r9, r4
 800947c:	4576      	cmp	r6, lr
 800947e:	46f4      	mov	ip, lr
 8009480:	d815      	bhi.n	80094ae <rshift+0x7e>
 8009482:	1a9b      	subs	r3, r3, r2
 8009484:	009a      	lsls	r2, r3, #2
 8009486:	3a04      	subs	r2, #4
 8009488:	3501      	adds	r5, #1
 800948a:	42ae      	cmp	r6, r5
 800948c:	bf38      	it	cc
 800948e:	2200      	movcc	r2, #0
 8009490:	18a3      	adds	r3, r4, r2
 8009492:	50a7      	str	r7, [r4, r2]
 8009494:	b107      	cbz	r7, 8009498 <rshift+0x68>
 8009496:	3304      	adds	r3, #4
 8009498:	1b1a      	subs	r2, r3, r4
 800949a:	42a3      	cmp	r3, r4
 800949c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094a0:	bf08      	it	eq
 80094a2:	2300      	moveq	r3, #0
 80094a4:	6102      	str	r2, [r0, #16]
 80094a6:	bf08      	it	eq
 80094a8:	6143      	streq	r3, [r0, #20]
 80094aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ae:	f8dc c000 	ldr.w	ip, [ip]
 80094b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80094b6:	ea4c 0707 	orr.w	r7, ip, r7
 80094ba:	f849 7b04 	str.w	r7, [r9], #4
 80094be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094c2:	40cf      	lsrs	r7, r1
 80094c4:	e7da      	b.n	800947c <rshift+0x4c>
 80094c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80094ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80094ce:	e7c3      	b.n	8009458 <rshift+0x28>
 80094d0:	4623      	mov	r3, r4
 80094d2:	e7e1      	b.n	8009498 <rshift+0x68>

080094d4 <__hexdig_fun>:
 80094d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094d8:	2b09      	cmp	r3, #9
 80094da:	d802      	bhi.n	80094e2 <__hexdig_fun+0xe>
 80094dc:	3820      	subs	r0, #32
 80094de:	b2c0      	uxtb	r0, r0
 80094e0:	4770      	bx	lr
 80094e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d801      	bhi.n	80094ee <__hexdig_fun+0x1a>
 80094ea:	3847      	subs	r0, #71	; 0x47
 80094ec:	e7f7      	b.n	80094de <__hexdig_fun+0xa>
 80094ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80094f2:	2b05      	cmp	r3, #5
 80094f4:	d801      	bhi.n	80094fa <__hexdig_fun+0x26>
 80094f6:	3827      	subs	r0, #39	; 0x27
 80094f8:	e7f1      	b.n	80094de <__hexdig_fun+0xa>
 80094fa:	2000      	movs	r0, #0
 80094fc:	4770      	bx	lr
	...

08009500 <__gethex>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	ed2d 8b02 	vpush	{d8}
 8009508:	b089      	sub	sp, #36	; 0x24
 800950a:	ee08 0a10 	vmov	s16, r0
 800950e:	9304      	str	r3, [sp, #16]
 8009510:	4bbc      	ldr	r3, [pc, #752]	; (8009804 <__gethex+0x304>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	4618      	mov	r0, r3
 8009518:	468b      	mov	fp, r1
 800951a:	4690      	mov	r8, r2
 800951c:	f7f6 fe60 	bl	80001e0 <strlen>
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	f8db 2000 	ldr.w	r2, [fp]
 8009526:	4403      	add	r3, r0
 8009528:	4682      	mov	sl, r0
 800952a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800952e:	9305      	str	r3, [sp, #20]
 8009530:	1c93      	adds	r3, r2, #2
 8009532:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009536:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800953a:	32fe      	adds	r2, #254	; 0xfe
 800953c:	18d1      	adds	r1, r2, r3
 800953e:	461f      	mov	r7, r3
 8009540:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009544:	9100      	str	r1, [sp, #0]
 8009546:	2830      	cmp	r0, #48	; 0x30
 8009548:	d0f8      	beq.n	800953c <__gethex+0x3c>
 800954a:	f7ff ffc3 	bl	80094d4 <__hexdig_fun>
 800954e:	4604      	mov	r4, r0
 8009550:	2800      	cmp	r0, #0
 8009552:	d13a      	bne.n	80095ca <__gethex+0xca>
 8009554:	9901      	ldr	r1, [sp, #4]
 8009556:	4652      	mov	r2, sl
 8009558:	4638      	mov	r0, r7
 800955a:	f001 f9ed 	bl	800a938 <strncmp>
 800955e:	4605      	mov	r5, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	d168      	bne.n	8009636 <__gethex+0x136>
 8009564:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009568:	eb07 060a 	add.w	r6, r7, sl
 800956c:	f7ff ffb2 	bl	80094d4 <__hexdig_fun>
 8009570:	2800      	cmp	r0, #0
 8009572:	d062      	beq.n	800963a <__gethex+0x13a>
 8009574:	4633      	mov	r3, r6
 8009576:	7818      	ldrb	r0, [r3, #0]
 8009578:	2830      	cmp	r0, #48	; 0x30
 800957a:	461f      	mov	r7, r3
 800957c:	f103 0301 	add.w	r3, r3, #1
 8009580:	d0f9      	beq.n	8009576 <__gethex+0x76>
 8009582:	f7ff ffa7 	bl	80094d4 <__hexdig_fun>
 8009586:	2301      	movs	r3, #1
 8009588:	fab0 f480 	clz	r4, r0
 800958c:	0964      	lsrs	r4, r4, #5
 800958e:	4635      	mov	r5, r6
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	463a      	mov	r2, r7
 8009594:	4616      	mov	r6, r2
 8009596:	3201      	adds	r2, #1
 8009598:	7830      	ldrb	r0, [r6, #0]
 800959a:	f7ff ff9b 	bl	80094d4 <__hexdig_fun>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d1f8      	bne.n	8009594 <__gethex+0x94>
 80095a2:	9901      	ldr	r1, [sp, #4]
 80095a4:	4652      	mov	r2, sl
 80095a6:	4630      	mov	r0, r6
 80095a8:	f001 f9c6 	bl	800a938 <strncmp>
 80095ac:	b980      	cbnz	r0, 80095d0 <__gethex+0xd0>
 80095ae:	b94d      	cbnz	r5, 80095c4 <__gethex+0xc4>
 80095b0:	eb06 050a 	add.w	r5, r6, sl
 80095b4:	462a      	mov	r2, r5
 80095b6:	4616      	mov	r6, r2
 80095b8:	3201      	adds	r2, #1
 80095ba:	7830      	ldrb	r0, [r6, #0]
 80095bc:	f7ff ff8a 	bl	80094d4 <__hexdig_fun>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1f8      	bne.n	80095b6 <__gethex+0xb6>
 80095c4:	1bad      	subs	r5, r5, r6
 80095c6:	00ad      	lsls	r5, r5, #2
 80095c8:	e004      	b.n	80095d4 <__gethex+0xd4>
 80095ca:	2400      	movs	r4, #0
 80095cc:	4625      	mov	r5, r4
 80095ce:	e7e0      	b.n	8009592 <__gethex+0x92>
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	d1f7      	bne.n	80095c4 <__gethex+0xc4>
 80095d4:	7833      	ldrb	r3, [r6, #0]
 80095d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095da:	2b50      	cmp	r3, #80	; 0x50
 80095dc:	d13b      	bne.n	8009656 <__gethex+0x156>
 80095de:	7873      	ldrb	r3, [r6, #1]
 80095e0:	2b2b      	cmp	r3, #43	; 0x2b
 80095e2:	d02c      	beq.n	800963e <__gethex+0x13e>
 80095e4:	2b2d      	cmp	r3, #45	; 0x2d
 80095e6:	d02e      	beq.n	8009646 <__gethex+0x146>
 80095e8:	1c71      	adds	r1, r6, #1
 80095ea:	f04f 0900 	mov.w	r9, #0
 80095ee:	7808      	ldrb	r0, [r1, #0]
 80095f0:	f7ff ff70 	bl	80094d4 <__hexdig_fun>
 80095f4:	1e43      	subs	r3, r0, #1
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b18      	cmp	r3, #24
 80095fa:	d82c      	bhi.n	8009656 <__gethex+0x156>
 80095fc:	f1a0 0210 	sub.w	r2, r0, #16
 8009600:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009604:	f7ff ff66 	bl	80094d4 <__hexdig_fun>
 8009608:	1e43      	subs	r3, r0, #1
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b18      	cmp	r3, #24
 800960e:	d91d      	bls.n	800964c <__gethex+0x14c>
 8009610:	f1b9 0f00 	cmp.w	r9, #0
 8009614:	d000      	beq.n	8009618 <__gethex+0x118>
 8009616:	4252      	negs	r2, r2
 8009618:	4415      	add	r5, r2
 800961a:	f8cb 1000 	str.w	r1, [fp]
 800961e:	b1e4      	cbz	r4, 800965a <__gethex+0x15a>
 8009620:	9b00      	ldr	r3, [sp, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	bf14      	ite	ne
 8009626:	2700      	movne	r7, #0
 8009628:	2706      	moveq	r7, #6
 800962a:	4638      	mov	r0, r7
 800962c:	b009      	add	sp, #36	; 0x24
 800962e:	ecbd 8b02 	vpop	{d8}
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	463e      	mov	r6, r7
 8009638:	4625      	mov	r5, r4
 800963a:	2401      	movs	r4, #1
 800963c:	e7ca      	b.n	80095d4 <__gethex+0xd4>
 800963e:	f04f 0900 	mov.w	r9, #0
 8009642:	1cb1      	adds	r1, r6, #2
 8009644:	e7d3      	b.n	80095ee <__gethex+0xee>
 8009646:	f04f 0901 	mov.w	r9, #1
 800964a:	e7fa      	b.n	8009642 <__gethex+0x142>
 800964c:	230a      	movs	r3, #10
 800964e:	fb03 0202 	mla	r2, r3, r2, r0
 8009652:	3a10      	subs	r2, #16
 8009654:	e7d4      	b.n	8009600 <__gethex+0x100>
 8009656:	4631      	mov	r1, r6
 8009658:	e7df      	b.n	800961a <__gethex+0x11a>
 800965a:	1bf3      	subs	r3, r6, r7
 800965c:	3b01      	subs	r3, #1
 800965e:	4621      	mov	r1, r4
 8009660:	2b07      	cmp	r3, #7
 8009662:	dc0b      	bgt.n	800967c <__gethex+0x17c>
 8009664:	ee18 0a10 	vmov	r0, s16
 8009668:	f000 fa7e 	bl	8009b68 <_Balloc>
 800966c:	4604      	mov	r4, r0
 800966e:	b940      	cbnz	r0, 8009682 <__gethex+0x182>
 8009670:	4b65      	ldr	r3, [pc, #404]	; (8009808 <__gethex+0x308>)
 8009672:	4602      	mov	r2, r0
 8009674:	21de      	movs	r1, #222	; 0xde
 8009676:	4865      	ldr	r0, [pc, #404]	; (800980c <__gethex+0x30c>)
 8009678:	f001 f97e 	bl	800a978 <__assert_func>
 800967c:	3101      	adds	r1, #1
 800967e:	105b      	asrs	r3, r3, #1
 8009680:	e7ee      	b.n	8009660 <__gethex+0x160>
 8009682:	f100 0914 	add.w	r9, r0, #20
 8009686:	f04f 0b00 	mov.w	fp, #0
 800968a:	f1ca 0301 	rsb	r3, sl, #1
 800968e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009692:	f8cd b000 	str.w	fp, [sp]
 8009696:	9306      	str	r3, [sp, #24]
 8009698:	42b7      	cmp	r7, r6
 800969a:	d340      	bcc.n	800971e <__gethex+0x21e>
 800969c:	9802      	ldr	r0, [sp, #8]
 800969e:	9b00      	ldr	r3, [sp, #0]
 80096a0:	f840 3b04 	str.w	r3, [r0], #4
 80096a4:	eba0 0009 	sub.w	r0, r0, r9
 80096a8:	1080      	asrs	r0, r0, #2
 80096aa:	0146      	lsls	r6, r0, #5
 80096ac:	6120      	str	r0, [r4, #16]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 fb50 	bl	8009d54 <__hi0bits>
 80096b4:	1a30      	subs	r0, r6, r0
 80096b6:	f8d8 6000 	ldr.w	r6, [r8]
 80096ba:	42b0      	cmp	r0, r6
 80096bc:	dd63      	ble.n	8009786 <__gethex+0x286>
 80096be:	1b87      	subs	r7, r0, r6
 80096c0:	4639      	mov	r1, r7
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 feea 	bl	800a49c <__any_on>
 80096c8:	4682      	mov	sl, r0
 80096ca:	b1a8      	cbz	r0, 80096f8 <__gethex+0x1f8>
 80096cc:	1e7b      	subs	r3, r7, #1
 80096ce:	1159      	asrs	r1, r3, #5
 80096d0:	f003 021f 	and.w	r2, r3, #31
 80096d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80096d8:	f04f 0a01 	mov.w	sl, #1
 80096dc:	fa0a f202 	lsl.w	r2, sl, r2
 80096e0:	420a      	tst	r2, r1
 80096e2:	d009      	beq.n	80096f8 <__gethex+0x1f8>
 80096e4:	4553      	cmp	r3, sl
 80096e6:	dd05      	ble.n	80096f4 <__gethex+0x1f4>
 80096e8:	1eb9      	subs	r1, r7, #2
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 fed6 	bl	800a49c <__any_on>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d145      	bne.n	8009780 <__gethex+0x280>
 80096f4:	f04f 0a02 	mov.w	sl, #2
 80096f8:	4639      	mov	r1, r7
 80096fa:	4620      	mov	r0, r4
 80096fc:	f7ff fe98 	bl	8009430 <rshift>
 8009700:	443d      	add	r5, r7
 8009702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009706:	42ab      	cmp	r3, r5
 8009708:	da4c      	bge.n	80097a4 <__gethex+0x2a4>
 800970a:	ee18 0a10 	vmov	r0, s16
 800970e:	4621      	mov	r1, r4
 8009710:	f000 fa6a 	bl	8009be8 <_Bfree>
 8009714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009716:	2300      	movs	r3, #0
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	27a3      	movs	r7, #163	; 0xa3
 800971c:	e785      	b.n	800962a <__gethex+0x12a>
 800971e:	1e73      	subs	r3, r6, #1
 8009720:	9a05      	ldr	r2, [sp, #20]
 8009722:	9303      	str	r3, [sp, #12]
 8009724:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009728:	4293      	cmp	r3, r2
 800972a:	d019      	beq.n	8009760 <__gethex+0x260>
 800972c:	f1bb 0f20 	cmp.w	fp, #32
 8009730:	d107      	bne.n	8009742 <__gethex+0x242>
 8009732:	9b02      	ldr	r3, [sp, #8]
 8009734:	9a00      	ldr	r2, [sp, #0]
 8009736:	f843 2b04 	str.w	r2, [r3], #4
 800973a:	9302      	str	r3, [sp, #8]
 800973c:	2300      	movs	r3, #0
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	469b      	mov	fp, r3
 8009742:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009746:	f7ff fec5 	bl	80094d4 <__hexdig_fun>
 800974a:	9b00      	ldr	r3, [sp, #0]
 800974c:	f000 000f 	and.w	r0, r0, #15
 8009750:	fa00 f00b 	lsl.w	r0, r0, fp
 8009754:	4303      	orrs	r3, r0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	f10b 0b04 	add.w	fp, fp, #4
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	e00d      	b.n	800977c <__gethex+0x27c>
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	9a06      	ldr	r2, [sp, #24]
 8009764:	4413      	add	r3, r2
 8009766:	42bb      	cmp	r3, r7
 8009768:	d3e0      	bcc.n	800972c <__gethex+0x22c>
 800976a:	4618      	mov	r0, r3
 800976c:	9901      	ldr	r1, [sp, #4]
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	4652      	mov	r2, sl
 8009772:	f001 f8e1 	bl	800a938 <strncmp>
 8009776:	9b07      	ldr	r3, [sp, #28]
 8009778:	2800      	cmp	r0, #0
 800977a:	d1d7      	bne.n	800972c <__gethex+0x22c>
 800977c:	461e      	mov	r6, r3
 800977e:	e78b      	b.n	8009698 <__gethex+0x198>
 8009780:	f04f 0a03 	mov.w	sl, #3
 8009784:	e7b8      	b.n	80096f8 <__gethex+0x1f8>
 8009786:	da0a      	bge.n	800979e <__gethex+0x29e>
 8009788:	1a37      	subs	r7, r6, r0
 800978a:	4621      	mov	r1, r4
 800978c:	ee18 0a10 	vmov	r0, s16
 8009790:	463a      	mov	r2, r7
 8009792:	f000 fc45 	bl	800a020 <__lshift>
 8009796:	1bed      	subs	r5, r5, r7
 8009798:	4604      	mov	r4, r0
 800979a:	f100 0914 	add.w	r9, r0, #20
 800979e:	f04f 0a00 	mov.w	sl, #0
 80097a2:	e7ae      	b.n	8009702 <__gethex+0x202>
 80097a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80097a8:	42a8      	cmp	r0, r5
 80097aa:	dd72      	ble.n	8009892 <__gethex+0x392>
 80097ac:	1b45      	subs	r5, r0, r5
 80097ae:	42ae      	cmp	r6, r5
 80097b0:	dc36      	bgt.n	8009820 <__gethex+0x320>
 80097b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d02a      	beq.n	8009810 <__gethex+0x310>
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d02c      	beq.n	8009818 <__gethex+0x318>
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d115      	bne.n	80097ee <__gethex+0x2ee>
 80097c2:	42ae      	cmp	r6, r5
 80097c4:	d113      	bne.n	80097ee <__gethex+0x2ee>
 80097c6:	2e01      	cmp	r6, #1
 80097c8:	d10b      	bne.n	80097e2 <__gethex+0x2e2>
 80097ca:	9a04      	ldr	r2, [sp, #16]
 80097cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	2301      	movs	r3, #1
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	f8c9 3000 	str.w	r3, [r9]
 80097da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097dc:	2762      	movs	r7, #98	; 0x62
 80097de:	601c      	str	r4, [r3, #0]
 80097e0:	e723      	b.n	800962a <__gethex+0x12a>
 80097e2:	1e71      	subs	r1, r6, #1
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fe59 	bl	800a49c <__any_on>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d1ed      	bne.n	80097ca <__gethex+0x2ca>
 80097ee:	ee18 0a10 	vmov	r0, s16
 80097f2:	4621      	mov	r1, r4
 80097f4:	f000 f9f8 	bl	8009be8 <_Bfree>
 80097f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097fa:	2300      	movs	r3, #0
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	2750      	movs	r7, #80	; 0x50
 8009800:	e713      	b.n	800962a <__gethex+0x12a>
 8009802:	bf00      	nop
 8009804:	0800b7e8 	.word	0x0800b7e8
 8009808:	0800b76c 	.word	0x0800b76c
 800980c:	0800b77d 	.word	0x0800b77d
 8009810:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1eb      	bne.n	80097ee <__gethex+0x2ee>
 8009816:	e7d8      	b.n	80097ca <__gethex+0x2ca>
 8009818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1d5      	bne.n	80097ca <__gethex+0x2ca>
 800981e:	e7e6      	b.n	80097ee <__gethex+0x2ee>
 8009820:	1e6f      	subs	r7, r5, #1
 8009822:	f1ba 0f00 	cmp.w	sl, #0
 8009826:	d131      	bne.n	800988c <__gethex+0x38c>
 8009828:	b127      	cbz	r7, 8009834 <__gethex+0x334>
 800982a:	4639      	mov	r1, r7
 800982c:	4620      	mov	r0, r4
 800982e:	f000 fe35 	bl	800a49c <__any_on>
 8009832:	4682      	mov	sl, r0
 8009834:	117b      	asrs	r3, r7, #5
 8009836:	2101      	movs	r1, #1
 8009838:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800983c:	f007 071f 	and.w	r7, r7, #31
 8009840:	fa01 f707 	lsl.w	r7, r1, r7
 8009844:	421f      	tst	r7, r3
 8009846:	4629      	mov	r1, r5
 8009848:	4620      	mov	r0, r4
 800984a:	bf18      	it	ne
 800984c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009850:	1b76      	subs	r6, r6, r5
 8009852:	f7ff fded 	bl	8009430 <rshift>
 8009856:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800985a:	2702      	movs	r7, #2
 800985c:	f1ba 0f00 	cmp.w	sl, #0
 8009860:	d048      	beq.n	80098f4 <__gethex+0x3f4>
 8009862:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009866:	2b02      	cmp	r3, #2
 8009868:	d015      	beq.n	8009896 <__gethex+0x396>
 800986a:	2b03      	cmp	r3, #3
 800986c:	d017      	beq.n	800989e <__gethex+0x39e>
 800986e:	2b01      	cmp	r3, #1
 8009870:	d109      	bne.n	8009886 <__gethex+0x386>
 8009872:	f01a 0f02 	tst.w	sl, #2
 8009876:	d006      	beq.n	8009886 <__gethex+0x386>
 8009878:	f8d9 0000 	ldr.w	r0, [r9]
 800987c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009880:	f01a 0f01 	tst.w	sl, #1
 8009884:	d10e      	bne.n	80098a4 <__gethex+0x3a4>
 8009886:	f047 0710 	orr.w	r7, r7, #16
 800988a:	e033      	b.n	80098f4 <__gethex+0x3f4>
 800988c:	f04f 0a01 	mov.w	sl, #1
 8009890:	e7d0      	b.n	8009834 <__gethex+0x334>
 8009892:	2701      	movs	r7, #1
 8009894:	e7e2      	b.n	800985c <__gethex+0x35c>
 8009896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009898:	f1c3 0301 	rsb	r3, r3, #1
 800989c:	9315      	str	r3, [sp, #84]	; 0x54
 800989e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0f0      	beq.n	8009886 <__gethex+0x386>
 80098a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098a8:	f104 0314 	add.w	r3, r4, #20
 80098ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80098b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80098b4:	f04f 0c00 	mov.w	ip, #0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80098be:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098c2:	d01c      	beq.n	80098fe <__gethex+0x3fe>
 80098c4:	3201      	adds	r2, #1
 80098c6:	6002      	str	r2, [r0, #0]
 80098c8:	2f02      	cmp	r7, #2
 80098ca:	f104 0314 	add.w	r3, r4, #20
 80098ce:	d13f      	bne.n	8009950 <__gethex+0x450>
 80098d0:	f8d8 2000 	ldr.w	r2, [r8]
 80098d4:	3a01      	subs	r2, #1
 80098d6:	42b2      	cmp	r2, r6
 80098d8:	d10a      	bne.n	80098f0 <__gethex+0x3f0>
 80098da:	1171      	asrs	r1, r6, #5
 80098dc:	2201      	movs	r2, #1
 80098de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098e2:	f006 061f 	and.w	r6, r6, #31
 80098e6:	fa02 f606 	lsl.w	r6, r2, r6
 80098ea:	421e      	tst	r6, r3
 80098ec:	bf18      	it	ne
 80098ee:	4617      	movne	r7, r2
 80098f0:	f047 0720 	orr.w	r7, r7, #32
 80098f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098f6:	601c      	str	r4, [r3, #0]
 80098f8:	9b04      	ldr	r3, [sp, #16]
 80098fa:	601d      	str	r5, [r3, #0]
 80098fc:	e695      	b.n	800962a <__gethex+0x12a>
 80098fe:	4299      	cmp	r1, r3
 8009900:	f843 cc04 	str.w	ip, [r3, #-4]
 8009904:	d8d8      	bhi.n	80098b8 <__gethex+0x3b8>
 8009906:	68a3      	ldr	r3, [r4, #8]
 8009908:	459b      	cmp	fp, r3
 800990a:	db19      	blt.n	8009940 <__gethex+0x440>
 800990c:	6861      	ldr	r1, [r4, #4]
 800990e:	ee18 0a10 	vmov	r0, s16
 8009912:	3101      	adds	r1, #1
 8009914:	f000 f928 	bl	8009b68 <_Balloc>
 8009918:	4681      	mov	r9, r0
 800991a:	b918      	cbnz	r0, 8009924 <__gethex+0x424>
 800991c:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <__gethex+0x488>)
 800991e:	4602      	mov	r2, r0
 8009920:	2184      	movs	r1, #132	; 0x84
 8009922:	e6a8      	b.n	8009676 <__gethex+0x176>
 8009924:	6922      	ldr	r2, [r4, #16]
 8009926:	3202      	adds	r2, #2
 8009928:	f104 010c 	add.w	r1, r4, #12
 800992c:	0092      	lsls	r2, r2, #2
 800992e:	300c      	adds	r0, #12
 8009930:	f000 f90c 	bl	8009b4c <memcpy>
 8009934:	4621      	mov	r1, r4
 8009936:	ee18 0a10 	vmov	r0, s16
 800993a:	f000 f955 	bl	8009be8 <_Bfree>
 800993e:	464c      	mov	r4, r9
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009948:	6122      	str	r2, [r4, #16]
 800994a:	2201      	movs	r2, #1
 800994c:	615a      	str	r2, [r3, #20]
 800994e:	e7bb      	b.n	80098c8 <__gethex+0x3c8>
 8009950:	6922      	ldr	r2, [r4, #16]
 8009952:	455a      	cmp	r2, fp
 8009954:	dd0b      	ble.n	800996e <__gethex+0x46e>
 8009956:	2101      	movs	r1, #1
 8009958:	4620      	mov	r0, r4
 800995a:	f7ff fd69 	bl	8009430 <rshift>
 800995e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009962:	3501      	adds	r5, #1
 8009964:	42ab      	cmp	r3, r5
 8009966:	f6ff aed0 	blt.w	800970a <__gethex+0x20a>
 800996a:	2701      	movs	r7, #1
 800996c:	e7c0      	b.n	80098f0 <__gethex+0x3f0>
 800996e:	f016 061f 	ands.w	r6, r6, #31
 8009972:	d0fa      	beq.n	800996a <__gethex+0x46a>
 8009974:	449a      	add	sl, r3
 8009976:	f1c6 0620 	rsb	r6, r6, #32
 800997a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800997e:	f000 f9e9 	bl	8009d54 <__hi0bits>
 8009982:	42b0      	cmp	r0, r6
 8009984:	dbe7      	blt.n	8009956 <__gethex+0x456>
 8009986:	e7f0      	b.n	800996a <__gethex+0x46a>
 8009988:	0800b76c 	.word	0x0800b76c

0800998c <L_shift>:
 800998c:	f1c2 0208 	rsb	r2, r2, #8
 8009990:	0092      	lsls	r2, r2, #2
 8009992:	b570      	push	{r4, r5, r6, lr}
 8009994:	f1c2 0620 	rsb	r6, r2, #32
 8009998:	6843      	ldr	r3, [r0, #4]
 800999a:	6804      	ldr	r4, [r0, #0]
 800999c:	fa03 f506 	lsl.w	r5, r3, r6
 80099a0:	432c      	orrs	r4, r5
 80099a2:	40d3      	lsrs	r3, r2
 80099a4:	6004      	str	r4, [r0, #0]
 80099a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80099aa:	4288      	cmp	r0, r1
 80099ac:	d3f4      	bcc.n	8009998 <L_shift+0xc>
 80099ae:	bd70      	pop	{r4, r5, r6, pc}

080099b0 <__match>:
 80099b0:	b530      	push	{r4, r5, lr}
 80099b2:	6803      	ldr	r3, [r0, #0]
 80099b4:	3301      	adds	r3, #1
 80099b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ba:	b914      	cbnz	r4, 80099c2 <__match+0x12>
 80099bc:	6003      	str	r3, [r0, #0]
 80099be:	2001      	movs	r0, #1
 80099c0:	bd30      	pop	{r4, r5, pc}
 80099c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099ca:	2d19      	cmp	r5, #25
 80099cc:	bf98      	it	ls
 80099ce:	3220      	addls	r2, #32
 80099d0:	42a2      	cmp	r2, r4
 80099d2:	d0f0      	beq.n	80099b6 <__match+0x6>
 80099d4:	2000      	movs	r0, #0
 80099d6:	e7f3      	b.n	80099c0 <__match+0x10>

080099d8 <__hexnan>:
 80099d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	680b      	ldr	r3, [r1, #0]
 80099de:	6801      	ldr	r1, [r0, #0]
 80099e0:	115e      	asrs	r6, r3, #5
 80099e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099e6:	f013 031f 	ands.w	r3, r3, #31
 80099ea:	b087      	sub	sp, #28
 80099ec:	bf18      	it	ne
 80099ee:	3604      	addne	r6, #4
 80099f0:	2500      	movs	r5, #0
 80099f2:	1f37      	subs	r7, r6, #4
 80099f4:	4682      	mov	sl, r0
 80099f6:	4690      	mov	r8, r2
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80099fe:	46b9      	mov	r9, r7
 8009a00:	463c      	mov	r4, r7
 8009a02:	9502      	str	r5, [sp, #8]
 8009a04:	46ab      	mov	fp, r5
 8009a06:	784a      	ldrb	r2, [r1, #1]
 8009a08:	1c4b      	adds	r3, r1, #1
 8009a0a:	9303      	str	r3, [sp, #12]
 8009a0c:	b342      	cbz	r2, 8009a60 <__hexnan+0x88>
 8009a0e:	4610      	mov	r0, r2
 8009a10:	9105      	str	r1, [sp, #20]
 8009a12:	9204      	str	r2, [sp, #16]
 8009a14:	f7ff fd5e 	bl	80094d4 <__hexdig_fun>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d14f      	bne.n	8009abc <__hexnan+0xe4>
 8009a1c:	9a04      	ldr	r2, [sp, #16]
 8009a1e:	9905      	ldr	r1, [sp, #20]
 8009a20:	2a20      	cmp	r2, #32
 8009a22:	d818      	bhi.n	8009a56 <__hexnan+0x7e>
 8009a24:	9b02      	ldr	r3, [sp, #8]
 8009a26:	459b      	cmp	fp, r3
 8009a28:	dd13      	ble.n	8009a52 <__hexnan+0x7a>
 8009a2a:	454c      	cmp	r4, r9
 8009a2c:	d206      	bcs.n	8009a3c <__hexnan+0x64>
 8009a2e:	2d07      	cmp	r5, #7
 8009a30:	dc04      	bgt.n	8009a3c <__hexnan+0x64>
 8009a32:	462a      	mov	r2, r5
 8009a34:	4649      	mov	r1, r9
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7ff ffa8 	bl	800998c <L_shift>
 8009a3c:	4544      	cmp	r4, r8
 8009a3e:	d950      	bls.n	8009ae2 <__hexnan+0x10a>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f1a4 0904 	sub.w	r9, r4, #4
 8009a46:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a4a:	f8cd b008 	str.w	fp, [sp, #8]
 8009a4e:	464c      	mov	r4, r9
 8009a50:	461d      	mov	r5, r3
 8009a52:	9903      	ldr	r1, [sp, #12]
 8009a54:	e7d7      	b.n	8009a06 <__hexnan+0x2e>
 8009a56:	2a29      	cmp	r2, #41	; 0x29
 8009a58:	d156      	bne.n	8009b08 <__hexnan+0x130>
 8009a5a:	3102      	adds	r1, #2
 8009a5c:	f8ca 1000 	str.w	r1, [sl]
 8009a60:	f1bb 0f00 	cmp.w	fp, #0
 8009a64:	d050      	beq.n	8009b08 <__hexnan+0x130>
 8009a66:	454c      	cmp	r4, r9
 8009a68:	d206      	bcs.n	8009a78 <__hexnan+0xa0>
 8009a6a:	2d07      	cmp	r5, #7
 8009a6c:	dc04      	bgt.n	8009a78 <__hexnan+0xa0>
 8009a6e:	462a      	mov	r2, r5
 8009a70:	4649      	mov	r1, r9
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7ff ff8a 	bl	800998c <L_shift>
 8009a78:	4544      	cmp	r4, r8
 8009a7a:	d934      	bls.n	8009ae6 <__hexnan+0x10e>
 8009a7c:	f1a8 0204 	sub.w	r2, r8, #4
 8009a80:	4623      	mov	r3, r4
 8009a82:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a86:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a8a:	429f      	cmp	r7, r3
 8009a8c:	d2f9      	bcs.n	8009a82 <__hexnan+0xaa>
 8009a8e:	1b3b      	subs	r3, r7, r4
 8009a90:	f023 0303 	bic.w	r3, r3, #3
 8009a94:	3304      	adds	r3, #4
 8009a96:	3401      	adds	r4, #1
 8009a98:	3e03      	subs	r6, #3
 8009a9a:	42b4      	cmp	r4, r6
 8009a9c:	bf88      	it	hi
 8009a9e:	2304      	movhi	r3, #4
 8009aa0:	4443      	add	r3, r8
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f843 2b04 	str.w	r2, [r3], #4
 8009aa8:	429f      	cmp	r7, r3
 8009aaa:	d2fb      	bcs.n	8009aa4 <__hexnan+0xcc>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	b91b      	cbnz	r3, 8009ab8 <__hexnan+0xe0>
 8009ab0:	4547      	cmp	r7, r8
 8009ab2:	d127      	bne.n	8009b04 <__hexnan+0x12c>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	2005      	movs	r0, #5
 8009aba:	e026      	b.n	8009b0a <__hexnan+0x132>
 8009abc:	3501      	adds	r5, #1
 8009abe:	2d08      	cmp	r5, #8
 8009ac0:	f10b 0b01 	add.w	fp, fp, #1
 8009ac4:	dd06      	ble.n	8009ad4 <__hexnan+0xfc>
 8009ac6:	4544      	cmp	r4, r8
 8009ac8:	d9c3      	bls.n	8009a52 <__hexnan+0x7a>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ad0:	2501      	movs	r5, #1
 8009ad2:	3c04      	subs	r4, #4
 8009ad4:	6822      	ldr	r2, [r4, #0]
 8009ad6:	f000 000f 	and.w	r0, r0, #15
 8009ada:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ade:	6022      	str	r2, [r4, #0]
 8009ae0:	e7b7      	b.n	8009a52 <__hexnan+0x7a>
 8009ae2:	2508      	movs	r5, #8
 8009ae4:	e7b5      	b.n	8009a52 <__hexnan+0x7a>
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0df      	beq.n	8009aac <__hexnan+0xd4>
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	f1c3 0320 	rsb	r3, r3, #32
 8009af4:	fa22 f303 	lsr.w	r3, r2, r3
 8009af8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009afc:	401a      	ands	r2, r3
 8009afe:	f846 2c04 	str.w	r2, [r6, #-4]
 8009b02:	e7d3      	b.n	8009aac <__hexnan+0xd4>
 8009b04:	3f04      	subs	r7, #4
 8009b06:	e7d1      	b.n	8009aac <__hexnan+0xd4>
 8009b08:	2004      	movs	r0, #4
 8009b0a:	b007      	add	sp, #28
 8009b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b10 <_localeconv_r>:
 8009b10:	4800      	ldr	r0, [pc, #0]	; (8009b14 <_localeconv_r+0x4>)
 8009b12:	4770      	bx	lr
 8009b14:	20000164 	.word	0x20000164

08009b18 <malloc>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <malloc+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f000 bd3d 	b.w	800a59c <_malloc_r>
 8009b22:	bf00      	nop
 8009b24:	2000000c 	.word	0x2000000c

08009b28 <__ascii_mbtowc>:
 8009b28:	b082      	sub	sp, #8
 8009b2a:	b901      	cbnz	r1, 8009b2e <__ascii_mbtowc+0x6>
 8009b2c:	a901      	add	r1, sp, #4
 8009b2e:	b142      	cbz	r2, 8009b42 <__ascii_mbtowc+0x1a>
 8009b30:	b14b      	cbz	r3, 8009b46 <__ascii_mbtowc+0x1e>
 8009b32:	7813      	ldrb	r3, [r2, #0]
 8009b34:	600b      	str	r3, [r1, #0]
 8009b36:	7812      	ldrb	r2, [r2, #0]
 8009b38:	1e10      	subs	r0, r2, #0
 8009b3a:	bf18      	it	ne
 8009b3c:	2001      	movne	r0, #1
 8009b3e:	b002      	add	sp, #8
 8009b40:	4770      	bx	lr
 8009b42:	4610      	mov	r0, r2
 8009b44:	e7fb      	b.n	8009b3e <__ascii_mbtowc+0x16>
 8009b46:	f06f 0001 	mvn.w	r0, #1
 8009b4a:	e7f8      	b.n	8009b3e <__ascii_mbtowc+0x16>

08009b4c <memcpy>:
 8009b4c:	440a      	add	r2, r1
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b54:	d100      	bne.n	8009b58 <memcpy+0xc>
 8009b56:	4770      	bx	lr
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b62:	4291      	cmp	r1, r2
 8009b64:	d1f9      	bne.n	8009b5a <memcpy+0xe>
 8009b66:	bd10      	pop	{r4, pc}

08009b68 <_Balloc>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	460d      	mov	r5, r1
 8009b70:	b976      	cbnz	r6, 8009b90 <_Balloc+0x28>
 8009b72:	2010      	movs	r0, #16
 8009b74:	f7ff ffd0 	bl	8009b18 <malloc>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b7c:	b920      	cbnz	r0, 8009b88 <_Balloc+0x20>
 8009b7e:	4b18      	ldr	r3, [pc, #96]	; (8009be0 <_Balloc+0x78>)
 8009b80:	4818      	ldr	r0, [pc, #96]	; (8009be4 <_Balloc+0x7c>)
 8009b82:	2166      	movs	r1, #102	; 0x66
 8009b84:	f000 fef8 	bl	800a978 <__assert_func>
 8009b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b8c:	6006      	str	r6, [r0, #0]
 8009b8e:	60c6      	str	r6, [r0, #12]
 8009b90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b92:	68f3      	ldr	r3, [r6, #12]
 8009b94:	b183      	cbz	r3, 8009bb8 <_Balloc+0x50>
 8009b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b9e:	b9b8      	cbnz	r0, 8009bd0 <_Balloc+0x68>
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ba6:	1d72      	adds	r2, r6, #5
 8009ba8:	0092      	lsls	r2, r2, #2
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 fc97 	bl	800a4de <_calloc_r>
 8009bb0:	b160      	cbz	r0, 8009bcc <_Balloc+0x64>
 8009bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bb6:	e00e      	b.n	8009bd6 <_Balloc+0x6e>
 8009bb8:	2221      	movs	r2, #33	; 0x21
 8009bba:	2104      	movs	r1, #4
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 fc8e 	bl	800a4de <_calloc_r>
 8009bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bc4:	60f0      	str	r0, [r6, #12]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e4      	bne.n	8009b96 <_Balloc+0x2e>
 8009bcc:	2000      	movs	r0, #0
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	6802      	ldr	r2, [r0, #0]
 8009bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bdc:	e7f7      	b.n	8009bce <_Balloc+0x66>
 8009bde:	bf00      	nop
 8009be0:	0800b6f6 	.word	0x0800b6f6
 8009be4:	0800b7fc 	.word	0x0800b7fc

08009be8 <_Bfree>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bec:	4605      	mov	r5, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	b976      	cbnz	r6, 8009c10 <_Bfree+0x28>
 8009bf2:	2010      	movs	r0, #16
 8009bf4:	f7ff ff90 	bl	8009b18 <malloc>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	6268      	str	r0, [r5, #36]	; 0x24
 8009bfc:	b920      	cbnz	r0, 8009c08 <_Bfree+0x20>
 8009bfe:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <_Bfree+0x3c>)
 8009c00:	4809      	ldr	r0, [pc, #36]	; (8009c28 <_Bfree+0x40>)
 8009c02:	218a      	movs	r1, #138	; 0x8a
 8009c04:	f000 feb8 	bl	800a978 <__assert_func>
 8009c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c0c:	6006      	str	r6, [r0, #0]
 8009c0e:	60c6      	str	r6, [r0, #12]
 8009c10:	b13c      	cbz	r4, 8009c22 <_Bfree+0x3a>
 8009c12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c14:	6862      	ldr	r2, [r4, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c1c:	6021      	str	r1, [r4, #0]
 8009c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
 8009c24:	0800b6f6 	.word	0x0800b6f6
 8009c28:	0800b7fc 	.word	0x0800b7fc

08009c2c <__multadd>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	690e      	ldr	r6, [r1, #16]
 8009c32:	4607      	mov	r7, r0
 8009c34:	4698      	mov	r8, r3
 8009c36:	460c      	mov	r4, r1
 8009c38:	f101 0014 	add.w	r0, r1, #20
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	6805      	ldr	r5, [r0, #0]
 8009c40:	b2a9      	uxth	r1, r5
 8009c42:	fb02 8101 	mla	r1, r2, r1, r8
 8009c46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009c4a:	0c2d      	lsrs	r5, r5, #16
 8009c4c:	fb02 c505 	mla	r5, r2, r5, ip
 8009c50:	b289      	uxth	r1, r1
 8009c52:	3301      	adds	r3, #1
 8009c54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009c58:	429e      	cmp	r6, r3
 8009c5a:	f840 1b04 	str.w	r1, [r0], #4
 8009c5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009c62:	dcec      	bgt.n	8009c3e <__multadd+0x12>
 8009c64:	f1b8 0f00 	cmp.w	r8, #0
 8009c68:	d022      	beq.n	8009cb0 <__multadd+0x84>
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	42b3      	cmp	r3, r6
 8009c6e:	dc19      	bgt.n	8009ca4 <__multadd+0x78>
 8009c70:	6861      	ldr	r1, [r4, #4]
 8009c72:	4638      	mov	r0, r7
 8009c74:	3101      	adds	r1, #1
 8009c76:	f7ff ff77 	bl	8009b68 <_Balloc>
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	b928      	cbnz	r0, 8009c8a <__multadd+0x5e>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <__multadd+0x8c>)
 8009c82:	480e      	ldr	r0, [pc, #56]	; (8009cbc <__multadd+0x90>)
 8009c84:	21b5      	movs	r1, #181	; 0xb5
 8009c86:	f000 fe77 	bl	800a978 <__assert_func>
 8009c8a:	6922      	ldr	r2, [r4, #16]
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	f104 010c 	add.w	r1, r4, #12
 8009c92:	0092      	lsls	r2, r2, #2
 8009c94:	300c      	adds	r0, #12
 8009c96:	f7ff ff59 	bl	8009b4c <memcpy>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7ff ffa3 	bl	8009be8 <_Bfree>
 8009ca2:	462c      	mov	r4, r5
 8009ca4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009ca8:	3601      	adds	r6, #1
 8009caa:	f8c3 8014 	str.w	r8, [r3, #20]
 8009cae:	6126      	str	r6, [r4, #16]
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb6:	bf00      	nop
 8009cb8:	0800b76c 	.word	0x0800b76c
 8009cbc:	0800b7fc 	.word	0x0800b7fc

08009cc0 <__s2b>:
 8009cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	4615      	mov	r5, r2
 8009cc8:	461f      	mov	r7, r3
 8009cca:	2209      	movs	r2, #9
 8009ccc:	3308      	adds	r3, #8
 8009cce:	4606      	mov	r6, r0
 8009cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	db09      	blt.n	8009cf0 <__s2b+0x30>
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7ff ff43 	bl	8009b68 <_Balloc>
 8009ce2:	b940      	cbnz	r0, 8009cf6 <__s2b+0x36>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	4b19      	ldr	r3, [pc, #100]	; (8009d4c <__s2b+0x8c>)
 8009ce8:	4819      	ldr	r0, [pc, #100]	; (8009d50 <__s2b+0x90>)
 8009cea:	21ce      	movs	r1, #206	; 0xce
 8009cec:	f000 fe44 	bl	800a978 <__assert_func>
 8009cf0:	0052      	lsls	r2, r2, #1
 8009cf2:	3101      	adds	r1, #1
 8009cf4:	e7f0      	b.n	8009cd8 <__s2b+0x18>
 8009cf6:	9b08      	ldr	r3, [sp, #32]
 8009cf8:	6143      	str	r3, [r0, #20]
 8009cfa:	2d09      	cmp	r5, #9
 8009cfc:	f04f 0301 	mov.w	r3, #1
 8009d00:	6103      	str	r3, [r0, #16]
 8009d02:	dd16      	ble.n	8009d32 <__s2b+0x72>
 8009d04:	f104 0909 	add.w	r9, r4, #9
 8009d08:	46c8      	mov	r8, r9
 8009d0a:	442c      	add	r4, r5
 8009d0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d10:	4601      	mov	r1, r0
 8009d12:	3b30      	subs	r3, #48	; 0x30
 8009d14:	220a      	movs	r2, #10
 8009d16:	4630      	mov	r0, r6
 8009d18:	f7ff ff88 	bl	8009c2c <__multadd>
 8009d1c:	45a0      	cmp	r8, r4
 8009d1e:	d1f5      	bne.n	8009d0c <__s2b+0x4c>
 8009d20:	f1a5 0408 	sub.w	r4, r5, #8
 8009d24:	444c      	add	r4, r9
 8009d26:	1b2d      	subs	r5, r5, r4
 8009d28:	1963      	adds	r3, r4, r5
 8009d2a:	42bb      	cmp	r3, r7
 8009d2c:	db04      	blt.n	8009d38 <__s2b+0x78>
 8009d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d32:	340a      	adds	r4, #10
 8009d34:	2509      	movs	r5, #9
 8009d36:	e7f6      	b.n	8009d26 <__s2b+0x66>
 8009d38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d3c:	4601      	mov	r1, r0
 8009d3e:	3b30      	subs	r3, #48	; 0x30
 8009d40:	220a      	movs	r2, #10
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff ff72 	bl	8009c2c <__multadd>
 8009d48:	e7ee      	b.n	8009d28 <__s2b+0x68>
 8009d4a:	bf00      	nop
 8009d4c:	0800b76c 	.word	0x0800b76c
 8009d50:	0800b7fc 	.word	0x0800b7fc

08009d54 <__hi0bits>:
 8009d54:	0c03      	lsrs	r3, r0, #16
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	b9d3      	cbnz	r3, 8009d90 <__hi0bits+0x3c>
 8009d5a:	0400      	lsls	r0, r0, #16
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d62:	bf04      	itt	eq
 8009d64:	0200      	lsleq	r0, r0, #8
 8009d66:	3308      	addeq	r3, #8
 8009d68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d6c:	bf04      	itt	eq
 8009d6e:	0100      	lsleq	r0, r0, #4
 8009d70:	3304      	addeq	r3, #4
 8009d72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d76:	bf04      	itt	eq
 8009d78:	0080      	lsleq	r0, r0, #2
 8009d7a:	3302      	addeq	r3, #2
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	db05      	blt.n	8009d8c <__hi0bits+0x38>
 8009d80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d84:	f103 0301 	add.w	r3, r3, #1
 8009d88:	bf08      	it	eq
 8009d8a:	2320      	moveq	r3, #32
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	4770      	bx	lr
 8009d90:	2300      	movs	r3, #0
 8009d92:	e7e4      	b.n	8009d5e <__hi0bits+0xa>

08009d94 <__lo0bits>:
 8009d94:	6803      	ldr	r3, [r0, #0]
 8009d96:	f013 0207 	ands.w	r2, r3, #7
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	d00b      	beq.n	8009db6 <__lo0bits+0x22>
 8009d9e:	07da      	lsls	r2, r3, #31
 8009da0:	d424      	bmi.n	8009dec <__lo0bits+0x58>
 8009da2:	0798      	lsls	r0, r3, #30
 8009da4:	bf49      	itett	mi
 8009da6:	085b      	lsrmi	r3, r3, #1
 8009da8:	089b      	lsrpl	r3, r3, #2
 8009daa:	2001      	movmi	r0, #1
 8009dac:	600b      	strmi	r3, [r1, #0]
 8009dae:	bf5c      	itt	pl
 8009db0:	600b      	strpl	r3, [r1, #0]
 8009db2:	2002      	movpl	r0, #2
 8009db4:	4770      	bx	lr
 8009db6:	b298      	uxth	r0, r3
 8009db8:	b9b0      	cbnz	r0, 8009de8 <__lo0bits+0x54>
 8009dba:	0c1b      	lsrs	r3, r3, #16
 8009dbc:	2010      	movs	r0, #16
 8009dbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009dc2:	bf04      	itt	eq
 8009dc4:	0a1b      	lsreq	r3, r3, #8
 8009dc6:	3008      	addeq	r0, #8
 8009dc8:	071a      	lsls	r2, r3, #28
 8009dca:	bf04      	itt	eq
 8009dcc:	091b      	lsreq	r3, r3, #4
 8009dce:	3004      	addeq	r0, #4
 8009dd0:	079a      	lsls	r2, r3, #30
 8009dd2:	bf04      	itt	eq
 8009dd4:	089b      	lsreq	r3, r3, #2
 8009dd6:	3002      	addeq	r0, #2
 8009dd8:	07da      	lsls	r2, r3, #31
 8009dda:	d403      	bmi.n	8009de4 <__lo0bits+0x50>
 8009ddc:	085b      	lsrs	r3, r3, #1
 8009dde:	f100 0001 	add.w	r0, r0, #1
 8009de2:	d005      	beq.n	8009df0 <__lo0bits+0x5c>
 8009de4:	600b      	str	r3, [r1, #0]
 8009de6:	4770      	bx	lr
 8009de8:	4610      	mov	r0, r2
 8009dea:	e7e8      	b.n	8009dbe <__lo0bits+0x2a>
 8009dec:	2000      	movs	r0, #0
 8009dee:	4770      	bx	lr
 8009df0:	2020      	movs	r0, #32
 8009df2:	4770      	bx	lr

08009df4 <__i2b>:
 8009df4:	b510      	push	{r4, lr}
 8009df6:	460c      	mov	r4, r1
 8009df8:	2101      	movs	r1, #1
 8009dfa:	f7ff feb5 	bl	8009b68 <_Balloc>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	b928      	cbnz	r0, 8009e0e <__i2b+0x1a>
 8009e02:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <__i2b+0x24>)
 8009e04:	4805      	ldr	r0, [pc, #20]	; (8009e1c <__i2b+0x28>)
 8009e06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e0a:	f000 fdb5 	bl	800a978 <__assert_func>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	6144      	str	r4, [r0, #20]
 8009e12:	6103      	str	r3, [r0, #16]
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	bf00      	nop
 8009e18:	0800b76c 	.word	0x0800b76c
 8009e1c:	0800b7fc 	.word	0x0800b7fc

08009e20 <__multiply>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	4614      	mov	r4, r2
 8009e26:	690a      	ldr	r2, [r1, #16]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	bfb8      	it	lt
 8009e2e:	460b      	movlt	r3, r1
 8009e30:	460d      	mov	r5, r1
 8009e32:	bfbc      	itt	lt
 8009e34:	4625      	movlt	r5, r4
 8009e36:	461c      	movlt	r4, r3
 8009e38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009e3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e40:	68ab      	ldr	r3, [r5, #8]
 8009e42:	6869      	ldr	r1, [r5, #4]
 8009e44:	eb0a 0709 	add.w	r7, sl, r9
 8009e48:	42bb      	cmp	r3, r7
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	bfb8      	it	lt
 8009e4e:	3101      	addlt	r1, #1
 8009e50:	f7ff fe8a 	bl	8009b68 <_Balloc>
 8009e54:	b930      	cbnz	r0, 8009e64 <__multiply+0x44>
 8009e56:	4602      	mov	r2, r0
 8009e58:	4b42      	ldr	r3, [pc, #264]	; (8009f64 <__multiply+0x144>)
 8009e5a:	4843      	ldr	r0, [pc, #268]	; (8009f68 <__multiply+0x148>)
 8009e5c:	f240 115d 	movw	r1, #349	; 0x15d
 8009e60:	f000 fd8a 	bl	800a978 <__assert_func>
 8009e64:	f100 0614 	add.w	r6, r0, #20
 8009e68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009e6c:	4633      	mov	r3, r6
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4543      	cmp	r3, r8
 8009e72:	d31e      	bcc.n	8009eb2 <__multiply+0x92>
 8009e74:	f105 0c14 	add.w	ip, r5, #20
 8009e78:	f104 0314 	add.w	r3, r4, #20
 8009e7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009e80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009e84:	9202      	str	r2, [sp, #8]
 8009e86:	ebac 0205 	sub.w	r2, ip, r5
 8009e8a:	3a15      	subs	r2, #21
 8009e8c:	f022 0203 	bic.w	r2, r2, #3
 8009e90:	3204      	adds	r2, #4
 8009e92:	f105 0115 	add.w	r1, r5, #21
 8009e96:	458c      	cmp	ip, r1
 8009e98:	bf38      	it	cc
 8009e9a:	2204      	movcc	r2, #4
 8009e9c:	9201      	str	r2, [sp, #4]
 8009e9e:	9a02      	ldr	r2, [sp, #8]
 8009ea0:	9303      	str	r3, [sp, #12]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d808      	bhi.n	8009eb8 <__multiply+0x98>
 8009ea6:	2f00      	cmp	r7, #0
 8009ea8:	dc55      	bgt.n	8009f56 <__multiply+0x136>
 8009eaa:	6107      	str	r7, [r0, #16]
 8009eac:	b005      	add	sp, #20
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	f843 2b04 	str.w	r2, [r3], #4
 8009eb6:	e7db      	b.n	8009e70 <__multiply+0x50>
 8009eb8:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ebc:	f1ba 0f00 	cmp.w	sl, #0
 8009ec0:	d020      	beq.n	8009f04 <__multiply+0xe4>
 8009ec2:	f105 0e14 	add.w	lr, r5, #20
 8009ec6:	46b1      	mov	r9, r6
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ece:	f8d9 b000 	ldr.w	fp, [r9]
 8009ed2:	b2a1      	uxth	r1, r4
 8009ed4:	fa1f fb8b 	uxth.w	fp, fp
 8009ed8:	fb0a b101 	mla	r1, sl, r1, fp
 8009edc:	4411      	add	r1, r2
 8009ede:	f8d9 2000 	ldr.w	r2, [r9]
 8009ee2:	0c24      	lsrs	r4, r4, #16
 8009ee4:	0c12      	lsrs	r2, r2, #16
 8009ee6:	fb0a 2404 	mla	r4, sl, r4, r2
 8009eea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009eee:	b289      	uxth	r1, r1
 8009ef0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ef4:	45f4      	cmp	ip, lr
 8009ef6:	f849 1b04 	str.w	r1, [r9], #4
 8009efa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009efe:	d8e4      	bhi.n	8009eca <__multiply+0xaa>
 8009f00:	9901      	ldr	r1, [sp, #4]
 8009f02:	5072      	str	r2, [r6, r1]
 8009f04:	9a03      	ldr	r2, [sp, #12]
 8009f06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	f1b9 0f00 	cmp.w	r9, #0
 8009f10:	d01f      	beq.n	8009f52 <__multiply+0x132>
 8009f12:	6834      	ldr	r4, [r6, #0]
 8009f14:	f105 0114 	add.w	r1, r5, #20
 8009f18:	46b6      	mov	lr, r6
 8009f1a:	f04f 0a00 	mov.w	sl, #0
 8009f1e:	880a      	ldrh	r2, [r1, #0]
 8009f20:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009f24:	fb09 b202 	mla	r2, r9, r2, fp
 8009f28:	4492      	add	sl, r2
 8009f2a:	b2a4      	uxth	r4, r4
 8009f2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009f30:	f84e 4b04 	str.w	r4, [lr], #4
 8009f34:	f851 4b04 	ldr.w	r4, [r1], #4
 8009f38:	f8be 2000 	ldrh.w	r2, [lr]
 8009f3c:	0c24      	lsrs	r4, r4, #16
 8009f3e:	fb09 2404 	mla	r4, r9, r4, r2
 8009f42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009f46:	458c      	cmp	ip, r1
 8009f48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009f4c:	d8e7      	bhi.n	8009f1e <__multiply+0xfe>
 8009f4e:	9a01      	ldr	r2, [sp, #4]
 8009f50:	50b4      	str	r4, [r6, r2]
 8009f52:	3604      	adds	r6, #4
 8009f54:	e7a3      	b.n	8009e9e <__multiply+0x7e>
 8009f56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1a5      	bne.n	8009eaa <__multiply+0x8a>
 8009f5e:	3f01      	subs	r7, #1
 8009f60:	e7a1      	b.n	8009ea6 <__multiply+0x86>
 8009f62:	bf00      	nop
 8009f64:	0800b76c 	.word	0x0800b76c
 8009f68:	0800b7fc 	.word	0x0800b7fc

08009f6c <__pow5mult>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	4615      	mov	r5, r2
 8009f72:	f012 0203 	ands.w	r2, r2, #3
 8009f76:	4606      	mov	r6, r0
 8009f78:	460f      	mov	r7, r1
 8009f7a:	d007      	beq.n	8009f8c <__pow5mult+0x20>
 8009f7c:	4c25      	ldr	r4, [pc, #148]	; (800a014 <__pow5mult+0xa8>)
 8009f7e:	3a01      	subs	r2, #1
 8009f80:	2300      	movs	r3, #0
 8009f82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f86:	f7ff fe51 	bl	8009c2c <__multadd>
 8009f8a:	4607      	mov	r7, r0
 8009f8c:	10ad      	asrs	r5, r5, #2
 8009f8e:	d03d      	beq.n	800a00c <__pow5mult+0xa0>
 8009f90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f92:	b97c      	cbnz	r4, 8009fb4 <__pow5mult+0x48>
 8009f94:	2010      	movs	r0, #16
 8009f96:	f7ff fdbf 	bl	8009b18 <malloc>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	6270      	str	r0, [r6, #36]	; 0x24
 8009f9e:	b928      	cbnz	r0, 8009fac <__pow5mult+0x40>
 8009fa0:	4b1d      	ldr	r3, [pc, #116]	; (800a018 <__pow5mult+0xac>)
 8009fa2:	481e      	ldr	r0, [pc, #120]	; (800a01c <__pow5mult+0xb0>)
 8009fa4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009fa8:	f000 fce6 	bl	800a978 <__assert_func>
 8009fac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fb0:	6004      	str	r4, [r0, #0]
 8009fb2:	60c4      	str	r4, [r0, #12]
 8009fb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fbc:	b94c      	cbnz	r4, 8009fd2 <__pow5mult+0x66>
 8009fbe:	f240 2171 	movw	r1, #625	; 0x271
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f7ff ff16 	bl	8009df4 <__i2b>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fce:	4604      	mov	r4, r0
 8009fd0:	6003      	str	r3, [r0, #0]
 8009fd2:	f04f 0900 	mov.w	r9, #0
 8009fd6:	07eb      	lsls	r3, r5, #31
 8009fd8:	d50a      	bpl.n	8009ff0 <__pow5mult+0x84>
 8009fda:	4639      	mov	r1, r7
 8009fdc:	4622      	mov	r2, r4
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7ff ff1e 	bl	8009e20 <__multiply>
 8009fe4:	4639      	mov	r1, r7
 8009fe6:	4680      	mov	r8, r0
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7ff fdfd 	bl	8009be8 <_Bfree>
 8009fee:	4647      	mov	r7, r8
 8009ff0:	106d      	asrs	r5, r5, #1
 8009ff2:	d00b      	beq.n	800a00c <__pow5mult+0xa0>
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	b938      	cbnz	r0, 800a008 <__pow5mult+0x9c>
 8009ff8:	4622      	mov	r2, r4
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff ff0f 	bl	8009e20 <__multiply>
 800a002:	6020      	str	r0, [r4, #0]
 800a004:	f8c0 9000 	str.w	r9, [r0]
 800a008:	4604      	mov	r4, r0
 800a00a:	e7e4      	b.n	8009fd6 <__pow5mult+0x6a>
 800a00c:	4638      	mov	r0, r7
 800a00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a012:	bf00      	nop
 800a014:	0800b950 	.word	0x0800b950
 800a018:	0800b6f6 	.word	0x0800b6f6
 800a01c:	0800b7fc 	.word	0x0800b7fc

0800a020 <__lshift>:
 800a020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a024:	460c      	mov	r4, r1
 800a026:	6849      	ldr	r1, [r1, #4]
 800a028:	6923      	ldr	r3, [r4, #16]
 800a02a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a02e:	68a3      	ldr	r3, [r4, #8]
 800a030:	4607      	mov	r7, r0
 800a032:	4691      	mov	r9, r2
 800a034:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a038:	f108 0601 	add.w	r6, r8, #1
 800a03c:	42b3      	cmp	r3, r6
 800a03e:	db0b      	blt.n	800a058 <__lshift+0x38>
 800a040:	4638      	mov	r0, r7
 800a042:	f7ff fd91 	bl	8009b68 <_Balloc>
 800a046:	4605      	mov	r5, r0
 800a048:	b948      	cbnz	r0, 800a05e <__lshift+0x3e>
 800a04a:	4602      	mov	r2, r0
 800a04c:	4b28      	ldr	r3, [pc, #160]	; (800a0f0 <__lshift+0xd0>)
 800a04e:	4829      	ldr	r0, [pc, #164]	; (800a0f4 <__lshift+0xd4>)
 800a050:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a054:	f000 fc90 	bl	800a978 <__assert_func>
 800a058:	3101      	adds	r1, #1
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	e7ee      	b.n	800a03c <__lshift+0x1c>
 800a05e:	2300      	movs	r3, #0
 800a060:	f100 0114 	add.w	r1, r0, #20
 800a064:	f100 0210 	add.w	r2, r0, #16
 800a068:	4618      	mov	r0, r3
 800a06a:	4553      	cmp	r3, sl
 800a06c:	db33      	blt.n	800a0d6 <__lshift+0xb6>
 800a06e:	6920      	ldr	r0, [r4, #16]
 800a070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a074:	f104 0314 	add.w	r3, r4, #20
 800a078:	f019 091f 	ands.w	r9, r9, #31
 800a07c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a080:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a084:	d02b      	beq.n	800a0de <__lshift+0xbe>
 800a086:	f1c9 0e20 	rsb	lr, r9, #32
 800a08a:	468a      	mov	sl, r1
 800a08c:	2200      	movs	r2, #0
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	fa00 f009 	lsl.w	r0, r0, r9
 800a094:	4302      	orrs	r2, r0
 800a096:	f84a 2b04 	str.w	r2, [sl], #4
 800a09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a09e:	459c      	cmp	ip, r3
 800a0a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0a4:	d8f3      	bhi.n	800a08e <__lshift+0x6e>
 800a0a6:	ebac 0304 	sub.w	r3, ip, r4
 800a0aa:	3b15      	subs	r3, #21
 800a0ac:	f023 0303 	bic.w	r3, r3, #3
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	f104 0015 	add.w	r0, r4, #21
 800a0b6:	4584      	cmp	ip, r0
 800a0b8:	bf38      	it	cc
 800a0ba:	2304      	movcc	r3, #4
 800a0bc:	50ca      	str	r2, [r1, r3]
 800a0be:	b10a      	cbz	r2, 800a0c4 <__lshift+0xa4>
 800a0c0:	f108 0602 	add.w	r6, r8, #2
 800a0c4:	3e01      	subs	r6, #1
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	612e      	str	r6, [r5, #16]
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	f7ff fd8c 	bl	8009be8 <_Bfree>
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0da:	3301      	adds	r3, #1
 800a0dc:	e7c5      	b.n	800a06a <__lshift+0x4a>
 800a0de:	3904      	subs	r1, #4
 800a0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0e8:	459c      	cmp	ip, r3
 800a0ea:	d8f9      	bhi.n	800a0e0 <__lshift+0xc0>
 800a0ec:	e7ea      	b.n	800a0c4 <__lshift+0xa4>
 800a0ee:	bf00      	nop
 800a0f0:	0800b76c 	.word	0x0800b76c
 800a0f4:	0800b7fc 	.word	0x0800b7fc

0800a0f8 <__mcmp>:
 800a0f8:	b530      	push	{r4, r5, lr}
 800a0fa:	6902      	ldr	r2, [r0, #16]
 800a0fc:	690c      	ldr	r4, [r1, #16]
 800a0fe:	1b12      	subs	r2, r2, r4
 800a100:	d10e      	bne.n	800a120 <__mcmp+0x28>
 800a102:	f100 0314 	add.w	r3, r0, #20
 800a106:	3114      	adds	r1, #20
 800a108:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a10c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a110:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a114:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a118:	42a5      	cmp	r5, r4
 800a11a:	d003      	beq.n	800a124 <__mcmp+0x2c>
 800a11c:	d305      	bcc.n	800a12a <__mcmp+0x32>
 800a11e:	2201      	movs	r2, #1
 800a120:	4610      	mov	r0, r2
 800a122:	bd30      	pop	{r4, r5, pc}
 800a124:	4283      	cmp	r3, r0
 800a126:	d3f3      	bcc.n	800a110 <__mcmp+0x18>
 800a128:	e7fa      	b.n	800a120 <__mcmp+0x28>
 800a12a:	f04f 32ff 	mov.w	r2, #4294967295
 800a12e:	e7f7      	b.n	800a120 <__mcmp+0x28>

0800a130 <__mdiff>:
 800a130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	460c      	mov	r4, r1
 800a136:	4606      	mov	r6, r0
 800a138:	4611      	mov	r1, r2
 800a13a:	4620      	mov	r0, r4
 800a13c:	4617      	mov	r7, r2
 800a13e:	f7ff ffdb 	bl	800a0f8 <__mcmp>
 800a142:	1e05      	subs	r5, r0, #0
 800a144:	d110      	bne.n	800a168 <__mdiff+0x38>
 800a146:	4629      	mov	r1, r5
 800a148:	4630      	mov	r0, r6
 800a14a:	f7ff fd0d 	bl	8009b68 <_Balloc>
 800a14e:	b930      	cbnz	r0, 800a15e <__mdiff+0x2e>
 800a150:	4b39      	ldr	r3, [pc, #228]	; (800a238 <__mdiff+0x108>)
 800a152:	4602      	mov	r2, r0
 800a154:	f240 2132 	movw	r1, #562	; 0x232
 800a158:	4838      	ldr	r0, [pc, #224]	; (800a23c <__mdiff+0x10c>)
 800a15a:	f000 fc0d 	bl	800a978 <__assert_func>
 800a15e:	2301      	movs	r3, #1
 800a160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a168:	bfa4      	itt	ge
 800a16a:	463b      	movge	r3, r7
 800a16c:	4627      	movge	r7, r4
 800a16e:	4630      	mov	r0, r6
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	bfa6      	itte	ge
 800a174:	461c      	movge	r4, r3
 800a176:	2500      	movge	r5, #0
 800a178:	2501      	movlt	r5, #1
 800a17a:	f7ff fcf5 	bl	8009b68 <_Balloc>
 800a17e:	b920      	cbnz	r0, 800a18a <__mdiff+0x5a>
 800a180:	4b2d      	ldr	r3, [pc, #180]	; (800a238 <__mdiff+0x108>)
 800a182:	4602      	mov	r2, r0
 800a184:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a188:	e7e6      	b.n	800a158 <__mdiff+0x28>
 800a18a:	693e      	ldr	r6, [r7, #16]
 800a18c:	60c5      	str	r5, [r0, #12]
 800a18e:	6925      	ldr	r5, [r4, #16]
 800a190:	f107 0114 	add.w	r1, r7, #20
 800a194:	f104 0914 	add.w	r9, r4, #20
 800a198:	f100 0e14 	add.w	lr, r0, #20
 800a19c:	f107 0210 	add.w	r2, r7, #16
 800a1a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a1a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a1a8:	46f2      	mov	sl, lr
 800a1aa:	2700      	movs	r7, #0
 800a1ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a1b4:	fa1f f883 	uxth.w	r8, r3
 800a1b8:	fa17 f78b 	uxtah	r7, r7, fp
 800a1bc:	0c1b      	lsrs	r3, r3, #16
 800a1be:	eba7 0808 	sub.w	r8, r7, r8
 800a1c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1ca:	fa1f f888 	uxth.w	r8, r8
 800a1ce:	141f      	asrs	r7, r3, #16
 800a1d0:	454d      	cmp	r5, r9
 800a1d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1d6:	f84a 3b04 	str.w	r3, [sl], #4
 800a1da:	d8e7      	bhi.n	800a1ac <__mdiff+0x7c>
 800a1dc:	1b2b      	subs	r3, r5, r4
 800a1de:	3b15      	subs	r3, #21
 800a1e0:	f023 0303 	bic.w	r3, r3, #3
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	3415      	adds	r4, #21
 800a1e8:	42a5      	cmp	r5, r4
 800a1ea:	bf38      	it	cc
 800a1ec:	2304      	movcc	r3, #4
 800a1ee:	4419      	add	r1, r3
 800a1f0:	4473      	add	r3, lr
 800a1f2:	469e      	mov	lr, r3
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	4565      	cmp	r5, ip
 800a1f8:	d30e      	bcc.n	800a218 <__mdiff+0xe8>
 800a1fa:	f10c 0203 	add.w	r2, ip, #3
 800a1fe:	1a52      	subs	r2, r2, r1
 800a200:	f022 0203 	bic.w	r2, r2, #3
 800a204:	3903      	subs	r1, #3
 800a206:	458c      	cmp	ip, r1
 800a208:	bf38      	it	cc
 800a20a:	2200      	movcc	r2, #0
 800a20c:	441a      	add	r2, r3
 800a20e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a212:	b17b      	cbz	r3, 800a234 <__mdiff+0x104>
 800a214:	6106      	str	r6, [r0, #16]
 800a216:	e7a5      	b.n	800a164 <__mdiff+0x34>
 800a218:	f855 8b04 	ldr.w	r8, [r5], #4
 800a21c:	fa17 f488 	uxtah	r4, r7, r8
 800a220:	1422      	asrs	r2, r4, #16
 800a222:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a226:	b2a4      	uxth	r4, r4
 800a228:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a22c:	f84e 4b04 	str.w	r4, [lr], #4
 800a230:	1417      	asrs	r7, r2, #16
 800a232:	e7e0      	b.n	800a1f6 <__mdiff+0xc6>
 800a234:	3e01      	subs	r6, #1
 800a236:	e7ea      	b.n	800a20e <__mdiff+0xde>
 800a238:	0800b76c 	.word	0x0800b76c
 800a23c:	0800b7fc 	.word	0x0800b7fc

0800a240 <__ulp>:
 800a240:	b082      	sub	sp, #8
 800a242:	ed8d 0b00 	vstr	d0, [sp]
 800a246:	9b01      	ldr	r3, [sp, #4]
 800a248:	4912      	ldr	r1, [pc, #72]	; (800a294 <__ulp+0x54>)
 800a24a:	4019      	ands	r1, r3
 800a24c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a250:	2900      	cmp	r1, #0
 800a252:	dd05      	ble.n	800a260 <__ulp+0x20>
 800a254:	2200      	movs	r2, #0
 800a256:	460b      	mov	r3, r1
 800a258:	ec43 2b10 	vmov	d0, r2, r3
 800a25c:	b002      	add	sp, #8
 800a25e:	4770      	bx	lr
 800a260:	4249      	negs	r1, r1
 800a262:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a266:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a26a:	f04f 0200 	mov.w	r2, #0
 800a26e:	f04f 0300 	mov.w	r3, #0
 800a272:	da04      	bge.n	800a27e <__ulp+0x3e>
 800a274:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a278:	fa41 f300 	asr.w	r3, r1, r0
 800a27c:	e7ec      	b.n	800a258 <__ulp+0x18>
 800a27e:	f1a0 0114 	sub.w	r1, r0, #20
 800a282:	291e      	cmp	r1, #30
 800a284:	bfda      	itte	le
 800a286:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a28a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a28e:	2101      	movgt	r1, #1
 800a290:	460a      	mov	r2, r1
 800a292:	e7e1      	b.n	800a258 <__ulp+0x18>
 800a294:	7ff00000 	.word	0x7ff00000

0800a298 <__b2d>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	6905      	ldr	r5, [r0, #16]
 800a29c:	f100 0714 	add.w	r7, r0, #20
 800a2a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a2a4:	1f2e      	subs	r6, r5, #4
 800a2a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f7ff fd52 	bl	8009d54 <__hi0bits>
 800a2b0:	f1c0 0320 	rsb	r3, r0, #32
 800a2b4:	280a      	cmp	r0, #10
 800a2b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a334 <__b2d+0x9c>
 800a2ba:	600b      	str	r3, [r1, #0]
 800a2bc:	dc14      	bgt.n	800a2e8 <__b2d+0x50>
 800a2be:	f1c0 0e0b 	rsb	lr, r0, #11
 800a2c2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a2c6:	42b7      	cmp	r7, r6
 800a2c8:	ea41 030c 	orr.w	r3, r1, ip
 800a2cc:	bf34      	ite	cc
 800a2ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2d2:	2100      	movcs	r1, #0
 800a2d4:	3015      	adds	r0, #21
 800a2d6:	fa04 f000 	lsl.w	r0, r4, r0
 800a2da:	fa21 f10e 	lsr.w	r1, r1, lr
 800a2de:	ea40 0201 	orr.w	r2, r0, r1
 800a2e2:	ec43 2b10 	vmov	d0, r2, r3
 800a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e8:	42b7      	cmp	r7, r6
 800a2ea:	bf3a      	itte	cc
 800a2ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a2f4:	2100      	movcs	r1, #0
 800a2f6:	380b      	subs	r0, #11
 800a2f8:	d017      	beq.n	800a32a <__b2d+0x92>
 800a2fa:	f1c0 0c20 	rsb	ip, r0, #32
 800a2fe:	fa04 f500 	lsl.w	r5, r4, r0
 800a302:	42be      	cmp	r6, r7
 800a304:	fa21 f40c 	lsr.w	r4, r1, ip
 800a308:	ea45 0504 	orr.w	r5, r5, r4
 800a30c:	bf8c      	ite	hi
 800a30e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a312:	2400      	movls	r4, #0
 800a314:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a318:	fa01 f000 	lsl.w	r0, r1, r0
 800a31c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a320:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a324:	ea40 0204 	orr.w	r2, r0, r4
 800a328:	e7db      	b.n	800a2e2 <__b2d+0x4a>
 800a32a:	ea44 030c 	orr.w	r3, r4, ip
 800a32e:	460a      	mov	r2, r1
 800a330:	e7d7      	b.n	800a2e2 <__b2d+0x4a>
 800a332:	bf00      	nop
 800a334:	3ff00000 	.word	0x3ff00000

0800a338 <__d2b>:
 800a338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a33c:	4689      	mov	r9, r1
 800a33e:	2101      	movs	r1, #1
 800a340:	ec57 6b10 	vmov	r6, r7, d0
 800a344:	4690      	mov	r8, r2
 800a346:	f7ff fc0f 	bl	8009b68 <_Balloc>
 800a34a:	4604      	mov	r4, r0
 800a34c:	b930      	cbnz	r0, 800a35c <__d2b+0x24>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b25      	ldr	r3, [pc, #148]	; (800a3e8 <__d2b+0xb0>)
 800a352:	4826      	ldr	r0, [pc, #152]	; (800a3ec <__d2b+0xb4>)
 800a354:	f240 310a 	movw	r1, #778	; 0x30a
 800a358:	f000 fb0e 	bl	800a978 <__assert_func>
 800a35c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a364:	bb35      	cbnz	r5, 800a3b4 <__d2b+0x7c>
 800a366:	2e00      	cmp	r6, #0
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	d028      	beq.n	800a3be <__d2b+0x86>
 800a36c:	4668      	mov	r0, sp
 800a36e:	9600      	str	r6, [sp, #0]
 800a370:	f7ff fd10 	bl	8009d94 <__lo0bits>
 800a374:	9900      	ldr	r1, [sp, #0]
 800a376:	b300      	cbz	r0, 800a3ba <__d2b+0x82>
 800a378:	9a01      	ldr	r2, [sp, #4]
 800a37a:	f1c0 0320 	rsb	r3, r0, #32
 800a37e:	fa02 f303 	lsl.w	r3, r2, r3
 800a382:	430b      	orrs	r3, r1
 800a384:	40c2      	lsrs	r2, r0
 800a386:	6163      	str	r3, [r4, #20]
 800a388:	9201      	str	r2, [sp, #4]
 800a38a:	9b01      	ldr	r3, [sp, #4]
 800a38c:	61a3      	str	r3, [r4, #24]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bf14      	ite	ne
 800a392:	2202      	movne	r2, #2
 800a394:	2201      	moveq	r2, #1
 800a396:	6122      	str	r2, [r4, #16]
 800a398:	b1d5      	cbz	r5, 800a3d0 <__d2b+0x98>
 800a39a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a39e:	4405      	add	r5, r0
 800a3a0:	f8c9 5000 	str.w	r5, [r9]
 800a3a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3a8:	f8c8 0000 	str.w	r0, [r8]
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	b003      	add	sp, #12
 800a3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3b8:	e7d5      	b.n	800a366 <__d2b+0x2e>
 800a3ba:	6161      	str	r1, [r4, #20]
 800a3bc:	e7e5      	b.n	800a38a <__d2b+0x52>
 800a3be:	a801      	add	r0, sp, #4
 800a3c0:	f7ff fce8 	bl	8009d94 <__lo0bits>
 800a3c4:	9b01      	ldr	r3, [sp, #4]
 800a3c6:	6163      	str	r3, [r4, #20]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	6122      	str	r2, [r4, #16]
 800a3cc:	3020      	adds	r0, #32
 800a3ce:	e7e3      	b.n	800a398 <__d2b+0x60>
 800a3d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3d8:	f8c9 0000 	str.w	r0, [r9]
 800a3dc:	6918      	ldr	r0, [r3, #16]
 800a3de:	f7ff fcb9 	bl	8009d54 <__hi0bits>
 800a3e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3e6:	e7df      	b.n	800a3a8 <__d2b+0x70>
 800a3e8:	0800b76c 	.word	0x0800b76c
 800a3ec:	0800b7fc 	.word	0x0800b7fc

0800a3f0 <__ratio>:
 800a3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	4688      	mov	r8, r1
 800a3f6:	4669      	mov	r1, sp
 800a3f8:	4681      	mov	r9, r0
 800a3fa:	f7ff ff4d 	bl	800a298 <__b2d>
 800a3fe:	a901      	add	r1, sp, #4
 800a400:	4640      	mov	r0, r8
 800a402:	ec55 4b10 	vmov	r4, r5, d0
 800a406:	f7ff ff47 	bl	800a298 <__b2d>
 800a40a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a40e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a412:	eba3 0c02 	sub.w	ip, r3, r2
 800a416:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a41a:	1a9b      	subs	r3, r3, r2
 800a41c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a420:	ec51 0b10 	vmov	r0, r1, d0
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfd6      	itet	le
 800a428:	460a      	movle	r2, r1
 800a42a:	462a      	movgt	r2, r5
 800a42c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a430:	468b      	mov	fp, r1
 800a432:	462f      	mov	r7, r5
 800a434:	bfd4      	ite	le
 800a436:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a43a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a43e:	4620      	mov	r0, r4
 800a440:	ee10 2a10 	vmov	r2, s0
 800a444:	465b      	mov	r3, fp
 800a446:	4639      	mov	r1, r7
 800a448:	f7f6 fa08 	bl	800085c <__aeabi_ddiv>
 800a44c:	ec41 0b10 	vmov	d0, r0, r1
 800a450:	b003      	add	sp, #12
 800a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a456 <__copybits>:
 800a456:	3901      	subs	r1, #1
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	1149      	asrs	r1, r1, #5
 800a45c:	6914      	ldr	r4, [r2, #16]
 800a45e:	3101      	adds	r1, #1
 800a460:	f102 0314 	add.w	r3, r2, #20
 800a464:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a468:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a46c:	1f05      	subs	r5, r0, #4
 800a46e:	42a3      	cmp	r3, r4
 800a470:	d30c      	bcc.n	800a48c <__copybits+0x36>
 800a472:	1aa3      	subs	r3, r4, r2
 800a474:	3b11      	subs	r3, #17
 800a476:	f023 0303 	bic.w	r3, r3, #3
 800a47a:	3211      	adds	r2, #17
 800a47c:	42a2      	cmp	r2, r4
 800a47e:	bf88      	it	hi
 800a480:	2300      	movhi	r3, #0
 800a482:	4418      	add	r0, r3
 800a484:	2300      	movs	r3, #0
 800a486:	4288      	cmp	r0, r1
 800a488:	d305      	bcc.n	800a496 <__copybits+0x40>
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a490:	f845 6f04 	str.w	r6, [r5, #4]!
 800a494:	e7eb      	b.n	800a46e <__copybits+0x18>
 800a496:	f840 3b04 	str.w	r3, [r0], #4
 800a49a:	e7f4      	b.n	800a486 <__copybits+0x30>

0800a49c <__any_on>:
 800a49c:	f100 0214 	add.w	r2, r0, #20
 800a4a0:	6900      	ldr	r0, [r0, #16]
 800a4a2:	114b      	asrs	r3, r1, #5
 800a4a4:	4298      	cmp	r0, r3
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	db11      	blt.n	800a4ce <__any_on+0x32>
 800a4aa:	dd0a      	ble.n	800a4c2 <__any_on+0x26>
 800a4ac:	f011 011f 	ands.w	r1, r1, #31
 800a4b0:	d007      	beq.n	800a4c2 <__any_on+0x26>
 800a4b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4b6:	fa24 f001 	lsr.w	r0, r4, r1
 800a4ba:	fa00 f101 	lsl.w	r1, r0, r1
 800a4be:	428c      	cmp	r4, r1
 800a4c0:	d10b      	bne.n	800a4da <__any_on+0x3e>
 800a4c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d803      	bhi.n	800a4d2 <__any_on+0x36>
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	bd10      	pop	{r4, pc}
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	e7f7      	b.n	800a4c2 <__any_on+0x26>
 800a4d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d0f5      	beq.n	800a4c6 <__any_on+0x2a>
 800a4da:	2001      	movs	r0, #1
 800a4dc:	e7f6      	b.n	800a4cc <__any_on+0x30>

0800a4de <_calloc_r>:
 800a4de:	b513      	push	{r0, r1, r4, lr}
 800a4e0:	434a      	muls	r2, r1
 800a4e2:	4611      	mov	r1, r2
 800a4e4:	9201      	str	r2, [sp, #4]
 800a4e6:	f000 f859 	bl	800a59c <_malloc_r>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	b118      	cbz	r0, 800a4f6 <_calloc_r+0x18>
 800a4ee:	9a01      	ldr	r2, [sp, #4]
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	f7fc fbc7 	bl	8006c84 <memset>
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	b002      	add	sp, #8
 800a4fa:	bd10      	pop	{r4, pc}

0800a4fc <_free_r>:
 800a4fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4fe:	2900      	cmp	r1, #0
 800a500:	d048      	beq.n	800a594 <_free_r+0x98>
 800a502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a506:	9001      	str	r0, [sp, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f1a1 0404 	sub.w	r4, r1, #4
 800a50e:	bfb8      	it	lt
 800a510:	18e4      	addlt	r4, r4, r3
 800a512:	f000 fa7b 	bl	800aa0c <__malloc_lock>
 800a516:	4a20      	ldr	r2, [pc, #128]	; (800a598 <_free_r+0x9c>)
 800a518:	9801      	ldr	r0, [sp, #4]
 800a51a:	6813      	ldr	r3, [r2, #0]
 800a51c:	4615      	mov	r5, r2
 800a51e:	b933      	cbnz	r3, 800a52e <_free_r+0x32>
 800a520:	6063      	str	r3, [r4, #4]
 800a522:	6014      	str	r4, [r2, #0]
 800a524:	b003      	add	sp, #12
 800a526:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a52a:	f000 ba75 	b.w	800aa18 <__malloc_unlock>
 800a52e:	42a3      	cmp	r3, r4
 800a530:	d90b      	bls.n	800a54a <_free_r+0x4e>
 800a532:	6821      	ldr	r1, [r4, #0]
 800a534:	1862      	adds	r2, r4, r1
 800a536:	4293      	cmp	r3, r2
 800a538:	bf04      	itt	eq
 800a53a:	681a      	ldreq	r2, [r3, #0]
 800a53c:	685b      	ldreq	r3, [r3, #4]
 800a53e:	6063      	str	r3, [r4, #4]
 800a540:	bf04      	itt	eq
 800a542:	1852      	addeq	r2, r2, r1
 800a544:	6022      	streq	r2, [r4, #0]
 800a546:	602c      	str	r4, [r5, #0]
 800a548:	e7ec      	b.n	800a524 <_free_r+0x28>
 800a54a:	461a      	mov	r2, r3
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	b10b      	cbz	r3, 800a554 <_free_r+0x58>
 800a550:	42a3      	cmp	r3, r4
 800a552:	d9fa      	bls.n	800a54a <_free_r+0x4e>
 800a554:	6811      	ldr	r1, [r2, #0]
 800a556:	1855      	adds	r5, r2, r1
 800a558:	42a5      	cmp	r5, r4
 800a55a:	d10b      	bne.n	800a574 <_free_r+0x78>
 800a55c:	6824      	ldr	r4, [r4, #0]
 800a55e:	4421      	add	r1, r4
 800a560:	1854      	adds	r4, r2, r1
 800a562:	42a3      	cmp	r3, r4
 800a564:	6011      	str	r1, [r2, #0]
 800a566:	d1dd      	bne.n	800a524 <_free_r+0x28>
 800a568:	681c      	ldr	r4, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	6053      	str	r3, [r2, #4]
 800a56e:	4421      	add	r1, r4
 800a570:	6011      	str	r1, [r2, #0]
 800a572:	e7d7      	b.n	800a524 <_free_r+0x28>
 800a574:	d902      	bls.n	800a57c <_free_r+0x80>
 800a576:	230c      	movs	r3, #12
 800a578:	6003      	str	r3, [r0, #0]
 800a57a:	e7d3      	b.n	800a524 <_free_r+0x28>
 800a57c:	6825      	ldr	r5, [r4, #0]
 800a57e:	1961      	adds	r1, r4, r5
 800a580:	428b      	cmp	r3, r1
 800a582:	bf04      	itt	eq
 800a584:	6819      	ldreq	r1, [r3, #0]
 800a586:	685b      	ldreq	r3, [r3, #4]
 800a588:	6063      	str	r3, [r4, #4]
 800a58a:	bf04      	itt	eq
 800a58c:	1949      	addeq	r1, r1, r5
 800a58e:	6021      	streq	r1, [r4, #0]
 800a590:	6054      	str	r4, [r2, #4]
 800a592:	e7c7      	b.n	800a524 <_free_r+0x28>
 800a594:	b003      	add	sp, #12
 800a596:	bd30      	pop	{r4, r5, pc}
 800a598:	20000224 	.word	0x20000224

0800a59c <_malloc_r>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	1ccd      	adds	r5, r1, #3
 800a5a0:	f025 0503 	bic.w	r5, r5, #3
 800a5a4:	3508      	adds	r5, #8
 800a5a6:	2d0c      	cmp	r5, #12
 800a5a8:	bf38      	it	cc
 800a5aa:	250c      	movcc	r5, #12
 800a5ac:	2d00      	cmp	r5, #0
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	db01      	blt.n	800a5b6 <_malloc_r+0x1a>
 800a5b2:	42a9      	cmp	r1, r5
 800a5b4:	d903      	bls.n	800a5be <_malloc_r+0x22>
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	6033      	str	r3, [r6, #0]
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5be:	f000 fa25 	bl	800aa0c <__malloc_lock>
 800a5c2:	4921      	ldr	r1, [pc, #132]	; (800a648 <_malloc_r+0xac>)
 800a5c4:	680a      	ldr	r2, [r1, #0]
 800a5c6:	4614      	mov	r4, r2
 800a5c8:	b99c      	cbnz	r4, 800a5f2 <_malloc_r+0x56>
 800a5ca:	4f20      	ldr	r7, [pc, #128]	; (800a64c <_malloc_r+0xb0>)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	b923      	cbnz	r3, 800a5da <_malloc_r+0x3e>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f000 f9a0 	bl	800a918 <_sbrk_r>
 800a5d8:	6038      	str	r0, [r7, #0]
 800a5da:	4629      	mov	r1, r5
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f000 f99b 	bl	800a918 <_sbrk_r>
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	d123      	bne.n	800a62e <_malloc_r+0x92>
 800a5e6:	230c      	movs	r3, #12
 800a5e8:	6033      	str	r3, [r6, #0]
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f000 fa14 	bl	800aa18 <__malloc_unlock>
 800a5f0:	e7e3      	b.n	800a5ba <_malloc_r+0x1e>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	1b5b      	subs	r3, r3, r5
 800a5f6:	d417      	bmi.n	800a628 <_malloc_r+0x8c>
 800a5f8:	2b0b      	cmp	r3, #11
 800a5fa:	d903      	bls.n	800a604 <_malloc_r+0x68>
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	441c      	add	r4, r3
 800a600:	6025      	str	r5, [r4, #0]
 800a602:	e004      	b.n	800a60e <_malloc_r+0x72>
 800a604:	6863      	ldr	r3, [r4, #4]
 800a606:	42a2      	cmp	r2, r4
 800a608:	bf0c      	ite	eq
 800a60a:	600b      	streq	r3, [r1, #0]
 800a60c:	6053      	strne	r3, [r2, #4]
 800a60e:	4630      	mov	r0, r6
 800a610:	f000 fa02 	bl	800aa18 <__malloc_unlock>
 800a614:	f104 000b 	add.w	r0, r4, #11
 800a618:	1d23      	adds	r3, r4, #4
 800a61a:	f020 0007 	bic.w	r0, r0, #7
 800a61e:	1ac2      	subs	r2, r0, r3
 800a620:	d0cc      	beq.n	800a5bc <_malloc_r+0x20>
 800a622:	1a1b      	subs	r3, r3, r0
 800a624:	50a3      	str	r3, [r4, r2]
 800a626:	e7c9      	b.n	800a5bc <_malloc_r+0x20>
 800a628:	4622      	mov	r2, r4
 800a62a:	6864      	ldr	r4, [r4, #4]
 800a62c:	e7cc      	b.n	800a5c8 <_malloc_r+0x2c>
 800a62e:	1cc4      	adds	r4, r0, #3
 800a630:	f024 0403 	bic.w	r4, r4, #3
 800a634:	42a0      	cmp	r0, r4
 800a636:	d0e3      	beq.n	800a600 <_malloc_r+0x64>
 800a638:	1a21      	subs	r1, r4, r0
 800a63a:	4630      	mov	r0, r6
 800a63c:	f000 f96c 	bl	800a918 <_sbrk_r>
 800a640:	3001      	adds	r0, #1
 800a642:	d1dd      	bne.n	800a600 <_malloc_r+0x64>
 800a644:	e7cf      	b.n	800a5e6 <_malloc_r+0x4a>
 800a646:	bf00      	nop
 800a648:	20000224 	.word	0x20000224
 800a64c:	20000228 	.word	0x20000228

0800a650 <__ssputs_r>:
 800a650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a654:	688e      	ldr	r6, [r1, #8]
 800a656:	429e      	cmp	r6, r3
 800a658:	4682      	mov	sl, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	4690      	mov	r8, r2
 800a65e:	461f      	mov	r7, r3
 800a660:	d838      	bhi.n	800a6d4 <__ssputs_r+0x84>
 800a662:	898a      	ldrh	r2, [r1, #12]
 800a664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a668:	d032      	beq.n	800a6d0 <__ssputs_r+0x80>
 800a66a:	6825      	ldr	r5, [r4, #0]
 800a66c:	6909      	ldr	r1, [r1, #16]
 800a66e:	eba5 0901 	sub.w	r9, r5, r1
 800a672:	6965      	ldr	r5, [r4, #20]
 800a674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a67c:	3301      	adds	r3, #1
 800a67e:	444b      	add	r3, r9
 800a680:	106d      	asrs	r5, r5, #1
 800a682:	429d      	cmp	r5, r3
 800a684:	bf38      	it	cc
 800a686:	461d      	movcc	r5, r3
 800a688:	0553      	lsls	r3, r2, #21
 800a68a:	d531      	bpl.n	800a6f0 <__ssputs_r+0xa0>
 800a68c:	4629      	mov	r1, r5
 800a68e:	f7ff ff85 	bl	800a59c <_malloc_r>
 800a692:	4606      	mov	r6, r0
 800a694:	b950      	cbnz	r0, 800a6ac <__ssputs_r+0x5c>
 800a696:	230c      	movs	r3, #12
 800a698:	f8ca 3000 	str.w	r3, [sl]
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ac:	6921      	ldr	r1, [r4, #16]
 800a6ae:	464a      	mov	r2, r9
 800a6b0:	f7ff fa4c 	bl	8009b4c <memcpy>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6be:	81a3      	strh	r3, [r4, #12]
 800a6c0:	6126      	str	r6, [r4, #16]
 800a6c2:	6165      	str	r5, [r4, #20]
 800a6c4:	444e      	add	r6, r9
 800a6c6:	eba5 0509 	sub.w	r5, r5, r9
 800a6ca:	6026      	str	r6, [r4, #0]
 800a6cc:	60a5      	str	r5, [r4, #8]
 800a6ce:	463e      	mov	r6, r7
 800a6d0:	42be      	cmp	r6, r7
 800a6d2:	d900      	bls.n	800a6d6 <__ssputs_r+0x86>
 800a6d4:	463e      	mov	r6, r7
 800a6d6:	4632      	mov	r2, r6
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	4641      	mov	r1, r8
 800a6dc:	f000 f97c 	bl	800a9d8 <memmove>
 800a6e0:	68a3      	ldr	r3, [r4, #8]
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	1b9b      	subs	r3, r3, r6
 800a6e6:	4432      	add	r2, r6
 800a6e8:	60a3      	str	r3, [r4, #8]
 800a6ea:	6022      	str	r2, [r4, #0]
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e7db      	b.n	800a6a8 <__ssputs_r+0x58>
 800a6f0:	462a      	mov	r2, r5
 800a6f2:	f000 f997 	bl	800aa24 <_realloc_r>
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d1e1      	bne.n	800a6c0 <__ssputs_r+0x70>
 800a6fc:	6921      	ldr	r1, [r4, #16]
 800a6fe:	4650      	mov	r0, sl
 800a700:	f7ff fefc 	bl	800a4fc <_free_r>
 800a704:	e7c7      	b.n	800a696 <__ssputs_r+0x46>
	...

0800a708 <_svfiprintf_r>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	4698      	mov	r8, r3
 800a70e:	898b      	ldrh	r3, [r1, #12]
 800a710:	061b      	lsls	r3, r3, #24
 800a712:	b09d      	sub	sp, #116	; 0x74
 800a714:	4607      	mov	r7, r0
 800a716:	460d      	mov	r5, r1
 800a718:	4614      	mov	r4, r2
 800a71a:	d50e      	bpl.n	800a73a <_svfiprintf_r+0x32>
 800a71c:	690b      	ldr	r3, [r1, #16]
 800a71e:	b963      	cbnz	r3, 800a73a <_svfiprintf_r+0x32>
 800a720:	2140      	movs	r1, #64	; 0x40
 800a722:	f7ff ff3b 	bl	800a59c <_malloc_r>
 800a726:	6028      	str	r0, [r5, #0]
 800a728:	6128      	str	r0, [r5, #16]
 800a72a:	b920      	cbnz	r0, 800a736 <_svfiprintf_r+0x2e>
 800a72c:	230c      	movs	r3, #12
 800a72e:	603b      	str	r3, [r7, #0]
 800a730:	f04f 30ff 	mov.w	r0, #4294967295
 800a734:	e0d1      	b.n	800a8da <_svfiprintf_r+0x1d2>
 800a736:	2340      	movs	r3, #64	; 0x40
 800a738:	616b      	str	r3, [r5, #20]
 800a73a:	2300      	movs	r3, #0
 800a73c:	9309      	str	r3, [sp, #36]	; 0x24
 800a73e:	2320      	movs	r3, #32
 800a740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a744:	f8cd 800c 	str.w	r8, [sp, #12]
 800a748:	2330      	movs	r3, #48	; 0x30
 800a74a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8f4 <_svfiprintf_r+0x1ec>
 800a74e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a752:	f04f 0901 	mov.w	r9, #1
 800a756:	4623      	mov	r3, r4
 800a758:	469a      	mov	sl, r3
 800a75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75e:	b10a      	cbz	r2, 800a764 <_svfiprintf_r+0x5c>
 800a760:	2a25      	cmp	r2, #37	; 0x25
 800a762:	d1f9      	bne.n	800a758 <_svfiprintf_r+0x50>
 800a764:	ebba 0b04 	subs.w	fp, sl, r4
 800a768:	d00b      	beq.n	800a782 <_svfiprintf_r+0x7a>
 800a76a:	465b      	mov	r3, fp
 800a76c:	4622      	mov	r2, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	4638      	mov	r0, r7
 800a772:	f7ff ff6d 	bl	800a650 <__ssputs_r>
 800a776:	3001      	adds	r0, #1
 800a778:	f000 80aa 	beq.w	800a8d0 <_svfiprintf_r+0x1c8>
 800a77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77e:	445a      	add	r2, fp
 800a780:	9209      	str	r2, [sp, #36]	; 0x24
 800a782:	f89a 3000 	ldrb.w	r3, [sl]
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 80a2 	beq.w	800a8d0 <_svfiprintf_r+0x1c8>
 800a78c:	2300      	movs	r3, #0
 800a78e:	f04f 32ff 	mov.w	r2, #4294967295
 800a792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a796:	f10a 0a01 	add.w	sl, sl, #1
 800a79a:	9304      	str	r3, [sp, #16]
 800a79c:	9307      	str	r3, [sp, #28]
 800a79e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a4:	4654      	mov	r4, sl
 800a7a6:	2205      	movs	r2, #5
 800a7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ac:	4851      	ldr	r0, [pc, #324]	; (800a8f4 <_svfiprintf_r+0x1ec>)
 800a7ae:	f7f5 fd1f 	bl	80001f0 <memchr>
 800a7b2:	9a04      	ldr	r2, [sp, #16]
 800a7b4:	b9d8      	cbnz	r0, 800a7ee <_svfiprintf_r+0xe6>
 800a7b6:	06d0      	lsls	r0, r2, #27
 800a7b8:	bf44      	itt	mi
 800a7ba:	2320      	movmi	r3, #32
 800a7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c0:	0711      	lsls	r1, r2, #28
 800a7c2:	bf44      	itt	mi
 800a7c4:	232b      	movmi	r3, #43	; 0x2b
 800a7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d0:	d015      	beq.n	800a7fe <_svfiprintf_r+0xf6>
 800a7d2:	9a07      	ldr	r2, [sp, #28]
 800a7d4:	4654      	mov	r4, sl
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f04f 0c0a 	mov.w	ip, #10
 800a7dc:	4621      	mov	r1, r4
 800a7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e2:	3b30      	subs	r3, #48	; 0x30
 800a7e4:	2b09      	cmp	r3, #9
 800a7e6:	d94e      	bls.n	800a886 <_svfiprintf_r+0x17e>
 800a7e8:	b1b0      	cbz	r0, 800a818 <_svfiprintf_r+0x110>
 800a7ea:	9207      	str	r2, [sp, #28]
 800a7ec:	e014      	b.n	800a818 <_svfiprintf_r+0x110>
 800a7ee:	eba0 0308 	sub.w	r3, r0, r8
 800a7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	46a2      	mov	sl, r4
 800a7fc:	e7d2      	b.n	800a7a4 <_svfiprintf_r+0x9c>
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	1d19      	adds	r1, r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	9103      	str	r1, [sp, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfbb      	ittet	lt
 800a80a:	425b      	neglt	r3, r3
 800a80c:	f042 0202 	orrlt.w	r2, r2, #2
 800a810:	9307      	strge	r3, [sp, #28]
 800a812:	9307      	strlt	r3, [sp, #28]
 800a814:	bfb8      	it	lt
 800a816:	9204      	strlt	r2, [sp, #16]
 800a818:	7823      	ldrb	r3, [r4, #0]
 800a81a:	2b2e      	cmp	r3, #46	; 0x2e
 800a81c:	d10c      	bne.n	800a838 <_svfiprintf_r+0x130>
 800a81e:	7863      	ldrb	r3, [r4, #1]
 800a820:	2b2a      	cmp	r3, #42	; 0x2a
 800a822:	d135      	bne.n	800a890 <_svfiprintf_r+0x188>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	1d1a      	adds	r2, r3, #4
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	9203      	str	r2, [sp, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	bfb8      	it	lt
 800a830:	f04f 33ff 	movlt.w	r3, #4294967295
 800a834:	3402      	adds	r4, #2
 800a836:	9305      	str	r3, [sp, #20]
 800a838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a904 <_svfiprintf_r+0x1fc>
 800a83c:	7821      	ldrb	r1, [r4, #0]
 800a83e:	2203      	movs	r2, #3
 800a840:	4650      	mov	r0, sl
 800a842:	f7f5 fcd5 	bl	80001f0 <memchr>
 800a846:	b140      	cbz	r0, 800a85a <_svfiprintf_r+0x152>
 800a848:	2340      	movs	r3, #64	; 0x40
 800a84a:	eba0 000a 	sub.w	r0, r0, sl
 800a84e:	fa03 f000 	lsl.w	r0, r3, r0
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	4303      	orrs	r3, r0
 800a856:	3401      	adds	r4, #1
 800a858:	9304      	str	r3, [sp, #16]
 800a85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85e:	4826      	ldr	r0, [pc, #152]	; (800a8f8 <_svfiprintf_r+0x1f0>)
 800a860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a864:	2206      	movs	r2, #6
 800a866:	f7f5 fcc3 	bl	80001f0 <memchr>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d038      	beq.n	800a8e0 <_svfiprintf_r+0x1d8>
 800a86e:	4b23      	ldr	r3, [pc, #140]	; (800a8fc <_svfiprintf_r+0x1f4>)
 800a870:	bb1b      	cbnz	r3, 800a8ba <_svfiprintf_r+0x1b2>
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	3307      	adds	r3, #7
 800a876:	f023 0307 	bic.w	r3, r3, #7
 800a87a:	3308      	adds	r3, #8
 800a87c:	9303      	str	r3, [sp, #12]
 800a87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a880:	4433      	add	r3, r6
 800a882:	9309      	str	r3, [sp, #36]	; 0x24
 800a884:	e767      	b.n	800a756 <_svfiprintf_r+0x4e>
 800a886:	fb0c 3202 	mla	r2, ip, r2, r3
 800a88a:	460c      	mov	r4, r1
 800a88c:	2001      	movs	r0, #1
 800a88e:	e7a5      	b.n	800a7dc <_svfiprintf_r+0xd4>
 800a890:	2300      	movs	r3, #0
 800a892:	3401      	adds	r4, #1
 800a894:	9305      	str	r3, [sp, #20]
 800a896:	4619      	mov	r1, r3
 800a898:	f04f 0c0a 	mov.w	ip, #10
 800a89c:	4620      	mov	r0, r4
 800a89e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8a2:	3a30      	subs	r2, #48	; 0x30
 800a8a4:	2a09      	cmp	r2, #9
 800a8a6:	d903      	bls.n	800a8b0 <_svfiprintf_r+0x1a8>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d0c5      	beq.n	800a838 <_svfiprintf_r+0x130>
 800a8ac:	9105      	str	r1, [sp, #20]
 800a8ae:	e7c3      	b.n	800a838 <_svfiprintf_r+0x130>
 800a8b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e7f0      	b.n	800a89c <_svfiprintf_r+0x194>
 800a8ba:	ab03      	add	r3, sp, #12
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	462a      	mov	r2, r5
 800a8c0:	4b0f      	ldr	r3, [pc, #60]	; (800a900 <_svfiprintf_r+0x1f8>)
 800a8c2:	a904      	add	r1, sp, #16
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f7fc fa85 	bl	8006dd4 <_printf_float>
 800a8ca:	1c42      	adds	r2, r0, #1
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	d1d6      	bne.n	800a87e <_svfiprintf_r+0x176>
 800a8d0:	89ab      	ldrh	r3, [r5, #12]
 800a8d2:	065b      	lsls	r3, r3, #25
 800a8d4:	f53f af2c 	bmi.w	800a730 <_svfiprintf_r+0x28>
 800a8d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8da:	b01d      	add	sp, #116	; 0x74
 800a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e0:	ab03      	add	r3, sp, #12
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	4b06      	ldr	r3, [pc, #24]	; (800a900 <_svfiprintf_r+0x1f8>)
 800a8e8:	a904      	add	r1, sp, #16
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	f7fc fd16 	bl	800731c <_printf_i>
 800a8f0:	e7eb      	b.n	800a8ca <_svfiprintf_r+0x1c2>
 800a8f2:	bf00      	nop
 800a8f4:	0800b95c 	.word	0x0800b95c
 800a8f8:	0800b966 	.word	0x0800b966
 800a8fc:	08006dd5 	.word	0x08006dd5
 800a900:	0800a651 	.word	0x0800a651
 800a904:	0800b962 	.word	0x0800b962

0800a908 <nan>:
 800a908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a910 <nan+0x8>
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	00000000 	.word	0x00000000
 800a914:	7ff80000 	.word	0x7ff80000

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	; (800a934 <_sbrk_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7f6 ff28 	bl	8001778 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	200003e4 	.word	0x200003e4

0800a938 <strncmp>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	b16a      	cbz	r2, 800a958 <strncmp+0x20>
 800a93c:	3901      	subs	r1, #1
 800a93e:	1884      	adds	r4, r0, r2
 800a940:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a944:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a948:	4293      	cmp	r3, r2
 800a94a:	d103      	bne.n	800a954 <strncmp+0x1c>
 800a94c:	42a0      	cmp	r0, r4
 800a94e:	d001      	beq.n	800a954 <strncmp+0x1c>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1f5      	bne.n	800a940 <strncmp+0x8>
 800a954:	1a98      	subs	r0, r3, r2
 800a956:	bd10      	pop	{r4, pc}
 800a958:	4610      	mov	r0, r2
 800a95a:	e7fc      	b.n	800a956 <strncmp+0x1e>

0800a95c <__ascii_wctomb>:
 800a95c:	b149      	cbz	r1, 800a972 <__ascii_wctomb+0x16>
 800a95e:	2aff      	cmp	r2, #255	; 0xff
 800a960:	bf85      	ittet	hi
 800a962:	238a      	movhi	r3, #138	; 0x8a
 800a964:	6003      	strhi	r3, [r0, #0]
 800a966:	700a      	strbls	r2, [r1, #0]
 800a968:	f04f 30ff 	movhi.w	r0, #4294967295
 800a96c:	bf98      	it	ls
 800a96e:	2001      	movls	r0, #1
 800a970:	4770      	bx	lr
 800a972:	4608      	mov	r0, r1
 800a974:	4770      	bx	lr
	...

0800a978 <__assert_func>:
 800a978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a97a:	4614      	mov	r4, r2
 800a97c:	461a      	mov	r2, r3
 800a97e:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <__assert_func+0x2c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4605      	mov	r5, r0
 800a984:	68d8      	ldr	r0, [r3, #12]
 800a986:	b14c      	cbz	r4, 800a99c <__assert_func+0x24>
 800a988:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <__assert_func+0x30>)
 800a98a:	9100      	str	r1, [sp, #0]
 800a98c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a990:	4906      	ldr	r1, [pc, #24]	; (800a9ac <__assert_func+0x34>)
 800a992:	462b      	mov	r3, r5
 800a994:	f000 f80e 	bl	800a9b4 <fiprintf>
 800a998:	f000 fa84 	bl	800aea4 <abort>
 800a99c:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <__assert_func+0x38>)
 800a99e:	461c      	mov	r4, r3
 800a9a0:	e7f3      	b.n	800a98a <__assert_func+0x12>
 800a9a2:	bf00      	nop
 800a9a4:	2000000c 	.word	0x2000000c
 800a9a8:	0800b96d 	.word	0x0800b96d
 800a9ac:	0800b97a 	.word	0x0800b97a
 800a9b0:	0800b9a8 	.word	0x0800b9a8

0800a9b4 <fiprintf>:
 800a9b4:	b40e      	push	{r1, r2, r3}
 800a9b6:	b503      	push	{r0, r1, lr}
 800a9b8:	4601      	mov	r1, r0
 800a9ba:	ab03      	add	r3, sp, #12
 800a9bc:	4805      	ldr	r0, [pc, #20]	; (800a9d4 <fiprintf+0x20>)
 800a9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c2:	6800      	ldr	r0, [r0, #0]
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	f000 f87d 	bl	800aac4 <_vfiprintf_r>
 800a9ca:	b002      	add	sp, #8
 800a9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9d0:	b003      	add	sp, #12
 800a9d2:	4770      	bx	lr
 800a9d4:	2000000c 	.word	0x2000000c

0800a9d8 <memmove>:
 800a9d8:	4288      	cmp	r0, r1
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	eb01 0402 	add.w	r4, r1, r2
 800a9e0:	d902      	bls.n	800a9e8 <memmove+0x10>
 800a9e2:	4284      	cmp	r4, r0
 800a9e4:	4623      	mov	r3, r4
 800a9e6:	d807      	bhi.n	800a9f8 <memmove+0x20>
 800a9e8:	1e43      	subs	r3, r0, #1
 800a9ea:	42a1      	cmp	r1, r4
 800a9ec:	d008      	beq.n	800aa00 <memmove+0x28>
 800a9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9f6:	e7f8      	b.n	800a9ea <memmove+0x12>
 800a9f8:	4402      	add	r2, r0
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	428a      	cmp	r2, r1
 800a9fe:	d100      	bne.n	800aa02 <memmove+0x2a>
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa0a:	e7f7      	b.n	800a9fc <memmove+0x24>

0800aa0c <__malloc_lock>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	; (800aa14 <__malloc_lock+0x8>)
 800aa0e:	f000 bc09 	b.w	800b224 <__retarget_lock_acquire_recursive>
 800aa12:	bf00      	nop
 800aa14:	200003ec 	.word	0x200003ec

0800aa18 <__malloc_unlock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__malloc_unlock+0x8>)
 800aa1a:	f000 bc04 	b.w	800b226 <__retarget_lock_release_recursive>
 800aa1e:	bf00      	nop
 800aa20:	200003ec 	.word	0x200003ec

0800aa24 <_realloc_r>:
 800aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa26:	4607      	mov	r7, r0
 800aa28:	4614      	mov	r4, r2
 800aa2a:	460e      	mov	r6, r1
 800aa2c:	b921      	cbnz	r1, 800aa38 <_realloc_r+0x14>
 800aa2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa32:	4611      	mov	r1, r2
 800aa34:	f7ff bdb2 	b.w	800a59c <_malloc_r>
 800aa38:	b922      	cbnz	r2, 800aa44 <_realloc_r+0x20>
 800aa3a:	f7ff fd5f 	bl	800a4fc <_free_r>
 800aa3e:	4625      	mov	r5, r4
 800aa40:	4628      	mov	r0, r5
 800aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa44:	f000 fc54 	bl	800b2f0 <_malloc_usable_size_r>
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d20f      	bcs.n	800aa6c <_realloc_r+0x48>
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4638      	mov	r0, r7
 800aa50:	f7ff fda4 	bl	800a59c <_malloc_r>
 800aa54:	4605      	mov	r5, r0
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d0f2      	beq.n	800aa40 <_realloc_r+0x1c>
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4622      	mov	r2, r4
 800aa5e:	f7ff f875 	bl	8009b4c <memcpy>
 800aa62:	4631      	mov	r1, r6
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff fd49 	bl	800a4fc <_free_r>
 800aa6a:	e7e9      	b.n	800aa40 <_realloc_r+0x1c>
 800aa6c:	4635      	mov	r5, r6
 800aa6e:	e7e7      	b.n	800aa40 <_realloc_r+0x1c>

0800aa70 <__sfputc_r>:
 800aa70:	6893      	ldr	r3, [r2, #8]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	b410      	push	{r4}
 800aa78:	6093      	str	r3, [r2, #8]
 800aa7a:	da08      	bge.n	800aa8e <__sfputc_r+0x1e>
 800aa7c:	6994      	ldr	r4, [r2, #24]
 800aa7e:	42a3      	cmp	r3, r4
 800aa80:	db01      	blt.n	800aa86 <__sfputc_r+0x16>
 800aa82:	290a      	cmp	r1, #10
 800aa84:	d103      	bne.n	800aa8e <__sfputc_r+0x1e>
 800aa86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa8a:	f000 b94b 	b.w	800ad24 <__swbuf_r>
 800aa8e:	6813      	ldr	r3, [r2, #0]
 800aa90:	1c58      	adds	r0, r3, #1
 800aa92:	6010      	str	r0, [r2, #0]
 800aa94:	7019      	strb	r1, [r3, #0]
 800aa96:	4608      	mov	r0, r1
 800aa98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <__sfputs_r>:
 800aa9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	460f      	mov	r7, r1
 800aaa4:	4614      	mov	r4, r2
 800aaa6:	18d5      	adds	r5, r2, r3
 800aaa8:	42ac      	cmp	r4, r5
 800aaaa:	d101      	bne.n	800aab0 <__sfputs_r+0x12>
 800aaac:	2000      	movs	r0, #0
 800aaae:	e007      	b.n	800aac0 <__sfputs_r+0x22>
 800aab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab4:	463a      	mov	r2, r7
 800aab6:	4630      	mov	r0, r6
 800aab8:	f7ff ffda 	bl	800aa70 <__sfputc_r>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d1f3      	bne.n	800aaa8 <__sfputs_r+0xa>
 800aac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aac4 <_vfiprintf_r>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	460d      	mov	r5, r1
 800aaca:	b09d      	sub	sp, #116	; 0x74
 800aacc:	4614      	mov	r4, r2
 800aace:	4698      	mov	r8, r3
 800aad0:	4606      	mov	r6, r0
 800aad2:	b118      	cbz	r0, 800aadc <_vfiprintf_r+0x18>
 800aad4:	6983      	ldr	r3, [r0, #24]
 800aad6:	b90b      	cbnz	r3, 800aadc <_vfiprintf_r+0x18>
 800aad8:	f000 fb06 	bl	800b0e8 <__sinit>
 800aadc:	4b89      	ldr	r3, [pc, #548]	; (800ad04 <_vfiprintf_r+0x240>)
 800aade:	429d      	cmp	r5, r3
 800aae0:	d11b      	bne.n	800ab1a <_vfiprintf_r+0x56>
 800aae2:	6875      	ldr	r5, [r6, #4]
 800aae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aae6:	07d9      	lsls	r1, r3, #31
 800aae8:	d405      	bmi.n	800aaf6 <_vfiprintf_r+0x32>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	059a      	lsls	r2, r3, #22
 800aaee:	d402      	bmi.n	800aaf6 <_vfiprintf_r+0x32>
 800aaf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaf2:	f000 fb97 	bl	800b224 <__retarget_lock_acquire_recursive>
 800aaf6:	89ab      	ldrh	r3, [r5, #12]
 800aaf8:	071b      	lsls	r3, r3, #28
 800aafa:	d501      	bpl.n	800ab00 <_vfiprintf_r+0x3c>
 800aafc:	692b      	ldr	r3, [r5, #16]
 800aafe:	b9eb      	cbnz	r3, 800ab3c <_vfiprintf_r+0x78>
 800ab00:	4629      	mov	r1, r5
 800ab02:	4630      	mov	r0, r6
 800ab04:	f000 f960 	bl	800adc8 <__swsetup_r>
 800ab08:	b1c0      	cbz	r0, 800ab3c <_vfiprintf_r+0x78>
 800ab0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab0c:	07dc      	lsls	r4, r3, #31
 800ab0e:	d50e      	bpl.n	800ab2e <_vfiprintf_r+0x6a>
 800ab10:	f04f 30ff 	mov.w	r0, #4294967295
 800ab14:	b01d      	add	sp, #116	; 0x74
 800ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1a:	4b7b      	ldr	r3, [pc, #492]	; (800ad08 <_vfiprintf_r+0x244>)
 800ab1c:	429d      	cmp	r5, r3
 800ab1e:	d101      	bne.n	800ab24 <_vfiprintf_r+0x60>
 800ab20:	68b5      	ldr	r5, [r6, #8]
 800ab22:	e7df      	b.n	800aae4 <_vfiprintf_r+0x20>
 800ab24:	4b79      	ldr	r3, [pc, #484]	; (800ad0c <_vfiprintf_r+0x248>)
 800ab26:	429d      	cmp	r5, r3
 800ab28:	bf08      	it	eq
 800ab2a:	68f5      	ldreq	r5, [r6, #12]
 800ab2c:	e7da      	b.n	800aae4 <_vfiprintf_r+0x20>
 800ab2e:	89ab      	ldrh	r3, [r5, #12]
 800ab30:	0598      	lsls	r0, r3, #22
 800ab32:	d4ed      	bmi.n	800ab10 <_vfiprintf_r+0x4c>
 800ab34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab36:	f000 fb76 	bl	800b226 <__retarget_lock_release_recursive>
 800ab3a:	e7e9      	b.n	800ab10 <_vfiprintf_r+0x4c>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab40:	2320      	movs	r3, #32
 800ab42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab4a:	2330      	movs	r3, #48	; 0x30
 800ab4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad10 <_vfiprintf_r+0x24c>
 800ab50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab54:	f04f 0901 	mov.w	r9, #1
 800ab58:	4623      	mov	r3, r4
 800ab5a:	469a      	mov	sl, r3
 800ab5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab60:	b10a      	cbz	r2, 800ab66 <_vfiprintf_r+0xa2>
 800ab62:	2a25      	cmp	r2, #37	; 0x25
 800ab64:	d1f9      	bne.n	800ab5a <_vfiprintf_r+0x96>
 800ab66:	ebba 0b04 	subs.w	fp, sl, r4
 800ab6a:	d00b      	beq.n	800ab84 <_vfiprintf_r+0xc0>
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	4622      	mov	r2, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7ff ff93 	bl	800aa9e <__sfputs_r>
 800ab78:	3001      	adds	r0, #1
 800ab7a:	f000 80aa 	beq.w	800acd2 <_vfiprintf_r+0x20e>
 800ab7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab80:	445a      	add	r2, fp
 800ab82:	9209      	str	r2, [sp, #36]	; 0x24
 800ab84:	f89a 3000 	ldrb.w	r3, [sl]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80a2 	beq.w	800acd2 <_vfiprintf_r+0x20e>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295
 800ab94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab98:	f10a 0a01 	add.w	sl, sl, #1
 800ab9c:	9304      	str	r3, [sp, #16]
 800ab9e:	9307      	str	r3, [sp, #28]
 800aba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aba4:	931a      	str	r3, [sp, #104]	; 0x68
 800aba6:	4654      	mov	r4, sl
 800aba8:	2205      	movs	r2, #5
 800abaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abae:	4858      	ldr	r0, [pc, #352]	; (800ad10 <_vfiprintf_r+0x24c>)
 800abb0:	f7f5 fb1e 	bl	80001f0 <memchr>
 800abb4:	9a04      	ldr	r2, [sp, #16]
 800abb6:	b9d8      	cbnz	r0, 800abf0 <_vfiprintf_r+0x12c>
 800abb8:	06d1      	lsls	r1, r2, #27
 800abba:	bf44      	itt	mi
 800abbc:	2320      	movmi	r3, #32
 800abbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc2:	0713      	lsls	r3, r2, #28
 800abc4:	bf44      	itt	mi
 800abc6:	232b      	movmi	r3, #43	; 0x2b
 800abc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abcc:	f89a 3000 	ldrb.w	r3, [sl]
 800abd0:	2b2a      	cmp	r3, #42	; 0x2a
 800abd2:	d015      	beq.n	800ac00 <_vfiprintf_r+0x13c>
 800abd4:	9a07      	ldr	r2, [sp, #28]
 800abd6:	4654      	mov	r4, sl
 800abd8:	2000      	movs	r0, #0
 800abda:	f04f 0c0a 	mov.w	ip, #10
 800abde:	4621      	mov	r1, r4
 800abe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abe4:	3b30      	subs	r3, #48	; 0x30
 800abe6:	2b09      	cmp	r3, #9
 800abe8:	d94e      	bls.n	800ac88 <_vfiprintf_r+0x1c4>
 800abea:	b1b0      	cbz	r0, 800ac1a <_vfiprintf_r+0x156>
 800abec:	9207      	str	r2, [sp, #28]
 800abee:	e014      	b.n	800ac1a <_vfiprintf_r+0x156>
 800abf0:	eba0 0308 	sub.w	r3, r0, r8
 800abf4:	fa09 f303 	lsl.w	r3, r9, r3
 800abf8:	4313      	orrs	r3, r2
 800abfa:	9304      	str	r3, [sp, #16]
 800abfc:	46a2      	mov	sl, r4
 800abfe:	e7d2      	b.n	800aba6 <_vfiprintf_r+0xe2>
 800ac00:	9b03      	ldr	r3, [sp, #12]
 800ac02:	1d19      	adds	r1, r3, #4
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	9103      	str	r1, [sp, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfbb      	ittet	lt
 800ac0c:	425b      	neglt	r3, r3
 800ac0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac12:	9307      	strge	r3, [sp, #28]
 800ac14:	9307      	strlt	r3, [sp, #28]
 800ac16:	bfb8      	it	lt
 800ac18:	9204      	strlt	r2, [sp, #16]
 800ac1a:	7823      	ldrb	r3, [r4, #0]
 800ac1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac1e:	d10c      	bne.n	800ac3a <_vfiprintf_r+0x176>
 800ac20:	7863      	ldrb	r3, [r4, #1]
 800ac22:	2b2a      	cmp	r3, #42	; 0x2a
 800ac24:	d135      	bne.n	800ac92 <_vfiprintf_r+0x1ce>
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	1d1a      	adds	r2, r3, #4
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	9203      	str	r2, [sp, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	bfb8      	it	lt
 800ac32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac36:	3402      	adds	r4, #2
 800ac38:	9305      	str	r3, [sp, #20]
 800ac3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad20 <_vfiprintf_r+0x25c>
 800ac3e:	7821      	ldrb	r1, [r4, #0]
 800ac40:	2203      	movs	r2, #3
 800ac42:	4650      	mov	r0, sl
 800ac44:	f7f5 fad4 	bl	80001f0 <memchr>
 800ac48:	b140      	cbz	r0, 800ac5c <_vfiprintf_r+0x198>
 800ac4a:	2340      	movs	r3, #64	; 0x40
 800ac4c:	eba0 000a 	sub.w	r0, r0, sl
 800ac50:	fa03 f000 	lsl.w	r0, r3, r0
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	4303      	orrs	r3, r0
 800ac58:	3401      	adds	r4, #1
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac60:	482c      	ldr	r0, [pc, #176]	; (800ad14 <_vfiprintf_r+0x250>)
 800ac62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac66:	2206      	movs	r2, #6
 800ac68:	f7f5 fac2 	bl	80001f0 <memchr>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d03f      	beq.n	800acf0 <_vfiprintf_r+0x22c>
 800ac70:	4b29      	ldr	r3, [pc, #164]	; (800ad18 <_vfiprintf_r+0x254>)
 800ac72:	bb1b      	cbnz	r3, 800acbc <_vfiprintf_r+0x1f8>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	3307      	adds	r3, #7
 800ac78:	f023 0307 	bic.w	r3, r3, #7
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac82:	443b      	add	r3, r7
 800ac84:	9309      	str	r3, [sp, #36]	; 0x24
 800ac86:	e767      	b.n	800ab58 <_vfiprintf_r+0x94>
 800ac88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	2001      	movs	r0, #1
 800ac90:	e7a5      	b.n	800abde <_vfiprintf_r+0x11a>
 800ac92:	2300      	movs	r3, #0
 800ac94:	3401      	adds	r4, #1
 800ac96:	9305      	str	r3, [sp, #20]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f04f 0c0a 	mov.w	ip, #10
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca4:	3a30      	subs	r2, #48	; 0x30
 800aca6:	2a09      	cmp	r2, #9
 800aca8:	d903      	bls.n	800acb2 <_vfiprintf_r+0x1ee>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0c5      	beq.n	800ac3a <_vfiprintf_r+0x176>
 800acae:	9105      	str	r1, [sp, #20]
 800acb0:	e7c3      	b.n	800ac3a <_vfiprintf_r+0x176>
 800acb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb6:	4604      	mov	r4, r0
 800acb8:	2301      	movs	r3, #1
 800acba:	e7f0      	b.n	800ac9e <_vfiprintf_r+0x1da>
 800acbc:	ab03      	add	r3, sp, #12
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	462a      	mov	r2, r5
 800acc2:	4b16      	ldr	r3, [pc, #88]	; (800ad1c <_vfiprintf_r+0x258>)
 800acc4:	a904      	add	r1, sp, #16
 800acc6:	4630      	mov	r0, r6
 800acc8:	f7fc f884 	bl	8006dd4 <_printf_float>
 800accc:	4607      	mov	r7, r0
 800acce:	1c78      	adds	r0, r7, #1
 800acd0:	d1d6      	bne.n	800ac80 <_vfiprintf_r+0x1bc>
 800acd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acd4:	07d9      	lsls	r1, r3, #31
 800acd6:	d405      	bmi.n	800ace4 <_vfiprintf_r+0x220>
 800acd8:	89ab      	ldrh	r3, [r5, #12]
 800acda:	059a      	lsls	r2, r3, #22
 800acdc:	d402      	bmi.n	800ace4 <_vfiprintf_r+0x220>
 800acde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ace0:	f000 faa1 	bl	800b226 <__retarget_lock_release_recursive>
 800ace4:	89ab      	ldrh	r3, [r5, #12]
 800ace6:	065b      	lsls	r3, r3, #25
 800ace8:	f53f af12 	bmi.w	800ab10 <_vfiprintf_r+0x4c>
 800acec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acee:	e711      	b.n	800ab14 <_vfiprintf_r+0x50>
 800acf0:	ab03      	add	r3, sp, #12
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	462a      	mov	r2, r5
 800acf6:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <_vfiprintf_r+0x258>)
 800acf8:	a904      	add	r1, sp, #16
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7fc fb0e 	bl	800731c <_printf_i>
 800ad00:	e7e4      	b.n	800accc <_vfiprintf_r+0x208>
 800ad02:	bf00      	nop
 800ad04:	0800b9cc 	.word	0x0800b9cc
 800ad08:	0800b9ec 	.word	0x0800b9ec
 800ad0c:	0800b9ac 	.word	0x0800b9ac
 800ad10:	0800b95c 	.word	0x0800b95c
 800ad14:	0800b966 	.word	0x0800b966
 800ad18:	08006dd5 	.word	0x08006dd5
 800ad1c:	0800aa9f 	.word	0x0800aa9f
 800ad20:	0800b962 	.word	0x0800b962

0800ad24 <__swbuf_r>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	460e      	mov	r6, r1
 800ad28:	4614      	mov	r4, r2
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	b118      	cbz	r0, 800ad36 <__swbuf_r+0x12>
 800ad2e:	6983      	ldr	r3, [r0, #24]
 800ad30:	b90b      	cbnz	r3, 800ad36 <__swbuf_r+0x12>
 800ad32:	f000 f9d9 	bl	800b0e8 <__sinit>
 800ad36:	4b21      	ldr	r3, [pc, #132]	; (800adbc <__swbuf_r+0x98>)
 800ad38:	429c      	cmp	r4, r3
 800ad3a:	d12b      	bne.n	800ad94 <__swbuf_r+0x70>
 800ad3c:	686c      	ldr	r4, [r5, #4]
 800ad3e:	69a3      	ldr	r3, [r4, #24]
 800ad40:	60a3      	str	r3, [r4, #8]
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	071a      	lsls	r2, r3, #28
 800ad46:	d52f      	bpl.n	800ada8 <__swbuf_r+0x84>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	b36b      	cbz	r3, 800ada8 <__swbuf_r+0x84>
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	6820      	ldr	r0, [r4, #0]
 800ad50:	1ac0      	subs	r0, r0, r3
 800ad52:	6963      	ldr	r3, [r4, #20]
 800ad54:	b2f6      	uxtb	r6, r6
 800ad56:	4283      	cmp	r3, r0
 800ad58:	4637      	mov	r7, r6
 800ad5a:	dc04      	bgt.n	800ad66 <__swbuf_r+0x42>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f000 f92e 	bl	800afc0 <_fflush_r>
 800ad64:	bb30      	cbnz	r0, 800adb4 <__swbuf_r+0x90>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	60a3      	str	r3, [r4, #8]
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	701e      	strb	r6, [r3, #0]
 800ad74:	6963      	ldr	r3, [r4, #20]
 800ad76:	3001      	adds	r0, #1
 800ad78:	4283      	cmp	r3, r0
 800ad7a:	d004      	beq.n	800ad86 <__swbuf_r+0x62>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	07db      	lsls	r3, r3, #31
 800ad80:	d506      	bpl.n	800ad90 <__swbuf_r+0x6c>
 800ad82:	2e0a      	cmp	r6, #10
 800ad84:	d104      	bne.n	800ad90 <__swbuf_r+0x6c>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f000 f919 	bl	800afc0 <_fflush_r>
 800ad8e:	b988      	cbnz	r0, 800adb4 <__swbuf_r+0x90>
 800ad90:	4638      	mov	r0, r7
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	4b0a      	ldr	r3, [pc, #40]	; (800adc0 <__swbuf_r+0x9c>)
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d101      	bne.n	800ad9e <__swbuf_r+0x7a>
 800ad9a:	68ac      	ldr	r4, [r5, #8]
 800ad9c:	e7cf      	b.n	800ad3e <__swbuf_r+0x1a>
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <__swbuf_r+0xa0>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	bf08      	it	eq
 800ada4:	68ec      	ldreq	r4, [r5, #12]
 800ada6:	e7ca      	b.n	800ad3e <__swbuf_r+0x1a>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f80c 	bl	800adc8 <__swsetup_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0cb      	beq.n	800ad4c <__swbuf_r+0x28>
 800adb4:	f04f 37ff 	mov.w	r7, #4294967295
 800adb8:	e7ea      	b.n	800ad90 <__swbuf_r+0x6c>
 800adba:	bf00      	nop
 800adbc:	0800b9cc 	.word	0x0800b9cc
 800adc0:	0800b9ec 	.word	0x0800b9ec
 800adc4:	0800b9ac 	.word	0x0800b9ac

0800adc8 <__swsetup_r>:
 800adc8:	4b32      	ldr	r3, [pc, #200]	; (800ae94 <__swsetup_r+0xcc>)
 800adca:	b570      	push	{r4, r5, r6, lr}
 800adcc:	681d      	ldr	r5, [r3, #0]
 800adce:	4606      	mov	r6, r0
 800add0:	460c      	mov	r4, r1
 800add2:	b125      	cbz	r5, 800adde <__swsetup_r+0x16>
 800add4:	69ab      	ldr	r3, [r5, #24]
 800add6:	b913      	cbnz	r3, 800adde <__swsetup_r+0x16>
 800add8:	4628      	mov	r0, r5
 800adda:	f000 f985 	bl	800b0e8 <__sinit>
 800adde:	4b2e      	ldr	r3, [pc, #184]	; (800ae98 <__swsetup_r+0xd0>)
 800ade0:	429c      	cmp	r4, r3
 800ade2:	d10f      	bne.n	800ae04 <__swsetup_r+0x3c>
 800ade4:	686c      	ldr	r4, [r5, #4]
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adec:	0719      	lsls	r1, r3, #28
 800adee:	d42c      	bmi.n	800ae4a <__swsetup_r+0x82>
 800adf0:	06dd      	lsls	r5, r3, #27
 800adf2:	d411      	bmi.n	800ae18 <__swsetup_r+0x50>
 800adf4:	2309      	movs	r3, #9
 800adf6:	6033      	str	r3, [r6, #0]
 800adf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ae02:	e03e      	b.n	800ae82 <__swsetup_r+0xba>
 800ae04:	4b25      	ldr	r3, [pc, #148]	; (800ae9c <__swsetup_r+0xd4>)
 800ae06:	429c      	cmp	r4, r3
 800ae08:	d101      	bne.n	800ae0e <__swsetup_r+0x46>
 800ae0a:	68ac      	ldr	r4, [r5, #8]
 800ae0c:	e7eb      	b.n	800ade6 <__swsetup_r+0x1e>
 800ae0e:	4b24      	ldr	r3, [pc, #144]	; (800aea0 <__swsetup_r+0xd8>)
 800ae10:	429c      	cmp	r4, r3
 800ae12:	bf08      	it	eq
 800ae14:	68ec      	ldreq	r4, [r5, #12]
 800ae16:	e7e6      	b.n	800ade6 <__swsetup_r+0x1e>
 800ae18:	0758      	lsls	r0, r3, #29
 800ae1a:	d512      	bpl.n	800ae42 <__swsetup_r+0x7a>
 800ae1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae1e:	b141      	cbz	r1, 800ae32 <__swsetup_r+0x6a>
 800ae20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae24:	4299      	cmp	r1, r3
 800ae26:	d002      	beq.n	800ae2e <__swsetup_r+0x66>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f7ff fb67 	bl	800a4fc <_free_r>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6363      	str	r3, [r4, #52]	; 0x34
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f043 0308 	orr.w	r3, r3, #8
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	b94b      	cbnz	r3, 800ae62 <__swsetup_r+0x9a>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae58:	d003      	beq.n	800ae62 <__swsetup_r+0x9a>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f000 fa07 	bl	800b270 <__smakebuf_r>
 800ae62:	89a0      	ldrh	r0, [r4, #12]
 800ae64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae68:	f010 0301 	ands.w	r3, r0, #1
 800ae6c:	d00a      	beq.n	800ae84 <__swsetup_r+0xbc>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60a3      	str	r3, [r4, #8]
 800ae72:	6963      	ldr	r3, [r4, #20]
 800ae74:	425b      	negs	r3, r3
 800ae76:	61a3      	str	r3, [r4, #24]
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	b943      	cbnz	r3, 800ae8e <__swsetup_r+0xc6>
 800ae7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae80:	d1ba      	bne.n	800adf8 <__swsetup_r+0x30>
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	0781      	lsls	r1, r0, #30
 800ae86:	bf58      	it	pl
 800ae88:	6963      	ldrpl	r3, [r4, #20]
 800ae8a:	60a3      	str	r3, [r4, #8]
 800ae8c:	e7f4      	b.n	800ae78 <__swsetup_r+0xb0>
 800ae8e:	2000      	movs	r0, #0
 800ae90:	e7f7      	b.n	800ae82 <__swsetup_r+0xba>
 800ae92:	bf00      	nop
 800ae94:	2000000c 	.word	0x2000000c
 800ae98:	0800b9cc 	.word	0x0800b9cc
 800ae9c:	0800b9ec 	.word	0x0800b9ec
 800aea0:	0800b9ac 	.word	0x0800b9ac

0800aea4 <abort>:
 800aea4:	b508      	push	{r3, lr}
 800aea6:	2006      	movs	r0, #6
 800aea8:	f000 fa52 	bl	800b350 <raise>
 800aeac:	2001      	movs	r0, #1
 800aeae:	f7f6 fbeb 	bl	8001688 <_exit>
	...

0800aeb4 <__sflush_r>:
 800aeb4:	898a      	ldrh	r2, [r1, #12]
 800aeb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeba:	4605      	mov	r5, r0
 800aebc:	0710      	lsls	r0, r2, #28
 800aebe:	460c      	mov	r4, r1
 800aec0:	d458      	bmi.n	800af74 <__sflush_r+0xc0>
 800aec2:	684b      	ldr	r3, [r1, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	dc05      	bgt.n	800aed4 <__sflush_r+0x20>
 800aec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dc02      	bgt.n	800aed4 <__sflush_r+0x20>
 800aece:	2000      	movs	r0, #0
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aed6:	2e00      	cmp	r6, #0
 800aed8:	d0f9      	beq.n	800aece <__sflush_r+0x1a>
 800aeda:	2300      	movs	r3, #0
 800aedc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aee0:	682f      	ldr	r7, [r5, #0]
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	d032      	beq.n	800af4c <__sflush_r+0x98>
 800aee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	075a      	lsls	r2, r3, #29
 800aeec:	d505      	bpl.n	800aefa <__sflush_r+0x46>
 800aeee:	6863      	ldr	r3, [r4, #4]
 800aef0:	1ac0      	subs	r0, r0, r3
 800aef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aef4:	b10b      	cbz	r3, 800aefa <__sflush_r+0x46>
 800aef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aef8:	1ac0      	subs	r0, r0, r3
 800aefa:	2300      	movs	r3, #0
 800aefc:	4602      	mov	r2, r0
 800aefe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af00:	6a21      	ldr	r1, [r4, #32]
 800af02:	4628      	mov	r0, r5
 800af04:	47b0      	blx	r6
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	d106      	bne.n	800af1a <__sflush_r+0x66>
 800af0c:	6829      	ldr	r1, [r5, #0]
 800af0e:	291d      	cmp	r1, #29
 800af10:	d82c      	bhi.n	800af6c <__sflush_r+0xb8>
 800af12:	4a2a      	ldr	r2, [pc, #168]	; (800afbc <__sflush_r+0x108>)
 800af14:	40ca      	lsrs	r2, r1
 800af16:	07d6      	lsls	r6, r2, #31
 800af18:	d528      	bpl.n	800af6c <__sflush_r+0xb8>
 800af1a:	2200      	movs	r2, #0
 800af1c:	6062      	str	r2, [r4, #4]
 800af1e:	04d9      	lsls	r1, r3, #19
 800af20:	6922      	ldr	r2, [r4, #16]
 800af22:	6022      	str	r2, [r4, #0]
 800af24:	d504      	bpl.n	800af30 <__sflush_r+0x7c>
 800af26:	1c42      	adds	r2, r0, #1
 800af28:	d101      	bne.n	800af2e <__sflush_r+0x7a>
 800af2a:	682b      	ldr	r3, [r5, #0]
 800af2c:	b903      	cbnz	r3, 800af30 <__sflush_r+0x7c>
 800af2e:	6560      	str	r0, [r4, #84]	; 0x54
 800af30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af32:	602f      	str	r7, [r5, #0]
 800af34:	2900      	cmp	r1, #0
 800af36:	d0ca      	beq.n	800aece <__sflush_r+0x1a>
 800af38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af3c:	4299      	cmp	r1, r3
 800af3e:	d002      	beq.n	800af46 <__sflush_r+0x92>
 800af40:	4628      	mov	r0, r5
 800af42:	f7ff fadb 	bl	800a4fc <_free_r>
 800af46:	2000      	movs	r0, #0
 800af48:	6360      	str	r0, [r4, #52]	; 0x34
 800af4a:	e7c1      	b.n	800aed0 <__sflush_r+0x1c>
 800af4c:	6a21      	ldr	r1, [r4, #32]
 800af4e:	2301      	movs	r3, #1
 800af50:	4628      	mov	r0, r5
 800af52:	47b0      	blx	r6
 800af54:	1c41      	adds	r1, r0, #1
 800af56:	d1c7      	bne.n	800aee8 <__sflush_r+0x34>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0c4      	beq.n	800aee8 <__sflush_r+0x34>
 800af5e:	2b1d      	cmp	r3, #29
 800af60:	d001      	beq.n	800af66 <__sflush_r+0xb2>
 800af62:	2b16      	cmp	r3, #22
 800af64:	d101      	bne.n	800af6a <__sflush_r+0xb6>
 800af66:	602f      	str	r7, [r5, #0]
 800af68:	e7b1      	b.n	800aece <__sflush_r+0x1a>
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af70:	81a3      	strh	r3, [r4, #12]
 800af72:	e7ad      	b.n	800aed0 <__sflush_r+0x1c>
 800af74:	690f      	ldr	r7, [r1, #16]
 800af76:	2f00      	cmp	r7, #0
 800af78:	d0a9      	beq.n	800aece <__sflush_r+0x1a>
 800af7a:	0793      	lsls	r3, r2, #30
 800af7c:	680e      	ldr	r6, [r1, #0]
 800af7e:	bf08      	it	eq
 800af80:	694b      	ldreq	r3, [r1, #20]
 800af82:	600f      	str	r7, [r1, #0]
 800af84:	bf18      	it	ne
 800af86:	2300      	movne	r3, #0
 800af88:	eba6 0807 	sub.w	r8, r6, r7
 800af8c:	608b      	str	r3, [r1, #8]
 800af8e:	f1b8 0f00 	cmp.w	r8, #0
 800af92:	dd9c      	ble.n	800aece <__sflush_r+0x1a>
 800af94:	6a21      	ldr	r1, [r4, #32]
 800af96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af98:	4643      	mov	r3, r8
 800af9a:	463a      	mov	r2, r7
 800af9c:	4628      	mov	r0, r5
 800af9e:	47b0      	blx	r6
 800afa0:	2800      	cmp	r0, #0
 800afa2:	dc06      	bgt.n	800afb2 <__sflush_r+0xfe>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afaa:	81a3      	strh	r3, [r4, #12]
 800afac:	f04f 30ff 	mov.w	r0, #4294967295
 800afb0:	e78e      	b.n	800aed0 <__sflush_r+0x1c>
 800afb2:	4407      	add	r7, r0
 800afb4:	eba8 0800 	sub.w	r8, r8, r0
 800afb8:	e7e9      	b.n	800af8e <__sflush_r+0xda>
 800afba:	bf00      	nop
 800afbc:	20400001 	.word	0x20400001

0800afc0 <_fflush_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	690b      	ldr	r3, [r1, #16]
 800afc4:	4605      	mov	r5, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	b913      	cbnz	r3, 800afd0 <_fflush_r+0x10>
 800afca:	2500      	movs	r5, #0
 800afcc:	4628      	mov	r0, r5
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	b118      	cbz	r0, 800afda <_fflush_r+0x1a>
 800afd2:	6983      	ldr	r3, [r0, #24]
 800afd4:	b90b      	cbnz	r3, 800afda <_fflush_r+0x1a>
 800afd6:	f000 f887 	bl	800b0e8 <__sinit>
 800afda:	4b14      	ldr	r3, [pc, #80]	; (800b02c <_fflush_r+0x6c>)
 800afdc:	429c      	cmp	r4, r3
 800afde:	d11b      	bne.n	800b018 <_fflush_r+0x58>
 800afe0:	686c      	ldr	r4, [r5, #4]
 800afe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0ef      	beq.n	800afca <_fflush_r+0xa>
 800afea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afec:	07d0      	lsls	r0, r2, #31
 800afee:	d404      	bmi.n	800affa <_fflush_r+0x3a>
 800aff0:	0599      	lsls	r1, r3, #22
 800aff2:	d402      	bmi.n	800affa <_fflush_r+0x3a>
 800aff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aff6:	f000 f915 	bl	800b224 <__retarget_lock_acquire_recursive>
 800affa:	4628      	mov	r0, r5
 800affc:	4621      	mov	r1, r4
 800affe:	f7ff ff59 	bl	800aeb4 <__sflush_r>
 800b002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b004:	07da      	lsls	r2, r3, #31
 800b006:	4605      	mov	r5, r0
 800b008:	d4e0      	bmi.n	800afcc <_fflush_r+0xc>
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	059b      	lsls	r3, r3, #22
 800b00e:	d4dd      	bmi.n	800afcc <_fflush_r+0xc>
 800b010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b012:	f000 f908 	bl	800b226 <__retarget_lock_release_recursive>
 800b016:	e7d9      	b.n	800afcc <_fflush_r+0xc>
 800b018:	4b05      	ldr	r3, [pc, #20]	; (800b030 <_fflush_r+0x70>)
 800b01a:	429c      	cmp	r4, r3
 800b01c:	d101      	bne.n	800b022 <_fflush_r+0x62>
 800b01e:	68ac      	ldr	r4, [r5, #8]
 800b020:	e7df      	b.n	800afe2 <_fflush_r+0x22>
 800b022:	4b04      	ldr	r3, [pc, #16]	; (800b034 <_fflush_r+0x74>)
 800b024:	429c      	cmp	r4, r3
 800b026:	bf08      	it	eq
 800b028:	68ec      	ldreq	r4, [r5, #12]
 800b02a:	e7da      	b.n	800afe2 <_fflush_r+0x22>
 800b02c:	0800b9cc 	.word	0x0800b9cc
 800b030:	0800b9ec 	.word	0x0800b9ec
 800b034:	0800b9ac 	.word	0x0800b9ac

0800b038 <std>:
 800b038:	2300      	movs	r3, #0
 800b03a:	b510      	push	{r4, lr}
 800b03c:	4604      	mov	r4, r0
 800b03e:	e9c0 3300 	strd	r3, r3, [r0]
 800b042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b046:	6083      	str	r3, [r0, #8]
 800b048:	8181      	strh	r1, [r0, #12]
 800b04a:	6643      	str	r3, [r0, #100]	; 0x64
 800b04c:	81c2      	strh	r2, [r0, #14]
 800b04e:	6183      	str	r3, [r0, #24]
 800b050:	4619      	mov	r1, r3
 800b052:	2208      	movs	r2, #8
 800b054:	305c      	adds	r0, #92	; 0x5c
 800b056:	f7fb fe15 	bl	8006c84 <memset>
 800b05a:	4b05      	ldr	r3, [pc, #20]	; (800b070 <std+0x38>)
 800b05c:	6263      	str	r3, [r4, #36]	; 0x24
 800b05e:	4b05      	ldr	r3, [pc, #20]	; (800b074 <std+0x3c>)
 800b060:	62a3      	str	r3, [r4, #40]	; 0x28
 800b062:	4b05      	ldr	r3, [pc, #20]	; (800b078 <std+0x40>)
 800b064:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b066:	4b05      	ldr	r3, [pc, #20]	; (800b07c <std+0x44>)
 800b068:	6224      	str	r4, [r4, #32]
 800b06a:	6323      	str	r3, [r4, #48]	; 0x30
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	bf00      	nop
 800b070:	0800b389 	.word	0x0800b389
 800b074:	0800b3ab 	.word	0x0800b3ab
 800b078:	0800b3e3 	.word	0x0800b3e3
 800b07c:	0800b407 	.word	0x0800b407

0800b080 <_cleanup_r>:
 800b080:	4901      	ldr	r1, [pc, #4]	; (800b088 <_cleanup_r+0x8>)
 800b082:	f000 b8af 	b.w	800b1e4 <_fwalk_reent>
 800b086:	bf00      	nop
 800b088:	0800afc1 	.word	0x0800afc1

0800b08c <__sfmoreglue>:
 800b08c:	b570      	push	{r4, r5, r6, lr}
 800b08e:	1e4a      	subs	r2, r1, #1
 800b090:	2568      	movs	r5, #104	; 0x68
 800b092:	4355      	muls	r5, r2
 800b094:	460e      	mov	r6, r1
 800b096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b09a:	f7ff fa7f 	bl	800a59c <_malloc_r>
 800b09e:	4604      	mov	r4, r0
 800b0a0:	b140      	cbz	r0, 800b0b4 <__sfmoreglue+0x28>
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	e9c0 1600 	strd	r1, r6, [r0]
 800b0a8:	300c      	adds	r0, #12
 800b0aa:	60a0      	str	r0, [r4, #8]
 800b0ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0b0:	f7fb fde8 	bl	8006c84 <memset>
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}

0800b0b8 <__sfp_lock_acquire>:
 800b0b8:	4801      	ldr	r0, [pc, #4]	; (800b0c0 <__sfp_lock_acquire+0x8>)
 800b0ba:	f000 b8b3 	b.w	800b224 <__retarget_lock_acquire_recursive>
 800b0be:	bf00      	nop
 800b0c0:	200003f0 	.word	0x200003f0

0800b0c4 <__sfp_lock_release>:
 800b0c4:	4801      	ldr	r0, [pc, #4]	; (800b0cc <__sfp_lock_release+0x8>)
 800b0c6:	f000 b8ae 	b.w	800b226 <__retarget_lock_release_recursive>
 800b0ca:	bf00      	nop
 800b0cc:	200003f0 	.word	0x200003f0

0800b0d0 <__sinit_lock_acquire>:
 800b0d0:	4801      	ldr	r0, [pc, #4]	; (800b0d8 <__sinit_lock_acquire+0x8>)
 800b0d2:	f000 b8a7 	b.w	800b224 <__retarget_lock_acquire_recursive>
 800b0d6:	bf00      	nop
 800b0d8:	200003eb 	.word	0x200003eb

0800b0dc <__sinit_lock_release>:
 800b0dc:	4801      	ldr	r0, [pc, #4]	; (800b0e4 <__sinit_lock_release+0x8>)
 800b0de:	f000 b8a2 	b.w	800b226 <__retarget_lock_release_recursive>
 800b0e2:	bf00      	nop
 800b0e4:	200003eb 	.word	0x200003eb

0800b0e8 <__sinit>:
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	f7ff fff0 	bl	800b0d0 <__sinit_lock_acquire>
 800b0f0:	69a3      	ldr	r3, [r4, #24]
 800b0f2:	b11b      	cbz	r3, 800b0fc <__sinit+0x14>
 800b0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f8:	f7ff bff0 	b.w	800b0dc <__sinit_lock_release>
 800b0fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b100:	6523      	str	r3, [r4, #80]	; 0x50
 800b102:	4b13      	ldr	r3, [pc, #76]	; (800b150 <__sinit+0x68>)
 800b104:	4a13      	ldr	r2, [pc, #76]	; (800b154 <__sinit+0x6c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	62a2      	str	r2, [r4, #40]	; 0x28
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	bf04      	itt	eq
 800b10e:	2301      	moveq	r3, #1
 800b110:	61a3      	streq	r3, [r4, #24]
 800b112:	4620      	mov	r0, r4
 800b114:	f000 f820 	bl	800b158 <__sfp>
 800b118:	6060      	str	r0, [r4, #4]
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 f81c 	bl	800b158 <__sfp>
 800b120:	60a0      	str	r0, [r4, #8]
 800b122:	4620      	mov	r0, r4
 800b124:	f000 f818 	bl	800b158 <__sfp>
 800b128:	2200      	movs	r2, #0
 800b12a:	60e0      	str	r0, [r4, #12]
 800b12c:	2104      	movs	r1, #4
 800b12e:	6860      	ldr	r0, [r4, #4]
 800b130:	f7ff ff82 	bl	800b038 <std>
 800b134:	68a0      	ldr	r0, [r4, #8]
 800b136:	2201      	movs	r2, #1
 800b138:	2109      	movs	r1, #9
 800b13a:	f7ff ff7d 	bl	800b038 <std>
 800b13e:	68e0      	ldr	r0, [r4, #12]
 800b140:	2202      	movs	r2, #2
 800b142:	2112      	movs	r1, #18
 800b144:	f7ff ff78 	bl	800b038 <std>
 800b148:	2301      	movs	r3, #1
 800b14a:	61a3      	str	r3, [r4, #24]
 800b14c:	e7d2      	b.n	800b0f4 <__sinit+0xc>
 800b14e:	bf00      	nop
 800b150:	0800b554 	.word	0x0800b554
 800b154:	0800b081 	.word	0x0800b081

0800b158 <__sfp>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	4607      	mov	r7, r0
 800b15c:	f7ff ffac 	bl	800b0b8 <__sfp_lock_acquire>
 800b160:	4b1e      	ldr	r3, [pc, #120]	; (800b1dc <__sfp+0x84>)
 800b162:	681e      	ldr	r6, [r3, #0]
 800b164:	69b3      	ldr	r3, [r6, #24]
 800b166:	b913      	cbnz	r3, 800b16e <__sfp+0x16>
 800b168:	4630      	mov	r0, r6
 800b16a:	f7ff ffbd 	bl	800b0e8 <__sinit>
 800b16e:	3648      	adds	r6, #72	; 0x48
 800b170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b174:	3b01      	subs	r3, #1
 800b176:	d503      	bpl.n	800b180 <__sfp+0x28>
 800b178:	6833      	ldr	r3, [r6, #0]
 800b17a:	b30b      	cbz	r3, 800b1c0 <__sfp+0x68>
 800b17c:	6836      	ldr	r6, [r6, #0]
 800b17e:	e7f7      	b.n	800b170 <__sfp+0x18>
 800b180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b184:	b9d5      	cbnz	r5, 800b1bc <__sfp+0x64>
 800b186:	4b16      	ldr	r3, [pc, #88]	; (800b1e0 <__sfp+0x88>)
 800b188:	60e3      	str	r3, [r4, #12]
 800b18a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b18e:	6665      	str	r5, [r4, #100]	; 0x64
 800b190:	f000 f847 	bl	800b222 <__retarget_lock_init_recursive>
 800b194:	f7ff ff96 	bl	800b0c4 <__sfp_lock_release>
 800b198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b19c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1a0:	6025      	str	r5, [r4, #0]
 800b1a2:	61a5      	str	r5, [r4, #24]
 800b1a4:	2208      	movs	r2, #8
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1ac:	f7fb fd6a 	bl	8006c84 <memset>
 800b1b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1bc:	3468      	adds	r4, #104	; 0x68
 800b1be:	e7d9      	b.n	800b174 <__sfp+0x1c>
 800b1c0:	2104      	movs	r1, #4
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f7ff ff62 	bl	800b08c <__sfmoreglue>
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	6030      	str	r0, [r6, #0]
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d1d5      	bne.n	800b17c <__sfp+0x24>
 800b1d0:	f7ff ff78 	bl	800b0c4 <__sfp_lock_release>
 800b1d4:	230c      	movs	r3, #12
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	e7ee      	b.n	800b1b8 <__sfp+0x60>
 800b1da:	bf00      	nop
 800b1dc:	0800b554 	.word	0x0800b554
 800b1e0:	ffff0001 	.word	0xffff0001

0800b1e4 <_fwalk_reent>:
 800b1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	4688      	mov	r8, r1
 800b1ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1f0:	2700      	movs	r7, #0
 800b1f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1f6:	f1b9 0901 	subs.w	r9, r9, #1
 800b1fa:	d505      	bpl.n	800b208 <_fwalk_reent+0x24>
 800b1fc:	6824      	ldr	r4, [r4, #0]
 800b1fe:	2c00      	cmp	r4, #0
 800b200:	d1f7      	bne.n	800b1f2 <_fwalk_reent+0xe>
 800b202:	4638      	mov	r0, r7
 800b204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b208:	89ab      	ldrh	r3, [r5, #12]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d907      	bls.n	800b21e <_fwalk_reent+0x3a>
 800b20e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b212:	3301      	adds	r3, #1
 800b214:	d003      	beq.n	800b21e <_fwalk_reent+0x3a>
 800b216:	4629      	mov	r1, r5
 800b218:	4630      	mov	r0, r6
 800b21a:	47c0      	blx	r8
 800b21c:	4307      	orrs	r7, r0
 800b21e:	3568      	adds	r5, #104	; 0x68
 800b220:	e7e9      	b.n	800b1f6 <_fwalk_reent+0x12>

0800b222 <__retarget_lock_init_recursive>:
 800b222:	4770      	bx	lr

0800b224 <__retarget_lock_acquire_recursive>:
 800b224:	4770      	bx	lr

0800b226 <__retarget_lock_release_recursive>:
 800b226:	4770      	bx	lr

0800b228 <__swhatbuf_r>:
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	460e      	mov	r6, r1
 800b22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b230:	2900      	cmp	r1, #0
 800b232:	b096      	sub	sp, #88	; 0x58
 800b234:	4614      	mov	r4, r2
 800b236:	461d      	mov	r5, r3
 800b238:	da07      	bge.n	800b24a <__swhatbuf_r+0x22>
 800b23a:	2300      	movs	r3, #0
 800b23c:	602b      	str	r3, [r5, #0]
 800b23e:	89b3      	ldrh	r3, [r6, #12]
 800b240:	061a      	lsls	r2, r3, #24
 800b242:	d410      	bmi.n	800b266 <__swhatbuf_r+0x3e>
 800b244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b248:	e00e      	b.n	800b268 <__swhatbuf_r+0x40>
 800b24a:	466a      	mov	r2, sp
 800b24c:	f000 f902 	bl	800b454 <_fstat_r>
 800b250:	2800      	cmp	r0, #0
 800b252:	dbf2      	blt.n	800b23a <__swhatbuf_r+0x12>
 800b254:	9a01      	ldr	r2, [sp, #4]
 800b256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b25a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b25e:	425a      	negs	r2, r3
 800b260:	415a      	adcs	r2, r3
 800b262:	602a      	str	r2, [r5, #0]
 800b264:	e7ee      	b.n	800b244 <__swhatbuf_r+0x1c>
 800b266:	2340      	movs	r3, #64	; 0x40
 800b268:	2000      	movs	r0, #0
 800b26a:	6023      	str	r3, [r4, #0]
 800b26c:	b016      	add	sp, #88	; 0x58
 800b26e:	bd70      	pop	{r4, r5, r6, pc}

0800b270 <__smakebuf_r>:
 800b270:	898b      	ldrh	r3, [r1, #12]
 800b272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b274:	079d      	lsls	r5, r3, #30
 800b276:	4606      	mov	r6, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	d507      	bpl.n	800b28c <__smakebuf_r+0x1c>
 800b27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	6123      	str	r3, [r4, #16]
 800b284:	2301      	movs	r3, #1
 800b286:	6163      	str	r3, [r4, #20]
 800b288:	b002      	add	sp, #8
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	ab01      	add	r3, sp, #4
 800b28e:	466a      	mov	r2, sp
 800b290:	f7ff ffca 	bl	800b228 <__swhatbuf_r>
 800b294:	9900      	ldr	r1, [sp, #0]
 800b296:	4605      	mov	r5, r0
 800b298:	4630      	mov	r0, r6
 800b29a:	f7ff f97f 	bl	800a59c <_malloc_r>
 800b29e:	b948      	cbnz	r0, 800b2b4 <__smakebuf_r+0x44>
 800b2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a4:	059a      	lsls	r2, r3, #22
 800b2a6:	d4ef      	bmi.n	800b288 <__smakebuf_r+0x18>
 800b2a8:	f023 0303 	bic.w	r3, r3, #3
 800b2ac:	f043 0302 	orr.w	r3, r3, #2
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	e7e3      	b.n	800b27c <__smakebuf_r+0xc>
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <__smakebuf_r+0x7c>)
 800b2b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	6020      	str	r0, [r4, #0]
 800b2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c0:	81a3      	strh	r3, [r4, #12]
 800b2c2:	9b00      	ldr	r3, [sp, #0]
 800b2c4:	6163      	str	r3, [r4, #20]
 800b2c6:	9b01      	ldr	r3, [sp, #4]
 800b2c8:	6120      	str	r0, [r4, #16]
 800b2ca:	b15b      	cbz	r3, 800b2e4 <__smakebuf_r+0x74>
 800b2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f000 f8d1 	bl	800b478 <_isatty_r>
 800b2d6:	b128      	cbz	r0, 800b2e4 <__smakebuf_r+0x74>
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	f023 0303 	bic.w	r3, r3, #3
 800b2de:	f043 0301 	orr.w	r3, r3, #1
 800b2e2:	81a3      	strh	r3, [r4, #12]
 800b2e4:	89a0      	ldrh	r0, [r4, #12]
 800b2e6:	4305      	orrs	r5, r0
 800b2e8:	81a5      	strh	r5, [r4, #12]
 800b2ea:	e7cd      	b.n	800b288 <__smakebuf_r+0x18>
 800b2ec:	0800b081 	.word	0x0800b081

0800b2f0 <_malloc_usable_size_r>:
 800b2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f4:	1f18      	subs	r0, r3, #4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bfbc      	itt	lt
 800b2fa:	580b      	ldrlt	r3, [r1, r0]
 800b2fc:	18c0      	addlt	r0, r0, r3
 800b2fe:	4770      	bx	lr

0800b300 <_raise_r>:
 800b300:	291f      	cmp	r1, #31
 800b302:	b538      	push	{r3, r4, r5, lr}
 800b304:	4604      	mov	r4, r0
 800b306:	460d      	mov	r5, r1
 800b308:	d904      	bls.n	800b314 <_raise_r+0x14>
 800b30a:	2316      	movs	r3, #22
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	f04f 30ff 	mov.w	r0, #4294967295
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b316:	b112      	cbz	r2, 800b31e <_raise_r+0x1e>
 800b318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b31c:	b94b      	cbnz	r3, 800b332 <_raise_r+0x32>
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 f830 	bl	800b384 <_getpid_r>
 800b324:	462a      	mov	r2, r5
 800b326:	4601      	mov	r1, r0
 800b328:	4620      	mov	r0, r4
 800b32a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b32e:	f000 b817 	b.w	800b360 <_kill_r>
 800b332:	2b01      	cmp	r3, #1
 800b334:	d00a      	beq.n	800b34c <_raise_r+0x4c>
 800b336:	1c59      	adds	r1, r3, #1
 800b338:	d103      	bne.n	800b342 <_raise_r+0x42>
 800b33a:	2316      	movs	r3, #22
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	2001      	movs	r0, #1
 800b340:	e7e7      	b.n	800b312 <_raise_r+0x12>
 800b342:	2400      	movs	r4, #0
 800b344:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b348:	4628      	mov	r0, r5
 800b34a:	4798      	blx	r3
 800b34c:	2000      	movs	r0, #0
 800b34e:	e7e0      	b.n	800b312 <_raise_r+0x12>

0800b350 <raise>:
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <raise+0xc>)
 800b352:	4601      	mov	r1, r0
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	f7ff bfd3 	b.w	800b300 <_raise_r>
 800b35a:	bf00      	nop
 800b35c:	2000000c 	.word	0x2000000c

0800b360 <_kill_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d07      	ldr	r5, [pc, #28]	; (800b380 <_kill_r+0x20>)
 800b364:	2300      	movs	r3, #0
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	4611      	mov	r1, r2
 800b36c:	602b      	str	r3, [r5, #0]
 800b36e:	f7f6 f97b 	bl	8001668 <_kill>
 800b372:	1c43      	adds	r3, r0, #1
 800b374:	d102      	bne.n	800b37c <_kill_r+0x1c>
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	b103      	cbz	r3, 800b37c <_kill_r+0x1c>
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	bd38      	pop	{r3, r4, r5, pc}
 800b37e:	bf00      	nop
 800b380:	200003e4 	.word	0x200003e4

0800b384 <_getpid_r>:
 800b384:	f7f6 b968 	b.w	8001658 <_getpid>

0800b388 <__sread>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	460c      	mov	r4, r1
 800b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b390:	f000 f894 	bl	800b4bc <_read_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	bfab      	itete	ge
 800b398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b39a:	89a3      	ldrhlt	r3, [r4, #12]
 800b39c:	181b      	addge	r3, r3, r0
 800b39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3a2:	bfac      	ite	ge
 800b3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3a6:	81a3      	strhlt	r3, [r4, #12]
 800b3a8:	bd10      	pop	{r4, pc}

0800b3aa <__swrite>:
 800b3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ae:	461f      	mov	r7, r3
 800b3b0:	898b      	ldrh	r3, [r1, #12]
 800b3b2:	05db      	lsls	r3, r3, #23
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	4616      	mov	r6, r2
 800b3ba:	d505      	bpl.n	800b3c8 <__swrite+0x1e>
 800b3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f000 f868 	bl	800b498 <_lseek_r>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	4628      	mov	r0, r5
 800b3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3de:	f000 b817 	b.w	800b410 <_write_r>

0800b3e2 <__sseek>:
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ea:	f000 f855 	bl	800b498 <_lseek_r>
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	bf15      	itete	ne
 800b3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3fe:	81a3      	strheq	r3, [r4, #12]
 800b400:	bf18      	it	ne
 800b402:	81a3      	strhne	r3, [r4, #12]
 800b404:	bd10      	pop	{r4, pc}

0800b406 <__sclose>:
 800b406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b40a:	f000 b813 	b.w	800b434 <_close_r>
	...

0800b410 <_write_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4d07      	ldr	r5, [pc, #28]	; (800b430 <_write_r+0x20>)
 800b414:	4604      	mov	r4, r0
 800b416:	4608      	mov	r0, r1
 800b418:	4611      	mov	r1, r2
 800b41a:	2200      	movs	r2, #0
 800b41c:	602a      	str	r2, [r5, #0]
 800b41e:	461a      	mov	r2, r3
 800b420:	f7f6 f959 	bl	80016d6 <_write>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d102      	bne.n	800b42e <_write_r+0x1e>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	b103      	cbz	r3, 800b42e <_write_r+0x1e>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
 800b430:	200003e4 	.word	0x200003e4

0800b434 <_close_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d06      	ldr	r5, [pc, #24]	; (800b450 <_close_r+0x1c>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f6 f965 	bl	800170e <_close>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_close_r+0x1a>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_close_r+0x1a>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	200003e4 	.word	0x200003e4

0800b454 <_fstat_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d07      	ldr	r5, [pc, #28]	; (800b474 <_fstat_r+0x20>)
 800b458:	2300      	movs	r3, #0
 800b45a:	4604      	mov	r4, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	4611      	mov	r1, r2
 800b460:	602b      	str	r3, [r5, #0]
 800b462:	f7f6 f960 	bl	8001726 <_fstat>
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	d102      	bne.n	800b470 <_fstat_r+0x1c>
 800b46a:	682b      	ldr	r3, [r5, #0]
 800b46c:	b103      	cbz	r3, 800b470 <_fstat_r+0x1c>
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	bd38      	pop	{r3, r4, r5, pc}
 800b472:	bf00      	nop
 800b474:	200003e4 	.word	0x200003e4

0800b478 <_isatty_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4d06      	ldr	r5, [pc, #24]	; (800b494 <_isatty_r+0x1c>)
 800b47c:	2300      	movs	r3, #0
 800b47e:	4604      	mov	r4, r0
 800b480:	4608      	mov	r0, r1
 800b482:	602b      	str	r3, [r5, #0]
 800b484:	f7f6 f95f 	bl	8001746 <_isatty>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_isatty_r+0x1a>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_isatty_r+0x1a>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	200003e4 	.word	0x200003e4

0800b498 <_lseek_r>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	4d07      	ldr	r5, [pc, #28]	; (800b4b8 <_lseek_r+0x20>)
 800b49c:	4604      	mov	r4, r0
 800b49e:	4608      	mov	r0, r1
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	602a      	str	r2, [r5, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f7f6 f958 	bl	800175c <_lseek>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_lseek_r+0x1e>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_lseek_r+0x1e>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	200003e4 	.word	0x200003e4

0800b4bc <_read_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d07      	ldr	r5, [pc, #28]	; (800b4dc <_read_r+0x20>)
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	4608      	mov	r0, r1
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f7f6 f8e6 	bl	800169c <_read>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_read_r+0x1e>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_read_r+0x1e>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	200003e4 	.word	0x200003e4

0800b4e0 <_init>:
 800b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e2:	bf00      	nop
 800b4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4e6:	bc08      	pop	{r3}
 800b4e8:	469e      	mov	lr, r3
 800b4ea:	4770      	bx	lr

0800b4ec <_fini>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	bf00      	nop
 800b4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f2:	bc08      	pop	{r3}
 800b4f4:	469e      	mov	lr, r3
 800b4f6:	4770      	bx	lr
